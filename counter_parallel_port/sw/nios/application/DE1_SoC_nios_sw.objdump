
DE1_SoC_nios_sw.elf:     file format elf32-littlenios2
DE1_SoC_nios_sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000244

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0000597c memsz 0x0000597c flags r-x
    LOAD off    0x0000699c vaddr 0x0400599c paddr 0x04007408 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008e74 vaddr 0x04008e74 paddr 0x04008e74 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005708  04000244  04000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  0400594c  0400594c  0000694c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  0400599c  04007408  0000699c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  04008e74  04008e74  00008e74  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  04008fc8  04008fc8  00008408  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008408  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a50  00000000  00000000  00008430  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001649f  00000000  00000000  00008e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006012  00000000  00000000  0001f31f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006a86  00000000  00000000  00025331  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000015e8  00000000  00000000  0002bdb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002705  00000000  00000000  0002d3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  0002faa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000344f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  00034558  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000371c6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000371c9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000371d5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000371d6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000371d7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000371db  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000371df  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000371e3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000371ee  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000371f9  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  00037204  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003a  00000000  00000000  0003720e  2**0
                  CONTENTS, READONLY
 29 .jdi          00005089  00000000  00000000  00037248  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00060ac1  00000000  00000000  0003c2d1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000244 l    d  .text	00000000 .text
0400594c l    d  .rodata	00000000 .rodata
0400599c l    d  .rwdata	00000000 .rwdata
04008e74 l    d  .bss	00000000 .bss
04008fc8 l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /home/vm/CyclonV_RTES_dev/counter_parallel_port/sw/nios/DE1_SoC_nios_sw_bsp//obj/HAL/src/crt0.o
0400028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
040004c4 l     F .text	00000008 __fp_unlock
040004d8 l     F .text	0000019c __sinit.part.1
04000674 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0400599c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
04003120 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0400322c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04003258 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
04003344 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
04003424 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
04003510 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
040036e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
040073f8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04003960 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04003a94 l     F .text	00000034 alt_dev_reg
04006370 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04003d70 l     F .text	0000020c altera_avalon_jtag_uart_irq
04003f7c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04004880 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04004cf4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04004e34 l     F .text	0000003c alt_get_errno
04004e70 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
04008e9c g     O .bss	00000004 alt_instruction_exception_handler
04002f18 g     F .text	00000054 _isatty_r
04003620 g     F .text	0000007c alt_main
04000358 g     F .text	000000c0 _puts_r
04008ec8 g     O .bss	00000100 alt_irq
04002c40 g     F .text	00000060 _lseek_r
04007408 g       *ABS*	00000000 __flash_rwdata_start
04008fc8 g       *ABS*	00000000 __alt_heap_start
040021f4 g     F .text	0000005c __sseek
04000814 g     F .text	00000010 __sinit
0400067c g     F .text	00000068 __sfmoreglue
040036c0 g     F .text	00000024 __malloc_unlock
040018e0 g     F .text	0000015c memmove
040007fc g     F .text	00000018 _cleanup
0400522c g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000001c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
04002ebc g     F .text	0000005c _fstat_r
04008e80 g     O .bss	00000004 errno
04002170 g     F .text	00000008 __seofread
04008e88 g     O .bss	00000004 alt_argv
0400f3d0 g       *ABS*	00000000 _gp
04003930 g     F .text	00000030 usleep
040061f0 g     O .rwdata	00000180 alt_fd_list
04005250 g     F .text	00000090 alt_find_dev
04001798 g     F .text	00000148 memcpy
040004cc g     F .text	0000000c _cleanup_r
04004db8 g     F .text	0000007c alt_io_redirect
0400594c g       *ABS*	00000000 __DTOR_END__
04000418 g     F .text	00000014 puts
0400551c g     F .text	0000009c alt_exception_cause_generated_bad_addr
04004174 g     F .text	0000021c altera_avalon_jtag_uart_read
04003064 g     F .text	00000064 .hidden __udivsi3
04003380 g     F .text	000000a4 isatty
0400548c g     F .text	00000090 alt_icache_flush
04008e7c g     O .bss	00000004 __malloc_top_pad
04000864 g     F .text	000004bc __sfvwrite_r
040020c8 g     F .text	00000054 _sbrk_r
04002e5c g     F .text	00000060 _read_r
040002c0 g     F .text	00000064 handle_leds
040073f0 g     O .rwdata	00000004 alt_max_fd
04002460 g     F .text	000000f0 _fclose_r
040027dc g     F .text	00000030 fflush
04008e78 g     O .bss	00000004 __malloc_max_sbrked_mem
0400354c g     F .text	000000d4 lseek
04000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
040073d0 g     O .rwdata	00000004 _global_impure_ptr
04001b64 g     F .text	00000564 _realloc_r
04008fc8 g       *ABS*	00000000 __bss_end
04004c04 g     F .text	000000f0 alt_iic_isr_register
04005124 g     F .text	00000108 alt_tick
04000834 g     F .text	00000018 __fp_lock_all
04004bb8 g     F .text	0000004c alt_ic_irq_enabled
04005088 g     F .text	0000009c alt_alarm_stop
04008e90 g     O .bss	00000004 alt_irq_active
040000fc g     F .exceptions	000000d4 alt_irq_handler
040061c8 g     O .rwdata	00000028 alt_dev_null
04004838 g     F .text	00000048 alt_dcache_flush_all
04007408 g       *ABS*	00000000 __ram_rwdata_end
040073e8 g     O .rwdata	00000008 alt_dev_list
0400399c g     F .text	000000f8 write
0400599c g       *ABS*	00000000 __ram_rodata_end
04003294 g     F .text	000000b0 fstat
040030c8 g     F .text	00000058 .hidden __umodsi3
04008fc8 g       *ABS*	00000000 end
04003cb0 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0400594c g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04004390 g     F .text	00000224 altera_avalon_jtag_uart_write
04000824 g     F .text	00000004 __sfp_lock_acquire
040016b4 g     F .text	000000e4 memchr
04002930 g     F .text	00000310 _free_r
04005798 g     F .text	00000180 __call_exitprocs
040073d8 g     O .rwdata	00000004 __malloc_sbrk_base
04000244 g     F .text	0000004c _start
04008e94 g     O .bss	00000004 _alt_tick_rate
04008e98 g     O .bss	00000004 _alt_nticks
04003720 g     F .text	000000fc read
04003b00 g     F .text	0000004c alt_sys_init
04005680 g     F .text	00000118 __register_exitproc
0400401c g     F .text	00000068 altera_avalon_jtag_uart_close
0400599c g       *ABS*	00000000 __ram_rwdata_start
0400594c g       *ABS*	00000000 __ram_rodata_start
04008ea0 g     O .bss	00000028 __malloc_current_mallinfo
04003b4c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
040053e8 g     F .text	000000a4 alt_get_fd
040046e0 g     F .text	00000158 alt_busy_sleep
0400240c g     F .text	00000054 _close_r
04005604 g     F .text	0000007c memcmp
04003c0c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04008fc8 g       *ABS*	00000000 __alt_stack_base
04003c5c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
040022b8 g     F .text	00000154 __swsetup_r
040006e4 g     F .text	00000118 __sfp
04005dc0 g     O .rwdata	00000408 __malloc_av_
04000830 g     F .text	00000004 __sinit_lock_release
0400211c g     F .text	00000054 __sread
040052e0 g     F .text	00000108 alt_find_file
040048bc g     F .text	000000a4 alt_dev_llist_insert
0400369c g     F .text	00000024 __malloc_lock
04003880 g     F .text	000000b0 sbrk
04002780 g     F .text	0000005c _fflush_r
04008e74 g       *ABS*	00000000 __bss_start
04001a3c g     F .text	00000128 memset
04000324 g     F .text	00000034 main
04008e8c g     O .bss	00000004 alt_envp
04008e74 g     O .bss	00000004 __malloc_max_total_mem
04003bac g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04002250 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04002550 g     F .text	00000014 fclose
04000ea8 g     F .text	0000080c _malloc_r
040073f4 g     O .rwdata	00000004 alt_errno
04000d20 g     F .text	000000c4 _fwalk
04002f6c g     F .text	00000084 .hidden __divsi3
0400280c g     F .text	00000124 _malloc_trim_r
0400594c g       *ABS*	00000000 __CTOR_END__
0400594c g       *ABS*	00000000 __flash_rodata_start
0400594c g       *ABS*	00000000 __DTOR_LIST__
04003ac8 g     F .text	00000038 alt_irq_init
0400381c g     F .text	00000064 alt_release_fd
040055b8 g     F .text	00000014 atexit
04002258 g     F .text	00000060 _write_r
040073d4 g     O .rwdata	00000004 _impure_ptr
04008e84 g     O .bss	00000004 alt_argc
04002564 g     F .text	0000021c __sflush_r
040049c0 g     F .text	00000060 _do_dtors
04000020 g       .exceptions	00000000 alt_irq_entry
0400084c g     F .text	00000018 __fp_unlock_all
040073e0 g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
04004a54 g     F .text	00000050 alt_ic_isr_register
04007408 g       *ABS*	00000000 _edata
04008fc8 g       *ABS*	00000000 _end
04000244 g       *ABS*	00000000 __ram_exceptions_end
04004084 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04004b2c g     F .text	0000008c alt_ic_irq_disable
04002178 g     F .text	0000007c __swrite
040073dc g     O .rwdata	00000004 __malloc_trim_threshold
040055cc g     F .text	00000038 exit
04000de4 g     F .text	000000c4 _fwalk_reent
04002ff0 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04000828 g     F .text	00000004 __sfp_lock_release
04005918 g     F .text	00000034 _exit
040045b4 g     F .text	0000012c alt_alarm_start
04002ca0 g     F .text	000001bc __smakebuf_r
0400042c g     F .text	00000098 strlen
04004f34 g     F .text	00000154 open
04004a20 g     F .text	00000034 alt_icache_flush_all
040073fc g     O .rwdata	00000004 alt_priority_mask
04004aa4 g     F .text	00000088 alt_ic_irq_enable
04007400 g     O .rwdata	00000008 alt_alarm_list
04004960 g     F .text	00000060 _do_ctors
0400315c g     F .text	000000d0 close
0400348c g     F .text	00000084 alt_load
0400082c g     F .text	00000004 __sinit_lock_acquire
04000290 g     F .text	00000030 setup_leds



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08409114 	ori	at,at,580
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__alt_mem_sdram_controller_0-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	00810074 	movhi	r2,1025
 4000140:	10a3b204 	addi	r2,r2,-28984
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	00810074 	movhi	r2,1025
 4000158:	10a3b204 	addi	r2,r2,-28984
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40001e4:	000531fa 	rdctl	r2,exception
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40001ec:	e0bffd17 	ldw	r2,-12(fp)
 40001f0:	10801f0c 	andi	r2,r2,124
 40001f4:	1004d0ba 	srli	r2,r2,2
 40001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40001fc:	0005333a 	rdctl	r2,badaddr
 4000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000204:	d0a6b317 	ldw	r2,-25908(gp)
 4000208:	10000726 	beq	r2,zero,4000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 400020c:	d0a6b317 	ldw	r2,-25908(gp)
 4000210:	e0fffd17 	ldw	r3,-12(fp)
 4000214:	e1bffe17 	ldw	r6,-8(fp)
 4000218:	e17fff17 	ldw	r5,-4(fp)
 400021c:	1809883a 	mov	r4,r3
 4000220:	103ee83a 	callr	r2
 4000224:	00000206 	br	4000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400022c:	0005883a 	mov	r2,zero
}
 4000230:	e037883a 	mov	sp,fp
 4000234:	dfc00117 	ldw	ra,4(sp)
 4000238:	df000017 	ldw	fp,0(sp)
 400023c:	dec00204 	addi	sp,sp,8
 4000240:	f800283a 	ret

Disassembly of section .text:

04000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000250:	00bffd16 	blt	zero,r2,4000248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400025c:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 4000260:	d6bcf414 	ori	gp,gp,62416
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000264:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000268:	10a39d14 	ori	r2,r2,36468

    movhi r3, %hi(__bss_end)
 400026c:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 4000270:	18e3f214 	ori	r3,r3,36808

    beq r2, r3, 1f
 4000274:	10c00326 	beq	r2,r3,4000284 <_start+0x40>

0:
    stw zero, (r2)
 4000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000280:	10fffd36 	bltu	r2,r3,4000278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000284:	400348c0 	call	400348c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000288:	40036200 	call	4003620 <alt_main>

0400028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 400028c:	003fff06 	br	400028c <alt_after_alt_main>

04000290 <setup_leds>:
#include "system.h"

#define SLEEP_DELAY_US (100 * 1000)

void setup_leds()
{
 4000290:	deffff04 	addi	sp,sp,-4
 4000294:	df000015 	stw	fp,0(sp)
 4000298:	d839883a 	mov	fp,sp
	// Switch on first LED only
	IOWR_ALTERA_AVALON_PIO_DATA(NIOS_LEDS_BASE, 0x1);
 400029c:	00c00044 	movi	r3,1
 40002a0:	00820034 	movhi	r2,2048
 40002a4:	10841404 	addi	r2,r2,4176
 40002a8:	10c00035 	stwio	r3,0(r2)
}
 40002ac:	0001883a 	nop
 40002b0:	e037883a 	mov	sp,fp
 40002b4:	df000017 	ldw	fp,0(sp)
 40002b8:	dec00104 	addi	sp,sp,4
 40002bc:	f800283a 	ret

040002c0 <handle_leds>:

void handle_leds()
{
 40002c0:	defffe04 	addi	sp,sp,-8
 40002c4:	df000115 	stw	fp,4(sp)
 40002c8:	df000104 	addi	fp,sp,4
	uint32_t leds_mask = IORD_ALTERA_AVALON_PIO_DATA(NIOS_LEDS_BASE);
 40002cc:	00820034 	movhi	r2,2048
 40002d0:	10841404 	addi	r2,r2,4176
 40002d4:	10800037 	ldwio	r2,0(r2)
 40002d8:	e0bfff15 	stw	r2,-4(fp)

	if (leds_mask != (0x01 << (NIOS_LEDS_DATA_WIDTH - 1)))
 40002dc:	e0bfff17 	ldw	r2,-4(fp)
 40002e0:	10808020 	cmpeqi	r2,r2,512
 40002e4:	1000041e 	bne	r2,zero,40002f8 <handle_leds+0x38>
	{
		// rotate leds
		leds_mask <<= 1;
 40002e8:	e0bfff17 	ldw	r2,-4(fp)
 40002ec:	1085883a 	add	r2,r2,r2
 40002f0:	e0bfff15 	stw	r2,-4(fp)
 40002f4:	00000206 	br	4000300 <handle_leds+0x40>
	} else
	{
		// reset leds
		leds_mask = 0x1;
 40002f8:	00800044 	movi	r2,1
 40002fc:	e0bfff15 	stw	r2,-4(fp)
	}

	IOWR_ALTERA_AVALON_PIO_DATA(NIOS_LEDS_BASE, leds_mask);
 4000300:	e0ffff17 	ldw	r3,-4(fp)
 4000304:	00820034 	movhi	r2,2048
 4000308:	10841404 	addi	r2,r2,4176
 400030c:	10c00035 	stwio	r3,0(r2)
}
 4000310:	0001883a 	nop
 4000314:	e037883a 	mov	sp,fp
 4000318:	df000017 	ldw	fp,0(sp)
 400031c:	dec00104 	addi	sp,sp,4
 4000320:	f800283a 	ret

04000324 <main>:

int main() {
 4000324:	defffe04 	addi	sp,sp,-8
 4000328:	dfc00115 	stw	ra,4(sp)
 400032c:	df000015 	stw	fp,0(sp)
 4000330:	d839883a 	mov	fp,sp
	printf("DE1-SoC nios demo\n");
 4000334:	01010034 	movhi	r4,1024
 4000338:	21165304 	addi	r4,r4,22860
 400033c:	40004180 	call	4000418 <puts>

	setup_leds();
 4000340:	40002900 	call	4000290 <setup_leds>

	while (true)
	{
		handle_leds();
 4000344:	40002c00 	call	40002c0 <handle_leds>
		usleep(SLEEP_DELAY_US);
 4000348:	010000b4 	movhi	r4,2
 400034c:	2121a804 	addi	r4,r4,-31072
 4000350:	40039300 	call	4003930 <usleep>
	}
 4000354:	003ffb06 	br	4000344 <main+0x20>

04000358 <_puts_r>:
 4000358:	defff604 	addi	sp,sp,-40
 400035c:	dc000715 	stw	r16,28(sp)
 4000360:	2021883a 	mov	r16,r4
 4000364:	2809883a 	mov	r4,r5
 4000368:	dc400815 	stw	r17,32(sp)
 400036c:	dfc00915 	stw	ra,36(sp)
 4000370:	2823883a 	mov	r17,r5
 4000374:	400042c0 	call	400042c <strlen>
 4000378:	10c00044 	addi	r3,r2,1
 400037c:	d8800115 	stw	r2,4(sp)
 4000380:	00810034 	movhi	r2,1024
 4000384:	10965804 	addi	r2,r2,22880
 4000388:	d8800215 	stw	r2,8(sp)
 400038c:	00800044 	movi	r2,1
 4000390:	d8800315 	stw	r2,12(sp)
 4000394:	00800084 	movi	r2,2
 4000398:	dc400015 	stw	r17,0(sp)
 400039c:	d8c00615 	stw	r3,24(sp)
 40003a0:	dec00415 	stw	sp,16(sp)
 40003a4:	d8800515 	stw	r2,20(sp)
 40003a8:	80000226 	beq	r16,zero,40003b4 <_puts_r+0x5c>
 40003ac:	80800e17 	ldw	r2,56(r16)
 40003b0:	10001426 	beq	r2,zero,4000404 <_puts_r+0xac>
 40003b4:	81400217 	ldw	r5,8(r16)
 40003b8:	2880030b 	ldhu	r2,12(r5)
 40003bc:	10c8000c 	andi	r3,r2,8192
 40003c0:	1800061e 	bne	r3,zero,40003dc <_puts_r+0x84>
 40003c4:	29001917 	ldw	r4,100(r5)
 40003c8:	00f7ffc4 	movi	r3,-8193
 40003cc:	10880014 	ori	r2,r2,8192
 40003d0:	20c6703a 	and	r3,r4,r3
 40003d4:	2880030d 	sth	r2,12(r5)
 40003d8:	28c01915 	stw	r3,100(r5)
 40003dc:	d9800404 	addi	r6,sp,16
 40003e0:	8009883a 	mov	r4,r16
 40003e4:	40008640 	call	4000864 <__sfvwrite_r>
 40003e8:	1000091e 	bne	r2,zero,4000410 <_puts_r+0xb8>
 40003ec:	00800284 	movi	r2,10
 40003f0:	dfc00917 	ldw	ra,36(sp)
 40003f4:	dc400817 	ldw	r17,32(sp)
 40003f8:	dc000717 	ldw	r16,28(sp)
 40003fc:	dec00a04 	addi	sp,sp,40
 4000400:	f800283a 	ret
 4000404:	8009883a 	mov	r4,r16
 4000408:	40008140 	call	4000814 <__sinit>
 400040c:	003fe906 	br	40003b4 <_puts_r+0x5c>
 4000410:	00bfffc4 	movi	r2,-1
 4000414:	003ff606 	br	40003f0 <_puts_r+0x98>

04000418 <puts>:
 4000418:	00810034 	movhi	r2,1024
 400041c:	109cf504 	addi	r2,r2,29652
 4000420:	200b883a 	mov	r5,r4
 4000424:	11000017 	ldw	r4,0(r2)
 4000428:	40003581 	jmpi	4000358 <_puts_r>

0400042c <strlen>:
 400042c:	208000cc 	andi	r2,r4,3
 4000430:	10002026 	beq	r2,zero,40004b4 <strlen+0x88>
 4000434:	20800007 	ldb	r2,0(r4)
 4000438:	10002026 	beq	r2,zero,40004bc <strlen+0x90>
 400043c:	2005883a 	mov	r2,r4
 4000440:	00000206 	br	400044c <strlen+0x20>
 4000444:	10c00007 	ldb	r3,0(r2)
 4000448:	18001826 	beq	r3,zero,40004ac <strlen+0x80>
 400044c:	10800044 	addi	r2,r2,1
 4000450:	10c000cc 	andi	r3,r2,3
 4000454:	183ffb1e 	bne	r3,zero,4000444 <strlen+0x18>
 4000458:	10c00017 	ldw	r3,0(r2)
 400045c:	01ffbff4 	movhi	r7,65279
 4000460:	39ffbfc4 	addi	r7,r7,-257
 4000464:	00ca303a 	nor	r5,zero,r3
 4000468:	01a02074 	movhi	r6,32897
 400046c:	19c7883a 	add	r3,r3,r7
 4000470:	31a02004 	addi	r6,r6,-32640
 4000474:	1946703a 	and	r3,r3,r5
 4000478:	1986703a 	and	r3,r3,r6
 400047c:	1800091e 	bne	r3,zero,40004a4 <strlen+0x78>
 4000480:	10800104 	addi	r2,r2,4
 4000484:	10c00017 	ldw	r3,0(r2)
 4000488:	19cb883a 	add	r5,r3,r7
 400048c:	00c6303a 	nor	r3,zero,r3
 4000490:	28c6703a 	and	r3,r5,r3
 4000494:	1986703a 	and	r3,r3,r6
 4000498:	183ff926 	beq	r3,zero,4000480 <strlen+0x54>
 400049c:	00000106 	br	40004a4 <strlen+0x78>
 40004a0:	10800044 	addi	r2,r2,1
 40004a4:	10c00007 	ldb	r3,0(r2)
 40004a8:	183ffd1e 	bne	r3,zero,40004a0 <strlen+0x74>
 40004ac:	1105c83a 	sub	r2,r2,r4
 40004b0:	f800283a 	ret
 40004b4:	2005883a 	mov	r2,r4
 40004b8:	003fe706 	br	4000458 <strlen+0x2c>
 40004bc:	0005883a 	mov	r2,zero
 40004c0:	f800283a 	ret

040004c4 <__fp_unlock>:
 40004c4:	0005883a 	mov	r2,zero
 40004c8:	f800283a 	ret

040004cc <_cleanup_r>:
 40004cc:	01410034 	movhi	r5,1024
 40004d0:	29491804 	addi	r5,r5,9312
 40004d4:	4000de41 	jmpi	4000de4 <_fwalk_reent>

040004d8 <__sinit.part.1>:
 40004d8:	defff704 	addi	sp,sp,-36
 40004dc:	00c10034 	movhi	r3,1024
 40004e0:	dfc00815 	stw	ra,32(sp)
 40004e4:	ddc00715 	stw	r23,28(sp)
 40004e8:	dd800615 	stw	r22,24(sp)
 40004ec:	dd400515 	stw	r21,20(sp)
 40004f0:	dd000415 	stw	r20,16(sp)
 40004f4:	dcc00315 	stw	r19,12(sp)
 40004f8:	dc800215 	stw	r18,8(sp)
 40004fc:	dc400115 	stw	r17,4(sp)
 4000500:	dc000015 	stw	r16,0(sp)
 4000504:	18c13304 	addi	r3,r3,1228
 4000508:	24000117 	ldw	r16,4(r4)
 400050c:	20c00f15 	stw	r3,60(r4)
 4000510:	2080bb04 	addi	r2,r4,748
 4000514:	00c000c4 	movi	r3,3
 4000518:	20c0b915 	stw	r3,740(r4)
 400051c:	2080ba15 	stw	r2,744(r4)
 4000520:	2000b815 	stw	zero,736(r4)
 4000524:	05c00204 	movi	r23,8
 4000528:	00800104 	movi	r2,4
 400052c:	2025883a 	mov	r18,r4
 4000530:	b80d883a 	mov	r6,r23
 4000534:	81001704 	addi	r4,r16,92
 4000538:	000b883a 	mov	r5,zero
 400053c:	80000015 	stw	zero,0(r16)
 4000540:	80000115 	stw	zero,4(r16)
 4000544:	80000215 	stw	zero,8(r16)
 4000548:	8080030d 	sth	r2,12(r16)
 400054c:	80001915 	stw	zero,100(r16)
 4000550:	8000038d 	sth	zero,14(r16)
 4000554:	80000415 	stw	zero,16(r16)
 4000558:	80000515 	stw	zero,20(r16)
 400055c:	80000615 	stw	zero,24(r16)
 4000560:	4001a3c0 	call	4001a3c <memset>
 4000564:	05810034 	movhi	r22,1024
 4000568:	94400217 	ldw	r17,8(r18)
 400056c:	05410034 	movhi	r21,1024
 4000570:	05010034 	movhi	r20,1024
 4000574:	04c10034 	movhi	r19,1024
 4000578:	b5884704 	addi	r22,r22,8476
 400057c:	ad485e04 	addi	r21,r21,8568
 4000580:	a5087d04 	addi	r20,r20,8692
 4000584:	9cc89404 	addi	r19,r19,8784
 4000588:	85800815 	stw	r22,32(r16)
 400058c:	85400915 	stw	r21,36(r16)
 4000590:	85000a15 	stw	r20,40(r16)
 4000594:	84c00b15 	stw	r19,44(r16)
 4000598:	84000715 	stw	r16,28(r16)
 400059c:	00800284 	movi	r2,10
 40005a0:	8880030d 	sth	r2,12(r17)
 40005a4:	00800044 	movi	r2,1
 40005a8:	b80d883a 	mov	r6,r23
 40005ac:	89001704 	addi	r4,r17,92
 40005b0:	000b883a 	mov	r5,zero
 40005b4:	88000015 	stw	zero,0(r17)
 40005b8:	88000115 	stw	zero,4(r17)
 40005bc:	88000215 	stw	zero,8(r17)
 40005c0:	88001915 	stw	zero,100(r17)
 40005c4:	8880038d 	sth	r2,14(r17)
 40005c8:	88000415 	stw	zero,16(r17)
 40005cc:	88000515 	stw	zero,20(r17)
 40005d0:	88000615 	stw	zero,24(r17)
 40005d4:	4001a3c0 	call	4001a3c <memset>
 40005d8:	94000317 	ldw	r16,12(r18)
 40005dc:	00800484 	movi	r2,18
 40005e0:	8c400715 	stw	r17,28(r17)
 40005e4:	8d800815 	stw	r22,32(r17)
 40005e8:	8d400915 	stw	r21,36(r17)
 40005ec:	8d000a15 	stw	r20,40(r17)
 40005f0:	8cc00b15 	stw	r19,44(r17)
 40005f4:	8080030d 	sth	r2,12(r16)
 40005f8:	00800084 	movi	r2,2
 40005fc:	80000015 	stw	zero,0(r16)
 4000600:	80000115 	stw	zero,4(r16)
 4000604:	80000215 	stw	zero,8(r16)
 4000608:	80001915 	stw	zero,100(r16)
 400060c:	8080038d 	sth	r2,14(r16)
 4000610:	80000415 	stw	zero,16(r16)
 4000614:	80000515 	stw	zero,20(r16)
 4000618:	80000615 	stw	zero,24(r16)
 400061c:	b80d883a 	mov	r6,r23
 4000620:	000b883a 	mov	r5,zero
 4000624:	81001704 	addi	r4,r16,92
 4000628:	4001a3c0 	call	4001a3c <memset>
 400062c:	00800044 	movi	r2,1
 4000630:	84000715 	stw	r16,28(r16)
 4000634:	85800815 	stw	r22,32(r16)
 4000638:	85400915 	stw	r21,36(r16)
 400063c:	85000a15 	stw	r20,40(r16)
 4000640:	84c00b15 	stw	r19,44(r16)
 4000644:	90800e15 	stw	r2,56(r18)
 4000648:	dfc00817 	ldw	ra,32(sp)
 400064c:	ddc00717 	ldw	r23,28(sp)
 4000650:	dd800617 	ldw	r22,24(sp)
 4000654:	dd400517 	ldw	r21,20(sp)
 4000658:	dd000417 	ldw	r20,16(sp)
 400065c:	dcc00317 	ldw	r19,12(sp)
 4000660:	dc800217 	ldw	r18,8(sp)
 4000664:	dc400117 	ldw	r17,4(sp)
 4000668:	dc000017 	ldw	r16,0(sp)
 400066c:	dec00904 	addi	sp,sp,36
 4000670:	f800283a 	ret

04000674 <__fp_lock>:
 4000674:	0005883a 	mov	r2,zero
 4000678:	f800283a 	ret

0400067c <__sfmoreglue>:
 400067c:	defffc04 	addi	sp,sp,-16
 4000680:	dc400115 	stw	r17,4(sp)
 4000684:	2c7fffc4 	addi	r17,r5,-1
 4000688:	8c401a24 	muli	r17,r17,104
 400068c:	dc800215 	stw	r18,8(sp)
 4000690:	2825883a 	mov	r18,r5
 4000694:	89401d04 	addi	r5,r17,116
 4000698:	dc000015 	stw	r16,0(sp)
 400069c:	dfc00315 	stw	ra,12(sp)
 40006a0:	4000ea80 	call	4000ea8 <_malloc_r>
 40006a4:	1021883a 	mov	r16,r2
 40006a8:	10000726 	beq	r2,zero,40006c8 <__sfmoreglue+0x4c>
 40006ac:	11000304 	addi	r4,r2,12
 40006b0:	10000015 	stw	zero,0(r2)
 40006b4:	14800115 	stw	r18,4(r2)
 40006b8:	11000215 	stw	r4,8(r2)
 40006bc:	89801a04 	addi	r6,r17,104
 40006c0:	000b883a 	mov	r5,zero
 40006c4:	4001a3c0 	call	4001a3c <memset>
 40006c8:	8005883a 	mov	r2,r16
 40006cc:	dfc00317 	ldw	ra,12(sp)
 40006d0:	dc800217 	ldw	r18,8(sp)
 40006d4:	dc400117 	ldw	r17,4(sp)
 40006d8:	dc000017 	ldw	r16,0(sp)
 40006dc:	dec00404 	addi	sp,sp,16
 40006e0:	f800283a 	ret

040006e4 <__sfp>:
 40006e4:	defffb04 	addi	sp,sp,-20
 40006e8:	dc000015 	stw	r16,0(sp)
 40006ec:	04010034 	movhi	r16,1024
 40006f0:	841cf404 	addi	r16,r16,29648
 40006f4:	dcc00315 	stw	r19,12(sp)
 40006f8:	2027883a 	mov	r19,r4
 40006fc:	81000017 	ldw	r4,0(r16)
 4000700:	dfc00415 	stw	ra,16(sp)
 4000704:	dc800215 	stw	r18,8(sp)
 4000708:	20800e17 	ldw	r2,56(r4)
 400070c:	dc400115 	stw	r17,4(sp)
 4000710:	1000021e 	bne	r2,zero,400071c <__sfp+0x38>
 4000714:	40004d80 	call	40004d8 <__sinit.part.1>
 4000718:	81000017 	ldw	r4,0(r16)
 400071c:	2480b804 	addi	r18,r4,736
 4000720:	047fffc4 	movi	r17,-1
 4000724:	91000117 	ldw	r4,4(r18)
 4000728:	94000217 	ldw	r16,8(r18)
 400072c:	213fffc4 	addi	r4,r4,-1
 4000730:	20000a16 	blt	r4,zero,400075c <__sfp+0x78>
 4000734:	8080030f 	ldh	r2,12(r16)
 4000738:	10000c26 	beq	r2,zero,400076c <__sfp+0x88>
 400073c:	80c01d04 	addi	r3,r16,116
 4000740:	00000206 	br	400074c <__sfp+0x68>
 4000744:	18bfe60f 	ldh	r2,-104(r3)
 4000748:	10000826 	beq	r2,zero,400076c <__sfp+0x88>
 400074c:	213fffc4 	addi	r4,r4,-1
 4000750:	1c3ffd04 	addi	r16,r3,-12
 4000754:	18c01a04 	addi	r3,r3,104
 4000758:	247ffa1e 	bne	r4,r17,4000744 <__sfp+0x60>
 400075c:	90800017 	ldw	r2,0(r18)
 4000760:	10001d26 	beq	r2,zero,40007d8 <__sfp+0xf4>
 4000764:	1025883a 	mov	r18,r2
 4000768:	003fee06 	br	4000724 <__sfp+0x40>
 400076c:	00bfffc4 	movi	r2,-1
 4000770:	8080038d 	sth	r2,14(r16)
 4000774:	00800044 	movi	r2,1
 4000778:	8080030d 	sth	r2,12(r16)
 400077c:	80001915 	stw	zero,100(r16)
 4000780:	80000015 	stw	zero,0(r16)
 4000784:	80000215 	stw	zero,8(r16)
 4000788:	80000115 	stw	zero,4(r16)
 400078c:	80000415 	stw	zero,16(r16)
 4000790:	80000515 	stw	zero,20(r16)
 4000794:	80000615 	stw	zero,24(r16)
 4000798:	01800204 	movi	r6,8
 400079c:	000b883a 	mov	r5,zero
 40007a0:	81001704 	addi	r4,r16,92
 40007a4:	4001a3c0 	call	4001a3c <memset>
 40007a8:	8005883a 	mov	r2,r16
 40007ac:	80000c15 	stw	zero,48(r16)
 40007b0:	80000d15 	stw	zero,52(r16)
 40007b4:	80001115 	stw	zero,68(r16)
 40007b8:	80001215 	stw	zero,72(r16)
 40007bc:	dfc00417 	ldw	ra,16(sp)
 40007c0:	dcc00317 	ldw	r19,12(sp)
 40007c4:	dc800217 	ldw	r18,8(sp)
 40007c8:	dc400117 	ldw	r17,4(sp)
 40007cc:	dc000017 	ldw	r16,0(sp)
 40007d0:	dec00504 	addi	sp,sp,20
 40007d4:	f800283a 	ret
 40007d8:	01400104 	movi	r5,4
 40007dc:	9809883a 	mov	r4,r19
 40007e0:	400067c0 	call	400067c <__sfmoreglue>
 40007e4:	90800015 	stw	r2,0(r18)
 40007e8:	103fde1e 	bne	r2,zero,4000764 <__sfp+0x80>
 40007ec:	00800304 	movi	r2,12
 40007f0:	98800015 	stw	r2,0(r19)
 40007f4:	0005883a 	mov	r2,zero
 40007f8:	003ff006 	br	40007bc <__sfp+0xd8>

040007fc <_cleanup>:
 40007fc:	00810034 	movhi	r2,1024
 4000800:	109cf404 	addi	r2,r2,29648
 4000804:	11000017 	ldw	r4,0(r2)
 4000808:	01410034 	movhi	r5,1024
 400080c:	29491804 	addi	r5,r5,9312
 4000810:	4000de41 	jmpi	4000de4 <_fwalk_reent>

04000814 <__sinit>:
 4000814:	20800e17 	ldw	r2,56(r4)
 4000818:	10000126 	beq	r2,zero,4000820 <__sinit+0xc>
 400081c:	f800283a 	ret
 4000820:	40004d81 	jmpi	40004d8 <__sinit.part.1>

04000824 <__sfp_lock_acquire>:
 4000824:	f800283a 	ret

04000828 <__sfp_lock_release>:
 4000828:	f800283a 	ret

0400082c <__sinit_lock_acquire>:
 400082c:	f800283a 	ret

04000830 <__sinit_lock_release>:
 4000830:	f800283a 	ret

04000834 <__fp_lock_all>:
 4000834:	00810034 	movhi	r2,1024
 4000838:	109cf504 	addi	r2,r2,29652
 400083c:	11000017 	ldw	r4,0(r2)
 4000840:	01410034 	movhi	r5,1024
 4000844:	29419d04 	addi	r5,r5,1652
 4000848:	4000d201 	jmpi	4000d20 <_fwalk>

0400084c <__fp_unlock_all>:
 400084c:	00810034 	movhi	r2,1024
 4000850:	109cf504 	addi	r2,r2,29652
 4000854:	11000017 	ldw	r4,0(r2)
 4000858:	01410034 	movhi	r5,1024
 400085c:	29413104 	addi	r5,r5,1220
 4000860:	4000d201 	jmpi	4000d20 <_fwalk>

04000864 <__sfvwrite_r>:
 4000864:	30800217 	ldw	r2,8(r6)
 4000868:	10006726 	beq	r2,zero,4000a08 <__sfvwrite_r+0x1a4>
 400086c:	28c0030b 	ldhu	r3,12(r5)
 4000870:	defff404 	addi	sp,sp,-48
 4000874:	dd400715 	stw	r21,28(sp)
 4000878:	dd000615 	stw	r20,24(sp)
 400087c:	dc000215 	stw	r16,8(sp)
 4000880:	dfc00b15 	stw	ra,44(sp)
 4000884:	df000a15 	stw	fp,40(sp)
 4000888:	ddc00915 	stw	r23,36(sp)
 400088c:	dd800815 	stw	r22,32(sp)
 4000890:	dcc00515 	stw	r19,20(sp)
 4000894:	dc800415 	stw	r18,16(sp)
 4000898:	dc400315 	stw	r17,12(sp)
 400089c:	1880020c 	andi	r2,r3,8
 40008a0:	2821883a 	mov	r16,r5
 40008a4:	202b883a 	mov	r21,r4
 40008a8:	3029883a 	mov	r20,r6
 40008ac:	10002726 	beq	r2,zero,400094c <__sfvwrite_r+0xe8>
 40008b0:	28800417 	ldw	r2,16(r5)
 40008b4:	10002526 	beq	r2,zero,400094c <__sfvwrite_r+0xe8>
 40008b8:	1880008c 	andi	r2,r3,2
 40008bc:	a4400017 	ldw	r17,0(r20)
 40008c0:	10002a26 	beq	r2,zero,400096c <__sfvwrite_r+0x108>
 40008c4:	05a00034 	movhi	r22,32768
 40008c8:	0027883a 	mov	r19,zero
 40008cc:	0025883a 	mov	r18,zero
 40008d0:	b5bf0004 	addi	r22,r22,-1024
 40008d4:	980d883a 	mov	r6,r19
 40008d8:	a809883a 	mov	r4,r21
 40008dc:	90004626 	beq	r18,zero,40009f8 <__sfvwrite_r+0x194>
 40008e0:	900f883a 	mov	r7,r18
 40008e4:	b480022e 	bgeu	r22,r18,40008f0 <__sfvwrite_r+0x8c>
 40008e8:	01e00034 	movhi	r7,32768
 40008ec:	39ff0004 	addi	r7,r7,-1024
 40008f0:	80800917 	ldw	r2,36(r16)
 40008f4:	81400717 	ldw	r5,28(r16)
 40008f8:	103ee83a 	callr	r2
 40008fc:	0080570e 	bge	zero,r2,4000a5c <__sfvwrite_r+0x1f8>
 4000900:	a0c00217 	ldw	r3,8(r20)
 4000904:	98a7883a 	add	r19,r19,r2
 4000908:	90a5c83a 	sub	r18,r18,r2
 400090c:	1885c83a 	sub	r2,r3,r2
 4000910:	a0800215 	stw	r2,8(r20)
 4000914:	103fef1e 	bne	r2,zero,40008d4 <__sfvwrite_r+0x70>
 4000918:	0005883a 	mov	r2,zero
 400091c:	dfc00b17 	ldw	ra,44(sp)
 4000920:	df000a17 	ldw	fp,40(sp)
 4000924:	ddc00917 	ldw	r23,36(sp)
 4000928:	dd800817 	ldw	r22,32(sp)
 400092c:	dd400717 	ldw	r21,28(sp)
 4000930:	dd000617 	ldw	r20,24(sp)
 4000934:	dcc00517 	ldw	r19,20(sp)
 4000938:	dc800417 	ldw	r18,16(sp)
 400093c:	dc400317 	ldw	r17,12(sp)
 4000940:	dc000217 	ldw	r16,8(sp)
 4000944:	dec00c04 	addi	sp,sp,48
 4000948:	f800283a 	ret
 400094c:	800b883a 	mov	r5,r16
 4000950:	a809883a 	mov	r4,r21
 4000954:	40022b80 	call	40022b8 <__swsetup_r>
 4000958:	1000eb1e 	bne	r2,zero,4000d08 <__sfvwrite_r+0x4a4>
 400095c:	80c0030b 	ldhu	r3,12(r16)
 4000960:	a4400017 	ldw	r17,0(r20)
 4000964:	1880008c 	andi	r2,r3,2
 4000968:	103fd61e 	bne	r2,zero,40008c4 <__sfvwrite_r+0x60>
 400096c:	1880004c 	andi	r2,r3,1
 4000970:	10003f1e 	bne	r2,zero,4000a70 <__sfvwrite_r+0x20c>
 4000974:	0039883a 	mov	fp,zero
 4000978:	0025883a 	mov	r18,zero
 400097c:	90001a26 	beq	r18,zero,40009e8 <__sfvwrite_r+0x184>
 4000980:	1880800c 	andi	r2,r3,512
 4000984:	84c00217 	ldw	r19,8(r16)
 4000988:	10002126 	beq	r2,zero,4000a10 <__sfvwrite_r+0x1ac>
 400098c:	982f883a 	mov	r23,r19
 4000990:	94c09336 	bltu	r18,r19,4000be0 <__sfvwrite_r+0x37c>
 4000994:	1881200c 	andi	r2,r3,1152
 4000998:	10009e1e 	bne	r2,zero,4000c14 <__sfvwrite_r+0x3b0>
 400099c:	81000017 	ldw	r4,0(r16)
 40009a0:	b80d883a 	mov	r6,r23
 40009a4:	e00b883a 	mov	r5,fp
 40009a8:	40018e00 	call	40018e0 <memmove>
 40009ac:	80c00217 	ldw	r3,8(r16)
 40009b0:	81000017 	ldw	r4,0(r16)
 40009b4:	9005883a 	mov	r2,r18
 40009b8:	1ce7c83a 	sub	r19,r3,r19
 40009bc:	25cf883a 	add	r7,r4,r23
 40009c0:	84c00215 	stw	r19,8(r16)
 40009c4:	81c00015 	stw	r7,0(r16)
 40009c8:	a0c00217 	ldw	r3,8(r20)
 40009cc:	e0b9883a 	add	fp,fp,r2
 40009d0:	90a5c83a 	sub	r18,r18,r2
 40009d4:	18a7c83a 	sub	r19,r3,r2
 40009d8:	a4c00215 	stw	r19,8(r20)
 40009dc:	983fce26 	beq	r19,zero,4000918 <__sfvwrite_r+0xb4>
 40009e0:	80c0030b 	ldhu	r3,12(r16)
 40009e4:	903fe61e 	bne	r18,zero,4000980 <__sfvwrite_r+0x11c>
 40009e8:	8f000017 	ldw	fp,0(r17)
 40009ec:	8c800117 	ldw	r18,4(r17)
 40009f0:	8c400204 	addi	r17,r17,8
 40009f4:	003fe106 	br	400097c <__sfvwrite_r+0x118>
 40009f8:	8cc00017 	ldw	r19,0(r17)
 40009fc:	8c800117 	ldw	r18,4(r17)
 4000a00:	8c400204 	addi	r17,r17,8
 4000a04:	003fb306 	br	40008d4 <__sfvwrite_r+0x70>
 4000a08:	0005883a 	mov	r2,zero
 4000a0c:	f800283a 	ret
 4000a10:	81000017 	ldw	r4,0(r16)
 4000a14:	80800417 	ldw	r2,16(r16)
 4000a18:	11005736 	bltu	r2,r4,4000b78 <__sfvwrite_r+0x314>
 4000a1c:	85c00517 	ldw	r23,20(r16)
 4000a20:	95c05536 	bltu	r18,r23,4000b78 <__sfvwrite_r+0x314>
 4000a24:	00a00034 	movhi	r2,32768
 4000a28:	10bfffc4 	addi	r2,r2,-1
 4000a2c:	9009883a 	mov	r4,r18
 4000a30:	1480012e 	bgeu	r2,r18,4000a38 <__sfvwrite_r+0x1d4>
 4000a34:	1009883a 	mov	r4,r2
 4000a38:	b80b883a 	mov	r5,r23
 4000a3c:	4002f6c0 	call	4002f6c <__divsi3>
 4000a40:	15cf383a 	mul	r7,r2,r23
 4000a44:	81400717 	ldw	r5,28(r16)
 4000a48:	80800917 	ldw	r2,36(r16)
 4000a4c:	e00d883a 	mov	r6,fp
 4000a50:	a809883a 	mov	r4,r21
 4000a54:	103ee83a 	callr	r2
 4000a58:	00bfdb16 	blt	zero,r2,40009c8 <__sfvwrite_r+0x164>
 4000a5c:	8080030b 	ldhu	r2,12(r16)
 4000a60:	10801014 	ori	r2,r2,64
 4000a64:	8080030d 	sth	r2,12(r16)
 4000a68:	00bfffc4 	movi	r2,-1
 4000a6c:	003fab06 	br	400091c <__sfvwrite_r+0xb8>
 4000a70:	0027883a 	mov	r19,zero
 4000a74:	0011883a 	mov	r8,zero
 4000a78:	0039883a 	mov	fp,zero
 4000a7c:	0025883a 	mov	r18,zero
 4000a80:	90001f26 	beq	r18,zero,4000b00 <__sfvwrite_r+0x29c>
 4000a84:	40005a26 	beq	r8,zero,4000bf0 <__sfvwrite_r+0x38c>
 4000a88:	982d883a 	mov	r22,r19
 4000a8c:	94c0012e 	bgeu	r18,r19,4000a94 <__sfvwrite_r+0x230>
 4000a90:	902d883a 	mov	r22,r18
 4000a94:	81000017 	ldw	r4,0(r16)
 4000a98:	80800417 	ldw	r2,16(r16)
 4000a9c:	b02f883a 	mov	r23,r22
 4000aa0:	81c00517 	ldw	r7,20(r16)
 4000aa4:	1100032e 	bgeu	r2,r4,4000ab4 <__sfvwrite_r+0x250>
 4000aa8:	80c00217 	ldw	r3,8(r16)
 4000aac:	38c7883a 	add	r3,r7,r3
 4000ab0:	1d801816 	blt	r3,r22,4000b14 <__sfvwrite_r+0x2b0>
 4000ab4:	b1c03e16 	blt	r22,r7,4000bb0 <__sfvwrite_r+0x34c>
 4000ab8:	80800917 	ldw	r2,36(r16)
 4000abc:	81400717 	ldw	r5,28(r16)
 4000ac0:	e00d883a 	mov	r6,fp
 4000ac4:	da000115 	stw	r8,4(sp)
 4000ac8:	a809883a 	mov	r4,r21
 4000acc:	103ee83a 	callr	r2
 4000ad0:	102f883a 	mov	r23,r2
 4000ad4:	da000117 	ldw	r8,4(sp)
 4000ad8:	00bfe00e 	bge	zero,r2,4000a5c <__sfvwrite_r+0x1f8>
 4000adc:	9de7c83a 	sub	r19,r19,r23
 4000ae0:	98001f26 	beq	r19,zero,4000b60 <__sfvwrite_r+0x2fc>
 4000ae4:	a0800217 	ldw	r2,8(r20)
 4000ae8:	e5f9883a 	add	fp,fp,r23
 4000aec:	95e5c83a 	sub	r18,r18,r23
 4000af0:	15efc83a 	sub	r23,r2,r23
 4000af4:	a5c00215 	stw	r23,8(r20)
 4000af8:	b83f8726 	beq	r23,zero,4000918 <__sfvwrite_r+0xb4>
 4000afc:	903fe11e 	bne	r18,zero,4000a84 <__sfvwrite_r+0x220>
 4000b00:	8f000017 	ldw	fp,0(r17)
 4000b04:	8c800117 	ldw	r18,4(r17)
 4000b08:	0011883a 	mov	r8,zero
 4000b0c:	8c400204 	addi	r17,r17,8
 4000b10:	003fdb06 	br	4000a80 <__sfvwrite_r+0x21c>
 4000b14:	180d883a 	mov	r6,r3
 4000b18:	e00b883a 	mov	r5,fp
 4000b1c:	da000115 	stw	r8,4(sp)
 4000b20:	d8c00015 	stw	r3,0(sp)
 4000b24:	40018e00 	call	40018e0 <memmove>
 4000b28:	d8c00017 	ldw	r3,0(sp)
 4000b2c:	80800017 	ldw	r2,0(r16)
 4000b30:	800b883a 	mov	r5,r16
 4000b34:	a809883a 	mov	r4,r21
 4000b38:	10c5883a 	add	r2,r2,r3
 4000b3c:	80800015 	stw	r2,0(r16)
 4000b40:	d8c00015 	stw	r3,0(sp)
 4000b44:	40027800 	call	4002780 <_fflush_r>
 4000b48:	d8c00017 	ldw	r3,0(sp)
 4000b4c:	da000117 	ldw	r8,4(sp)
 4000b50:	103fc21e 	bne	r2,zero,4000a5c <__sfvwrite_r+0x1f8>
 4000b54:	182f883a 	mov	r23,r3
 4000b58:	9de7c83a 	sub	r19,r19,r23
 4000b5c:	983fe11e 	bne	r19,zero,4000ae4 <__sfvwrite_r+0x280>
 4000b60:	800b883a 	mov	r5,r16
 4000b64:	a809883a 	mov	r4,r21
 4000b68:	40027800 	call	4002780 <_fflush_r>
 4000b6c:	103fbb1e 	bne	r2,zero,4000a5c <__sfvwrite_r+0x1f8>
 4000b70:	0011883a 	mov	r8,zero
 4000b74:	003fdb06 	br	4000ae4 <__sfvwrite_r+0x280>
 4000b78:	94c0012e 	bgeu	r18,r19,4000b80 <__sfvwrite_r+0x31c>
 4000b7c:	9027883a 	mov	r19,r18
 4000b80:	980d883a 	mov	r6,r19
 4000b84:	e00b883a 	mov	r5,fp
 4000b88:	40018e00 	call	40018e0 <memmove>
 4000b8c:	80800217 	ldw	r2,8(r16)
 4000b90:	80c00017 	ldw	r3,0(r16)
 4000b94:	14c5c83a 	sub	r2,r2,r19
 4000b98:	1cc7883a 	add	r3,r3,r19
 4000b9c:	80800215 	stw	r2,8(r16)
 4000ba0:	80c00015 	stw	r3,0(r16)
 4000ba4:	10004326 	beq	r2,zero,4000cb4 <__sfvwrite_r+0x450>
 4000ba8:	9805883a 	mov	r2,r19
 4000bac:	003f8606 	br	40009c8 <__sfvwrite_r+0x164>
 4000bb0:	b00d883a 	mov	r6,r22
 4000bb4:	e00b883a 	mov	r5,fp
 4000bb8:	da000115 	stw	r8,4(sp)
 4000bbc:	40018e00 	call	40018e0 <memmove>
 4000bc0:	80800217 	ldw	r2,8(r16)
 4000bc4:	80c00017 	ldw	r3,0(r16)
 4000bc8:	da000117 	ldw	r8,4(sp)
 4000bcc:	1585c83a 	sub	r2,r2,r22
 4000bd0:	1dad883a 	add	r22,r3,r22
 4000bd4:	80800215 	stw	r2,8(r16)
 4000bd8:	85800015 	stw	r22,0(r16)
 4000bdc:	003fbf06 	br	4000adc <__sfvwrite_r+0x278>
 4000be0:	81000017 	ldw	r4,0(r16)
 4000be4:	9027883a 	mov	r19,r18
 4000be8:	902f883a 	mov	r23,r18
 4000bec:	003f6c06 	br	40009a0 <__sfvwrite_r+0x13c>
 4000bf0:	900d883a 	mov	r6,r18
 4000bf4:	01400284 	movi	r5,10
 4000bf8:	e009883a 	mov	r4,fp
 4000bfc:	40016b40 	call	40016b4 <memchr>
 4000c00:	10003e26 	beq	r2,zero,4000cfc <__sfvwrite_r+0x498>
 4000c04:	10800044 	addi	r2,r2,1
 4000c08:	1727c83a 	sub	r19,r2,fp
 4000c0c:	02000044 	movi	r8,1
 4000c10:	003f9d06 	br	4000a88 <__sfvwrite_r+0x224>
 4000c14:	80800517 	ldw	r2,20(r16)
 4000c18:	81400417 	ldw	r5,16(r16)
 4000c1c:	81c00017 	ldw	r7,0(r16)
 4000c20:	10a7883a 	add	r19,r2,r2
 4000c24:	9885883a 	add	r2,r19,r2
 4000c28:	1026d7fa 	srli	r19,r2,31
 4000c2c:	396dc83a 	sub	r22,r7,r5
 4000c30:	b1000044 	addi	r4,r22,1
 4000c34:	9885883a 	add	r2,r19,r2
 4000c38:	1027d07a 	srai	r19,r2,1
 4000c3c:	2485883a 	add	r2,r4,r18
 4000c40:	980d883a 	mov	r6,r19
 4000c44:	9880022e 	bgeu	r19,r2,4000c50 <__sfvwrite_r+0x3ec>
 4000c48:	1027883a 	mov	r19,r2
 4000c4c:	100d883a 	mov	r6,r2
 4000c50:	18c1000c 	andi	r3,r3,1024
 4000c54:	18001c26 	beq	r3,zero,4000cc8 <__sfvwrite_r+0x464>
 4000c58:	300b883a 	mov	r5,r6
 4000c5c:	a809883a 	mov	r4,r21
 4000c60:	4000ea80 	call	4000ea8 <_malloc_r>
 4000c64:	102f883a 	mov	r23,r2
 4000c68:	10002926 	beq	r2,zero,4000d10 <__sfvwrite_r+0x4ac>
 4000c6c:	81400417 	ldw	r5,16(r16)
 4000c70:	b00d883a 	mov	r6,r22
 4000c74:	1009883a 	mov	r4,r2
 4000c78:	40017980 	call	4001798 <memcpy>
 4000c7c:	8080030b 	ldhu	r2,12(r16)
 4000c80:	00fedfc4 	movi	r3,-1153
 4000c84:	10c4703a 	and	r2,r2,r3
 4000c88:	10802014 	ori	r2,r2,128
 4000c8c:	8080030d 	sth	r2,12(r16)
 4000c90:	bd89883a 	add	r4,r23,r22
 4000c94:	9d8fc83a 	sub	r7,r19,r22
 4000c98:	85c00415 	stw	r23,16(r16)
 4000c9c:	84c00515 	stw	r19,20(r16)
 4000ca0:	81000015 	stw	r4,0(r16)
 4000ca4:	9027883a 	mov	r19,r18
 4000ca8:	81c00215 	stw	r7,8(r16)
 4000cac:	902f883a 	mov	r23,r18
 4000cb0:	003f3b06 	br	40009a0 <__sfvwrite_r+0x13c>
 4000cb4:	800b883a 	mov	r5,r16
 4000cb8:	a809883a 	mov	r4,r21
 4000cbc:	40027800 	call	4002780 <_fflush_r>
 4000cc0:	103fb926 	beq	r2,zero,4000ba8 <__sfvwrite_r+0x344>
 4000cc4:	003f6506 	br	4000a5c <__sfvwrite_r+0x1f8>
 4000cc8:	a809883a 	mov	r4,r21
 4000ccc:	4001b640 	call	4001b64 <_realloc_r>
 4000cd0:	102f883a 	mov	r23,r2
 4000cd4:	103fee1e 	bne	r2,zero,4000c90 <__sfvwrite_r+0x42c>
 4000cd8:	81400417 	ldw	r5,16(r16)
 4000cdc:	a809883a 	mov	r4,r21
 4000ce0:	40029300 	call	4002930 <_free_r>
 4000ce4:	8080030b 	ldhu	r2,12(r16)
 4000ce8:	00ffdfc4 	movi	r3,-129
 4000cec:	1884703a 	and	r2,r3,r2
 4000cf0:	00c00304 	movi	r3,12
 4000cf4:	a8c00015 	stw	r3,0(r21)
 4000cf8:	003f5906 	br	4000a60 <__sfvwrite_r+0x1fc>
 4000cfc:	94c00044 	addi	r19,r18,1
 4000d00:	02000044 	movi	r8,1
 4000d04:	003f6006 	br	4000a88 <__sfvwrite_r+0x224>
 4000d08:	00bfffc4 	movi	r2,-1
 4000d0c:	003f0306 	br	400091c <__sfvwrite_r+0xb8>
 4000d10:	00800304 	movi	r2,12
 4000d14:	a8800015 	stw	r2,0(r21)
 4000d18:	8080030b 	ldhu	r2,12(r16)
 4000d1c:	003f5006 	br	4000a60 <__sfvwrite_r+0x1fc>

04000d20 <_fwalk>:
 4000d20:	defff704 	addi	sp,sp,-36
 4000d24:	dd000415 	stw	r20,16(sp)
 4000d28:	dfc00815 	stw	ra,32(sp)
 4000d2c:	ddc00715 	stw	r23,28(sp)
 4000d30:	dd800615 	stw	r22,24(sp)
 4000d34:	dd400515 	stw	r21,20(sp)
 4000d38:	dcc00315 	stw	r19,12(sp)
 4000d3c:	dc800215 	stw	r18,8(sp)
 4000d40:	dc400115 	stw	r17,4(sp)
 4000d44:	dc000015 	stw	r16,0(sp)
 4000d48:	2500b804 	addi	r20,r4,736
 4000d4c:	a0002326 	beq	r20,zero,4000ddc <_fwalk+0xbc>
 4000d50:	282b883a 	mov	r21,r5
 4000d54:	002f883a 	mov	r23,zero
 4000d58:	05800044 	movi	r22,1
 4000d5c:	04ffffc4 	movi	r19,-1
 4000d60:	a4400117 	ldw	r17,4(r20)
 4000d64:	a4800217 	ldw	r18,8(r20)
 4000d68:	8c7fffc4 	addi	r17,r17,-1
 4000d6c:	88000d16 	blt	r17,zero,4000da4 <_fwalk+0x84>
 4000d70:	94000304 	addi	r16,r18,12
 4000d74:	94800384 	addi	r18,r18,14
 4000d78:	8080000b 	ldhu	r2,0(r16)
 4000d7c:	8c7fffc4 	addi	r17,r17,-1
 4000d80:	813ffd04 	addi	r4,r16,-12
 4000d84:	b080042e 	bgeu	r22,r2,4000d98 <_fwalk+0x78>
 4000d88:	9080000f 	ldh	r2,0(r18)
 4000d8c:	14c00226 	beq	r2,r19,4000d98 <_fwalk+0x78>
 4000d90:	a83ee83a 	callr	r21
 4000d94:	b8aeb03a 	or	r23,r23,r2
 4000d98:	84001a04 	addi	r16,r16,104
 4000d9c:	94801a04 	addi	r18,r18,104
 4000da0:	8cfff51e 	bne	r17,r19,4000d78 <_fwalk+0x58>
 4000da4:	a5000017 	ldw	r20,0(r20)
 4000da8:	a03fed1e 	bne	r20,zero,4000d60 <_fwalk+0x40>
 4000dac:	b805883a 	mov	r2,r23
 4000db0:	dfc00817 	ldw	ra,32(sp)
 4000db4:	ddc00717 	ldw	r23,28(sp)
 4000db8:	dd800617 	ldw	r22,24(sp)
 4000dbc:	dd400517 	ldw	r21,20(sp)
 4000dc0:	dd000417 	ldw	r20,16(sp)
 4000dc4:	dcc00317 	ldw	r19,12(sp)
 4000dc8:	dc800217 	ldw	r18,8(sp)
 4000dcc:	dc400117 	ldw	r17,4(sp)
 4000dd0:	dc000017 	ldw	r16,0(sp)
 4000dd4:	dec00904 	addi	sp,sp,36
 4000dd8:	f800283a 	ret
 4000ddc:	002f883a 	mov	r23,zero
 4000de0:	003ff206 	br	4000dac <_fwalk+0x8c>

04000de4 <_fwalk_reent>:
 4000de4:	defff704 	addi	sp,sp,-36
 4000de8:	dd000415 	stw	r20,16(sp)
 4000dec:	dfc00815 	stw	ra,32(sp)
 4000df0:	ddc00715 	stw	r23,28(sp)
 4000df4:	dd800615 	stw	r22,24(sp)
 4000df8:	dd400515 	stw	r21,20(sp)
 4000dfc:	dcc00315 	stw	r19,12(sp)
 4000e00:	dc800215 	stw	r18,8(sp)
 4000e04:	dc400115 	stw	r17,4(sp)
 4000e08:	dc000015 	stw	r16,0(sp)
 4000e0c:	2500b804 	addi	r20,r4,736
 4000e10:	a0002326 	beq	r20,zero,4000ea0 <_fwalk_reent+0xbc>
 4000e14:	282b883a 	mov	r21,r5
 4000e18:	2027883a 	mov	r19,r4
 4000e1c:	002f883a 	mov	r23,zero
 4000e20:	05800044 	movi	r22,1
 4000e24:	04bfffc4 	movi	r18,-1
 4000e28:	a4400117 	ldw	r17,4(r20)
 4000e2c:	a4000217 	ldw	r16,8(r20)
 4000e30:	8c7fffc4 	addi	r17,r17,-1
 4000e34:	88000c16 	blt	r17,zero,4000e68 <_fwalk_reent+0x84>
 4000e38:	84000304 	addi	r16,r16,12
 4000e3c:	8080000b 	ldhu	r2,0(r16)
 4000e40:	8c7fffc4 	addi	r17,r17,-1
 4000e44:	817ffd04 	addi	r5,r16,-12
 4000e48:	b080052e 	bgeu	r22,r2,4000e60 <_fwalk_reent+0x7c>
 4000e4c:	8080008f 	ldh	r2,2(r16)
 4000e50:	9809883a 	mov	r4,r19
 4000e54:	14800226 	beq	r2,r18,4000e60 <_fwalk_reent+0x7c>
 4000e58:	a83ee83a 	callr	r21
 4000e5c:	b8aeb03a 	or	r23,r23,r2
 4000e60:	84001a04 	addi	r16,r16,104
 4000e64:	8cbff51e 	bne	r17,r18,4000e3c <_fwalk_reent+0x58>
 4000e68:	a5000017 	ldw	r20,0(r20)
 4000e6c:	a03fee1e 	bne	r20,zero,4000e28 <_fwalk_reent+0x44>
 4000e70:	b805883a 	mov	r2,r23
 4000e74:	dfc00817 	ldw	ra,32(sp)
 4000e78:	ddc00717 	ldw	r23,28(sp)
 4000e7c:	dd800617 	ldw	r22,24(sp)
 4000e80:	dd400517 	ldw	r21,20(sp)
 4000e84:	dd000417 	ldw	r20,16(sp)
 4000e88:	dcc00317 	ldw	r19,12(sp)
 4000e8c:	dc800217 	ldw	r18,8(sp)
 4000e90:	dc400117 	ldw	r17,4(sp)
 4000e94:	dc000017 	ldw	r16,0(sp)
 4000e98:	dec00904 	addi	sp,sp,36
 4000e9c:	f800283a 	ret
 4000ea0:	002f883a 	mov	r23,zero
 4000ea4:	003ff206 	br	4000e70 <_fwalk_reent+0x8c>

04000ea8 <_malloc_r>:
 4000ea8:	defff504 	addi	sp,sp,-44
 4000eac:	dc800315 	stw	r18,12(sp)
 4000eb0:	dfc00a15 	stw	ra,40(sp)
 4000eb4:	df000915 	stw	fp,36(sp)
 4000eb8:	ddc00815 	stw	r23,32(sp)
 4000ebc:	dd800715 	stw	r22,28(sp)
 4000ec0:	dd400615 	stw	r21,24(sp)
 4000ec4:	dd000515 	stw	r20,20(sp)
 4000ec8:	dcc00415 	stw	r19,16(sp)
 4000ecc:	dc400215 	stw	r17,8(sp)
 4000ed0:	dc000115 	stw	r16,4(sp)
 4000ed4:	288002c4 	addi	r2,r5,11
 4000ed8:	00c00584 	movi	r3,22
 4000edc:	2025883a 	mov	r18,r4
 4000ee0:	18807f2e 	bgeu	r3,r2,40010e0 <_malloc_r+0x238>
 4000ee4:	047ffe04 	movi	r17,-8
 4000ee8:	1462703a 	and	r17,r2,r17
 4000eec:	8800a316 	blt	r17,zero,400117c <_malloc_r+0x2d4>
 4000ef0:	8940a236 	bltu	r17,r5,400117c <_malloc_r+0x2d4>
 4000ef4:	400369c0 	call	400369c <__malloc_lock>
 4000ef8:	00807dc4 	movi	r2,503
 4000efc:	1441e92e 	bgeu	r2,r17,40016a4 <_malloc_r+0x7fc>
 4000f00:	8804d27a 	srli	r2,r17,9
 4000f04:	1000a126 	beq	r2,zero,400118c <_malloc_r+0x2e4>
 4000f08:	00c00104 	movi	r3,4
 4000f0c:	18811e36 	bltu	r3,r2,4001388 <_malloc_r+0x4e0>
 4000f10:	8804d1ba 	srli	r2,r17,6
 4000f14:	12000e44 	addi	r8,r2,57
 4000f18:	11c00e04 	addi	r7,r2,56
 4000f1c:	4209883a 	add	r4,r8,r8
 4000f20:	04c10034 	movhi	r19,1024
 4000f24:	2109883a 	add	r4,r4,r4
 4000f28:	9cd77004 	addi	r19,r19,24000
 4000f2c:	2109883a 	add	r4,r4,r4
 4000f30:	9909883a 	add	r4,r19,r4
 4000f34:	24000117 	ldw	r16,4(r4)
 4000f38:	213ffe04 	addi	r4,r4,-8
 4000f3c:	24009726 	beq	r4,r16,400119c <_malloc_r+0x2f4>
 4000f40:	80800117 	ldw	r2,4(r16)
 4000f44:	01bfff04 	movi	r6,-4
 4000f48:	014003c4 	movi	r5,15
 4000f4c:	1184703a 	and	r2,r2,r6
 4000f50:	1447c83a 	sub	r3,r2,r17
 4000f54:	28c00716 	blt	r5,r3,4000f74 <_malloc_r+0xcc>
 4000f58:	1800920e 	bge	r3,zero,40011a4 <_malloc_r+0x2fc>
 4000f5c:	84000317 	ldw	r16,12(r16)
 4000f60:	24008e26 	beq	r4,r16,400119c <_malloc_r+0x2f4>
 4000f64:	80800117 	ldw	r2,4(r16)
 4000f68:	1184703a 	and	r2,r2,r6
 4000f6c:	1447c83a 	sub	r3,r2,r17
 4000f70:	28fff90e 	bge	r5,r3,4000f58 <_malloc_r+0xb0>
 4000f74:	3809883a 	mov	r4,r7
 4000f78:	01810034 	movhi	r6,1024
 4000f7c:	9c000417 	ldw	r16,16(r19)
 4000f80:	31977004 	addi	r6,r6,24000
 4000f84:	32000204 	addi	r8,r6,8
 4000f88:	82013426 	beq	r16,r8,400145c <_malloc_r+0x5b4>
 4000f8c:	80c00117 	ldw	r3,4(r16)
 4000f90:	00bfff04 	movi	r2,-4
 4000f94:	188e703a 	and	r7,r3,r2
 4000f98:	3c45c83a 	sub	r2,r7,r17
 4000f9c:	00c003c4 	movi	r3,15
 4000fa0:	18811f16 	blt	r3,r2,4001420 <_malloc_r+0x578>
 4000fa4:	32000515 	stw	r8,20(r6)
 4000fa8:	32000415 	stw	r8,16(r6)
 4000fac:	10007f0e 	bge	r2,zero,40011ac <_malloc_r+0x304>
 4000fb0:	00807fc4 	movi	r2,511
 4000fb4:	11c0fd36 	bltu	r2,r7,40013ac <_malloc_r+0x504>
 4000fb8:	3806d0fa 	srli	r3,r7,3
 4000fbc:	01c00044 	movi	r7,1
 4000fc0:	30800117 	ldw	r2,4(r6)
 4000fc4:	19400044 	addi	r5,r3,1
 4000fc8:	294b883a 	add	r5,r5,r5
 4000fcc:	1807d0ba 	srai	r3,r3,2
 4000fd0:	294b883a 	add	r5,r5,r5
 4000fd4:	294b883a 	add	r5,r5,r5
 4000fd8:	298b883a 	add	r5,r5,r6
 4000fdc:	38c6983a 	sll	r3,r7,r3
 4000fe0:	29c00017 	ldw	r7,0(r5)
 4000fe4:	2a7ffe04 	addi	r9,r5,-8
 4000fe8:	1886b03a 	or	r3,r3,r2
 4000fec:	82400315 	stw	r9,12(r16)
 4000ff0:	81c00215 	stw	r7,8(r16)
 4000ff4:	30c00115 	stw	r3,4(r6)
 4000ff8:	2c000015 	stw	r16,0(r5)
 4000ffc:	3c000315 	stw	r16,12(r7)
 4001000:	2005d0ba 	srai	r2,r4,2
 4001004:	01400044 	movi	r5,1
 4001008:	288a983a 	sll	r5,r5,r2
 400100c:	19406f36 	bltu	r3,r5,40011cc <_malloc_r+0x324>
 4001010:	28c4703a 	and	r2,r5,r3
 4001014:	10000a1e 	bne	r2,zero,4001040 <_malloc_r+0x198>
 4001018:	00bfff04 	movi	r2,-4
 400101c:	294b883a 	add	r5,r5,r5
 4001020:	2088703a 	and	r4,r4,r2
 4001024:	28c4703a 	and	r2,r5,r3
 4001028:	21000104 	addi	r4,r4,4
 400102c:	1000041e 	bne	r2,zero,4001040 <_malloc_r+0x198>
 4001030:	294b883a 	add	r5,r5,r5
 4001034:	28c4703a 	and	r2,r5,r3
 4001038:	21000104 	addi	r4,r4,4
 400103c:	103ffc26 	beq	r2,zero,4001030 <_malloc_r+0x188>
 4001040:	02bfff04 	movi	r10,-4
 4001044:	024003c4 	movi	r9,15
 4001048:	21800044 	addi	r6,r4,1
 400104c:	318d883a 	add	r6,r6,r6
 4001050:	318d883a 	add	r6,r6,r6
 4001054:	318d883a 	add	r6,r6,r6
 4001058:	998d883a 	add	r6,r19,r6
 400105c:	333ffe04 	addi	r12,r6,-8
 4001060:	2017883a 	mov	r11,r4
 4001064:	31800104 	addi	r6,r6,4
 4001068:	34000017 	ldw	r16,0(r6)
 400106c:	31fffd04 	addi	r7,r6,-12
 4001070:	81c0041e 	bne	r16,r7,4001084 <_malloc_r+0x1dc>
 4001074:	0000fb06 	br	4001464 <_malloc_r+0x5bc>
 4001078:	1801030e 	bge	r3,zero,4001488 <_malloc_r+0x5e0>
 400107c:	84000317 	ldw	r16,12(r16)
 4001080:	81c0f826 	beq	r16,r7,4001464 <_malloc_r+0x5bc>
 4001084:	80800117 	ldw	r2,4(r16)
 4001088:	1284703a 	and	r2,r2,r10
 400108c:	1447c83a 	sub	r3,r2,r17
 4001090:	48fff90e 	bge	r9,r3,4001078 <_malloc_r+0x1d0>
 4001094:	80800317 	ldw	r2,12(r16)
 4001098:	81000217 	ldw	r4,8(r16)
 400109c:	89400054 	ori	r5,r17,1
 40010a0:	81400115 	stw	r5,4(r16)
 40010a4:	20800315 	stw	r2,12(r4)
 40010a8:	11000215 	stw	r4,8(r2)
 40010ac:	8463883a 	add	r17,r16,r17
 40010b0:	9c400515 	stw	r17,20(r19)
 40010b4:	9c400415 	stw	r17,16(r19)
 40010b8:	18800054 	ori	r2,r3,1
 40010bc:	88800115 	stw	r2,4(r17)
 40010c0:	8a000315 	stw	r8,12(r17)
 40010c4:	8a000215 	stw	r8,8(r17)
 40010c8:	88e3883a 	add	r17,r17,r3
 40010cc:	88c00015 	stw	r3,0(r17)
 40010d0:	9009883a 	mov	r4,r18
 40010d4:	40036c00 	call	40036c0 <__malloc_unlock>
 40010d8:	80800204 	addi	r2,r16,8
 40010dc:	00001b06 	br	400114c <_malloc_r+0x2a4>
 40010e0:	04400404 	movi	r17,16
 40010e4:	89402536 	bltu	r17,r5,400117c <_malloc_r+0x2d4>
 40010e8:	400369c0 	call	400369c <__malloc_lock>
 40010ec:	00800184 	movi	r2,6
 40010f0:	01000084 	movi	r4,2
 40010f4:	04c10034 	movhi	r19,1024
 40010f8:	1085883a 	add	r2,r2,r2
 40010fc:	9cd77004 	addi	r19,r19,24000
 4001100:	1085883a 	add	r2,r2,r2
 4001104:	9885883a 	add	r2,r19,r2
 4001108:	14000117 	ldw	r16,4(r2)
 400110c:	10fffe04 	addi	r3,r2,-8
 4001110:	80c0d926 	beq	r16,r3,4001478 <_malloc_r+0x5d0>
 4001114:	80c00117 	ldw	r3,4(r16)
 4001118:	81000317 	ldw	r4,12(r16)
 400111c:	00bfff04 	movi	r2,-4
 4001120:	1884703a 	and	r2,r3,r2
 4001124:	81400217 	ldw	r5,8(r16)
 4001128:	8085883a 	add	r2,r16,r2
 400112c:	10c00117 	ldw	r3,4(r2)
 4001130:	29000315 	stw	r4,12(r5)
 4001134:	21400215 	stw	r5,8(r4)
 4001138:	18c00054 	ori	r3,r3,1
 400113c:	10c00115 	stw	r3,4(r2)
 4001140:	9009883a 	mov	r4,r18
 4001144:	40036c00 	call	40036c0 <__malloc_unlock>
 4001148:	80800204 	addi	r2,r16,8
 400114c:	dfc00a17 	ldw	ra,40(sp)
 4001150:	df000917 	ldw	fp,36(sp)
 4001154:	ddc00817 	ldw	r23,32(sp)
 4001158:	dd800717 	ldw	r22,28(sp)
 400115c:	dd400617 	ldw	r21,24(sp)
 4001160:	dd000517 	ldw	r20,20(sp)
 4001164:	dcc00417 	ldw	r19,16(sp)
 4001168:	dc800317 	ldw	r18,12(sp)
 400116c:	dc400217 	ldw	r17,8(sp)
 4001170:	dc000117 	ldw	r16,4(sp)
 4001174:	dec00b04 	addi	sp,sp,44
 4001178:	f800283a 	ret
 400117c:	00800304 	movi	r2,12
 4001180:	90800015 	stw	r2,0(r18)
 4001184:	0005883a 	mov	r2,zero
 4001188:	003ff006 	br	400114c <_malloc_r+0x2a4>
 400118c:	01002004 	movi	r4,128
 4001190:	02001004 	movi	r8,64
 4001194:	01c00fc4 	movi	r7,63
 4001198:	003f6106 	br	4000f20 <_malloc_r+0x78>
 400119c:	4009883a 	mov	r4,r8
 40011a0:	003f7506 	br	4000f78 <_malloc_r+0xd0>
 40011a4:	81000317 	ldw	r4,12(r16)
 40011a8:	003fde06 	br	4001124 <_malloc_r+0x27c>
 40011ac:	81c5883a 	add	r2,r16,r7
 40011b0:	11400117 	ldw	r5,4(r2)
 40011b4:	9009883a 	mov	r4,r18
 40011b8:	29400054 	ori	r5,r5,1
 40011bc:	11400115 	stw	r5,4(r2)
 40011c0:	40036c00 	call	40036c0 <__malloc_unlock>
 40011c4:	80800204 	addi	r2,r16,8
 40011c8:	003fe006 	br	400114c <_malloc_r+0x2a4>
 40011cc:	9c000217 	ldw	r16,8(r19)
 40011d0:	00bfff04 	movi	r2,-4
 40011d4:	85800117 	ldw	r22,4(r16)
 40011d8:	b0ac703a 	and	r22,r22,r2
 40011dc:	b4400336 	bltu	r22,r17,40011ec <_malloc_r+0x344>
 40011e0:	b445c83a 	sub	r2,r22,r17
 40011e4:	00c003c4 	movi	r3,15
 40011e8:	18805d16 	blt	r3,r2,4001360 <_malloc_r+0x4b8>
 40011ec:	05c10034 	movhi	r23,1024
 40011f0:	00810074 	movhi	r2,1025
 40011f4:	10a39f04 	addi	r2,r2,-29060
 40011f8:	bddcf604 	addi	r23,r23,29656
 40011fc:	15400017 	ldw	r21,0(r2)
 4001200:	b8c00017 	ldw	r3,0(r23)
 4001204:	00bfffc4 	movi	r2,-1
 4001208:	858d883a 	add	r6,r16,r22
 400120c:	8d6b883a 	add	r21,r17,r21
 4001210:	1880ea26 	beq	r3,r2,40015bc <_malloc_r+0x714>
 4001214:	ad4403c4 	addi	r21,r21,4111
 4001218:	00bc0004 	movi	r2,-4096
 400121c:	a8aa703a 	and	r21,r21,r2
 4001220:	a80b883a 	mov	r5,r21
 4001224:	9009883a 	mov	r4,r18
 4001228:	d9800015 	stw	r6,0(sp)
 400122c:	40020c80 	call	40020c8 <_sbrk_r>
 4001230:	1029883a 	mov	r20,r2
 4001234:	00bfffc4 	movi	r2,-1
 4001238:	d9800017 	ldw	r6,0(sp)
 400123c:	a080e826 	beq	r20,r2,40015e0 <_malloc_r+0x738>
 4001240:	a180a636 	bltu	r20,r6,40014dc <_malloc_r+0x634>
 4001244:	07010074 	movhi	fp,1025
 4001248:	e723a804 	addi	fp,fp,-29024
 400124c:	e0800017 	ldw	r2,0(fp)
 4001250:	a887883a 	add	r3,r21,r2
 4001254:	e0c00015 	stw	r3,0(fp)
 4001258:	3500e626 	beq	r6,r20,40015f4 <_malloc_r+0x74c>
 400125c:	b9000017 	ldw	r4,0(r23)
 4001260:	00bfffc4 	movi	r2,-1
 4001264:	2080ee26 	beq	r4,r2,4001620 <_malloc_r+0x778>
 4001268:	a185c83a 	sub	r2,r20,r6
 400126c:	10c5883a 	add	r2,r2,r3
 4001270:	e0800015 	stw	r2,0(fp)
 4001274:	a0c001cc 	andi	r3,r20,7
 4001278:	1800bc26 	beq	r3,zero,400156c <_malloc_r+0x6c4>
 400127c:	a0e9c83a 	sub	r20,r20,r3
 4001280:	00840204 	movi	r2,4104
 4001284:	a5000204 	addi	r20,r20,8
 4001288:	10c7c83a 	sub	r3,r2,r3
 400128c:	a545883a 	add	r2,r20,r21
 4001290:	1083ffcc 	andi	r2,r2,4095
 4001294:	18abc83a 	sub	r21,r3,r2
 4001298:	a80b883a 	mov	r5,r21
 400129c:	9009883a 	mov	r4,r18
 40012a0:	40020c80 	call	40020c8 <_sbrk_r>
 40012a4:	00ffffc4 	movi	r3,-1
 40012a8:	10c0e126 	beq	r2,r3,4001630 <_malloc_r+0x788>
 40012ac:	1505c83a 	sub	r2,r2,r20
 40012b0:	1545883a 	add	r2,r2,r21
 40012b4:	10800054 	ori	r2,r2,1
 40012b8:	e0c00017 	ldw	r3,0(fp)
 40012bc:	9d000215 	stw	r20,8(r19)
 40012c0:	a0800115 	stw	r2,4(r20)
 40012c4:	a8c7883a 	add	r3,r21,r3
 40012c8:	e0c00015 	stw	r3,0(fp)
 40012cc:	84c00e26 	beq	r16,r19,4001308 <_malloc_r+0x460>
 40012d0:	018003c4 	movi	r6,15
 40012d4:	3580a72e 	bgeu	r6,r22,4001574 <_malloc_r+0x6cc>
 40012d8:	81400117 	ldw	r5,4(r16)
 40012dc:	013ffe04 	movi	r4,-8
 40012e0:	b0bffd04 	addi	r2,r22,-12
 40012e4:	1104703a 	and	r2,r2,r4
 40012e8:	2900004c 	andi	r4,r5,1
 40012ec:	2088b03a 	or	r4,r4,r2
 40012f0:	81000115 	stw	r4,4(r16)
 40012f4:	01400144 	movi	r5,5
 40012f8:	8089883a 	add	r4,r16,r2
 40012fc:	21400115 	stw	r5,4(r4)
 4001300:	21400215 	stw	r5,8(r4)
 4001304:	3080cd36 	bltu	r6,r2,400163c <_malloc_r+0x794>
 4001308:	00810074 	movhi	r2,1025
 400130c:	10a39e04 	addi	r2,r2,-29064
 4001310:	11000017 	ldw	r4,0(r2)
 4001314:	20c0012e 	bgeu	r4,r3,400131c <_malloc_r+0x474>
 4001318:	10c00015 	stw	r3,0(r2)
 400131c:	00810074 	movhi	r2,1025
 4001320:	10a39d04 	addi	r2,r2,-29068
 4001324:	11000017 	ldw	r4,0(r2)
 4001328:	9c000217 	ldw	r16,8(r19)
 400132c:	20c0012e 	bgeu	r4,r3,4001334 <_malloc_r+0x48c>
 4001330:	10c00015 	stw	r3,0(r2)
 4001334:	80c00117 	ldw	r3,4(r16)
 4001338:	00bfff04 	movi	r2,-4
 400133c:	1886703a 	and	r3,r3,r2
 4001340:	1c45c83a 	sub	r2,r3,r17
 4001344:	1c400236 	bltu	r3,r17,4001350 <_malloc_r+0x4a8>
 4001348:	00c003c4 	movi	r3,15
 400134c:	18800416 	blt	r3,r2,4001360 <_malloc_r+0x4b8>
 4001350:	9009883a 	mov	r4,r18
 4001354:	40036c00 	call	40036c0 <__malloc_unlock>
 4001358:	0005883a 	mov	r2,zero
 400135c:	003f7b06 	br	400114c <_malloc_r+0x2a4>
 4001360:	88c00054 	ori	r3,r17,1
 4001364:	80c00115 	stw	r3,4(r16)
 4001368:	8463883a 	add	r17,r16,r17
 400136c:	10800054 	ori	r2,r2,1
 4001370:	9c400215 	stw	r17,8(r19)
 4001374:	88800115 	stw	r2,4(r17)
 4001378:	9009883a 	mov	r4,r18
 400137c:	40036c00 	call	40036c0 <__malloc_unlock>
 4001380:	80800204 	addi	r2,r16,8
 4001384:	003f7106 	br	400114c <_malloc_r+0x2a4>
 4001388:	00c00504 	movi	r3,20
 400138c:	18804a2e 	bgeu	r3,r2,40014b8 <_malloc_r+0x610>
 4001390:	00c01504 	movi	r3,84
 4001394:	18806e36 	bltu	r3,r2,4001550 <_malloc_r+0x6a8>
 4001398:	8804d33a 	srli	r2,r17,12
 400139c:	12001bc4 	addi	r8,r2,111
 40013a0:	11c01b84 	addi	r7,r2,110
 40013a4:	4209883a 	add	r4,r8,r8
 40013a8:	003edd06 	br	4000f20 <_malloc_r+0x78>
 40013ac:	3804d27a 	srli	r2,r7,9
 40013b0:	00c00104 	movi	r3,4
 40013b4:	1880442e 	bgeu	r3,r2,40014c8 <_malloc_r+0x620>
 40013b8:	00c00504 	movi	r3,20
 40013bc:	18808136 	bltu	r3,r2,40015c4 <_malloc_r+0x71c>
 40013c0:	11401704 	addi	r5,r2,92
 40013c4:	10c016c4 	addi	r3,r2,91
 40013c8:	294b883a 	add	r5,r5,r5
 40013cc:	294b883a 	add	r5,r5,r5
 40013d0:	294b883a 	add	r5,r5,r5
 40013d4:	994b883a 	add	r5,r19,r5
 40013d8:	28800017 	ldw	r2,0(r5)
 40013dc:	01810034 	movhi	r6,1024
 40013e0:	297ffe04 	addi	r5,r5,-8
 40013e4:	31977004 	addi	r6,r6,24000
 40013e8:	28806526 	beq	r5,r2,4001580 <_malloc_r+0x6d8>
 40013ec:	01bfff04 	movi	r6,-4
 40013f0:	10c00117 	ldw	r3,4(r2)
 40013f4:	1986703a 	and	r3,r3,r6
 40013f8:	38c0022e 	bgeu	r7,r3,4001404 <_malloc_r+0x55c>
 40013fc:	10800217 	ldw	r2,8(r2)
 4001400:	28bffb1e 	bne	r5,r2,40013f0 <_malloc_r+0x548>
 4001404:	11400317 	ldw	r5,12(r2)
 4001408:	98c00117 	ldw	r3,4(r19)
 400140c:	81400315 	stw	r5,12(r16)
 4001410:	80800215 	stw	r2,8(r16)
 4001414:	2c000215 	stw	r16,8(r5)
 4001418:	14000315 	stw	r16,12(r2)
 400141c:	003ef806 	br	4001000 <_malloc_r+0x158>
 4001420:	88c00054 	ori	r3,r17,1
 4001424:	80c00115 	stw	r3,4(r16)
 4001428:	8463883a 	add	r17,r16,r17
 400142c:	34400515 	stw	r17,20(r6)
 4001430:	34400415 	stw	r17,16(r6)
 4001434:	10c00054 	ori	r3,r2,1
 4001438:	8a000315 	stw	r8,12(r17)
 400143c:	8a000215 	stw	r8,8(r17)
 4001440:	88c00115 	stw	r3,4(r17)
 4001444:	88a3883a 	add	r17,r17,r2
 4001448:	88800015 	stw	r2,0(r17)
 400144c:	9009883a 	mov	r4,r18
 4001450:	40036c00 	call	40036c0 <__malloc_unlock>
 4001454:	80800204 	addi	r2,r16,8
 4001458:	003f3c06 	br	400114c <_malloc_r+0x2a4>
 400145c:	30c00117 	ldw	r3,4(r6)
 4001460:	003ee706 	br	4001000 <_malloc_r+0x158>
 4001464:	5ac00044 	addi	r11,r11,1
 4001468:	588000cc 	andi	r2,r11,3
 400146c:	31800204 	addi	r6,r6,8
 4001470:	103efd1e 	bne	r2,zero,4001068 <_malloc_r+0x1c0>
 4001474:	00002406 	br	4001508 <_malloc_r+0x660>
 4001478:	14000317 	ldw	r16,12(r2)
 400147c:	143f251e 	bne	r2,r16,4001114 <_malloc_r+0x26c>
 4001480:	21000084 	addi	r4,r4,2
 4001484:	003ebc06 	br	4000f78 <_malloc_r+0xd0>
 4001488:	8085883a 	add	r2,r16,r2
 400148c:	10c00117 	ldw	r3,4(r2)
 4001490:	81000317 	ldw	r4,12(r16)
 4001494:	81400217 	ldw	r5,8(r16)
 4001498:	18c00054 	ori	r3,r3,1
 400149c:	10c00115 	stw	r3,4(r2)
 40014a0:	29000315 	stw	r4,12(r5)
 40014a4:	21400215 	stw	r5,8(r4)
 40014a8:	9009883a 	mov	r4,r18
 40014ac:	40036c00 	call	40036c0 <__malloc_unlock>
 40014b0:	80800204 	addi	r2,r16,8
 40014b4:	003f2506 	br	400114c <_malloc_r+0x2a4>
 40014b8:	12001704 	addi	r8,r2,92
 40014bc:	11c016c4 	addi	r7,r2,91
 40014c0:	4209883a 	add	r4,r8,r8
 40014c4:	003e9606 	br	4000f20 <_malloc_r+0x78>
 40014c8:	3804d1ba 	srli	r2,r7,6
 40014cc:	11400e44 	addi	r5,r2,57
 40014d0:	10c00e04 	addi	r3,r2,56
 40014d4:	294b883a 	add	r5,r5,r5
 40014d8:	003fbc06 	br	40013cc <_malloc_r+0x524>
 40014dc:	84ff5926 	beq	r16,r19,4001244 <_malloc_r+0x39c>
 40014e0:	00810034 	movhi	r2,1024
 40014e4:	10977004 	addi	r2,r2,24000
 40014e8:	14000217 	ldw	r16,8(r2)
 40014ec:	00bfff04 	movi	r2,-4
 40014f0:	80c00117 	ldw	r3,4(r16)
 40014f4:	1886703a 	and	r3,r3,r2
 40014f8:	003f9106 	br	4001340 <_malloc_r+0x498>
 40014fc:	60800217 	ldw	r2,8(r12)
 4001500:	213fffc4 	addi	r4,r4,-1
 4001504:	1300651e 	bne	r2,r12,400169c <_malloc_r+0x7f4>
 4001508:	208000cc 	andi	r2,r4,3
 400150c:	633ffe04 	addi	r12,r12,-8
 4001510:	103ffa1e 	bne	r2,zero,40014fc <_malloc_r+0x654>
 4001514:	98800117 	ldw	r2,4(r19)
 4001518:	0146303a 	nor	r3,zero,r5
 400151c:	1884703a 	and	r2,r3,r2
 4001520:	98800115 	stw	r2,4(r19)
 4001524:	294b883a 	add	r5,r5,r5
 4001528:	117f2836 	bltu	r2,r5,40011cc <_malloc_r+0x324>
 400152c:	283f2726 	beq	r5,zero,40011cc <_malloc_r+0x324>
 4001530:	2886703a 	and	r3,r5,r2
 4001534:	5809883a 	mov	r4,r11
 4001538:	183ec31e 	bne	r3,zero,4001048 <_malloc_r+0x1a0>
 400153c:	294b883a 	add	r5,r5,r5
 4001540:	2886703a 	and	r3,r5,r2
 4001544:	21000104 	addi	r4,r4,4
 4001548:	183ffc26 	beq	r3,zero,400153c <_malloc_r+0x694>
 400154c:	003ebe06 	br	4001048 <_malloc_r+0x1a0>
 4001550:	00c05504 	movi	r3,340
 4001554:	18801236 	bltu	r3,r2,40015a0 <_malloc_r+0x6f8>
 4001558:	8804d3fa 	srli	r2,r17,15
 400155c:	12001e04 	addi	r8,r2,120
 4001560:	11c01dc4 	addi	r7,r2,119
 4001564:	4209883a 	add	r4,r8,r8
 4001568:	003e6d06 	br	4000f20 <_malloc_r+0x78>
 400156c:	00c40004 	movi	r3,4096
 4001570:	003f4606 	br	400128c <_malloc_r+0x3e4>
 4001574:	00800044 	movi	r2,1
 4001578:	a0800115 	stw	r2,4(r20)
 400157c:	003f7406 	br	4001350 <_malloc_r+0x4a8>
 4001580:	1805d0ba 	srai	r2,r3,2
 4001584:	01c00044 	movi	r7,1
 4001588:	30c00117 	ldw	r3,4(r6)
 400158c:	388e983a 	sll	r7,r7,r2
 4001590:	2805883a 	mov	r2,r5
 4001594:	38c6b03a 	or	r3,r7,r3
 4001598:	30c00115 	stw	r3,4(r6)
 400159c:	003f9b06 	br	400140c <_malloc_r+0x564>
 40015a0:	00c15504 	movi	r3,1364
 40015a4:	18801a36 	bltu	r3,r2,4001610 <_malloc_r+0x768>
 40015a8:	8804d4ba 	srli	r2,r17,18
 40015ac:	12001f44 	addi	r8,r2,125
 40015b0:	11c01f04 	addi	r7,r2,124
 40015b4:	4209883a 	add	r4,r8,r8
 40015b8:	003e5906 	br	4000f20 <_malloc_r+0x78>
 40015bc:	ad400404 	addi	r21,r21,16
 40015c0:	003f1706 	br	4001220 <_malloc_r+0x378>
 40015c4:	00c01504 	movi	r3,84
 40015c8:	18802336 	bltu	r3,r2,4001658 <_malloc_r+0x7b0>
 40015cc:	3804d33a 	srli	r2,r7,12
 40015d0:	11401bc4 	addi	r5,r2,111
 40015d4:	10c01b84 	addi	r3,r2,110
 40015d8:	294b883a 	add	r5,r5,r5
 40015dc:	003f7b06 	br	40013cc <_malloc_r+0x524>
 40015e0:	9c000217 	ldw	r16,8(r19)
 40015e4:	00bfff04 	movi	r2,-4
 40015e8:	80c00117 	ldw	r3,4(r16)
 40015ec:	1886703a 	and	r3,r3,r2
 40015f0:	003f5306 	br	4001340 <_malloc_r+0x498>
 40015f4:	3083ffcc 	andi	r2,r6,4095
 40015f8:	103f181e 	bne	r2,zero,400125c <_malloc_r+0x3b4>
 40015fc:	99000217 	ldw	r4,8(r19)
 4001600:	b545883a 	add	r2,r22,r21
 4001604:	10800054 	ori	r2,r2,1
 4001608:	20800115 	stw	r2,4(r4)
 400160c:	003f3e06 	br	4001308 <_malloc_r+0x460>
 4001610:	01003f84 	movi	r4,254
 4001614:	02001fc4 	movi	r8,127
 4001618:	01c01f84 	movi	r7,126
 400161c:	003e4006 	br	4000f20 <_malloc_r+0x78>
 4001620:	00810034 	movhi	r2,1024
 4001624:	109cf604 	addi	r2,r2,29656
 4001628:	15000015 	stw	r20,0(r2)
 400162c:	003f1106 	br	4001274 <_malloc_r+0x3cc>
 4001630:	00800044 	movi	r2,1
 4001634:	002b883a 	mov	r21,zero
 4001638:	003f1f06 	br	40012b8 <_malloc_r+0x410>
 400163c:	81400204 	addi	r5,r16,8
 4001640:	9009883a 	mov	r4,r18
 4001644:	40029300 	call	4002930 <_free_r>
 4001648:	00810074 	movhi	r2,1025
 400164c:	10a3a804 	addi	r2,r2,-29024
 4001650:	10c00017 	ldw	r3,0(r2)
 4001654:	003f2c06 	br	4001308 <_malloc_r+0x460>
 4001658:	00c05504 	movi	r3,340
 400165c:	18800536 	bltu	r3,r2,4001674 <_malloc_r+0x7cc>
 4001660:	3804d3fa 	srli	r2,r7,15
 4001664:	11401e04 	addi	r5,r2,120
 4001668:	10c01dc4 	addi	r3,r2,119
 400166c:	294b883a 	add	r5,r5,r5
 4001670:	003f5606 	br	40013cc <_malloc_r+0x524>
 4001674:	00c15504 	movi	r3,1364
 4001678:	18800536 	bltu	r3,r2,4001690 <_malloc_r+0x7e8>
 400167c:	3804d4ba 	srli	r2,r7,18
 4001680:	11401f44 	addi	r5,r2,125
 4001684:	10c01f04 	addi	r3,r2,124
 4001688:	294b883a 	add	r5,r5,r5
 400168c:	003f4f06 	br	40013cc <_malloc_r+0x524>
 4001690:	01403f84 	movi	r5,254
 4001694:	00c01f84 	movi	r3,126
 4001698:	003f4c06 	br	40013cc <_malloc_r+0x524>
 400169c:	98800117 	ldw	r2,4(r19)
 40016a0:	003fa006 	br	4001524 <_malloc_r+0x67c>
 40016a4:	8808d0fa 	srli	r4,r17,3
 40016a8:	20800044 	addi	r2,r4,1
 40016ac:	1085883a 	add	r2,r2,r2
 40016b0:	003e9006 	br	40010f4 <_malloc_r+0x24c>

040016b4 <memchr>:
 40016b4:	208000cc 	andi	r2,r4,3
 40016b8:	280f883a 	mov	r7,r5
 40016bc:	10003426 	beq	r2,zero,4001790 <memchr+0xdc>
 40016c0:	30bfffc4 	addi	r2,r6,-1
 40016c4:	30001a26 	beq	r6,zero,4001730 <memchr+0x7c>
 40016c8:	20c00003 	ldbu	r3,0(r4)
 40016cc:	29803fcc 	andi	r6,r5,255
 40016d0:	30c0051e 	bne	r6,r3,40016e8 <memchr+0x34>
 40016d4:	00001806 	br	4001738 <memchr+0x84>
 40016d8:	10001526 	beq	r2,zero,4001730 <memchr+0x7c>
 40016dc:	20c00003 	ldbu	r3,0(r4)
 40016e0:	10bfffc4 	addi	r2,r2,-1
 40016e4:	30c01426 	beq	r6,r3,4001738 <memchr+0x84>
 40016e8:	21000044 	addi	r4,r4,1
 40016ec:	20c000cc 	andi	r3,r4,3
 40016f0:	183ff91e 	bne	r3,zero,40016d8 <memchr+0x24>
 40016f4:	020000c4 	movi	r8,3
 40016f8:	40801136 	bltu	r8,r2,4001740 <memchr+0x8c>
 40016fc:	10000c26 	beq	r2,zero,4001730 <memchr+0x7c>
 4001700:	20c00003 	ldbu	r3,0(r4)
 4001704:	29403fcc 	andi	r5,r5,255
 4001708:	28c00b26 	beq	r5,r3,4001738 <memchr+0x84>
 400170c:	20c00044 	addi	r3,r4,1
 4001710:	39803fcc 	andi	r6,r7,255
 4001714:	2089883a 	add	r4,r4,r2
 4001718:	00000306 	br	4001728 <memchr+0x74>
 400171c:	18c00044 	addi	r3,r3,1
 4001720:	197fffc3 	ldbu	r5,-1(r3)
 4001724:	31400526 	beq	r6,r5,400173c <memchr+0x88>
 4001728:	1805883a 	mov	r2,r3
 400172c:	20fffb1e 	bne	r4,r3,400171c <memchr+0x68>
 4001730:	0005883a 	mov	r2,zero
 4001734:	f800283a 	ret
 4001738:	2005883a 	mov	r2,r4
 400173c:	f800283a 	ret
 4001740:	28c03fcc 	andi	r3,r5,255
 4001744:	1812923a 	slli	r9,r3,8
 4001748:	02ffbff4 	movhi	r11,65279
 400174c:	02a02074 	movhi	r10,32897
 4001750:	48d2b03a 	or	r9,r9,r3
 4001754:	4806943a 	slli	r3,r9,16
 4001758:	5affbfc4 	addi	r11,r11,-257
 400175c:	52a02004 	addi	r10,r10,-32640
 4001760:	48d2b03a 	or	r9,r9,r3
 4001764:	20c00017 	ldw	r3,0(r4)
 4001768:	48c6f03a 	xor	r3,r9,r3
 400176c:	1acd883a 	add	r6,r3,r11
 4001770:	00c6303a 	nor	r3,zero,r3
 4001774:	30c6703a 	and	r3,r6,r3
 4001778:	1a86703a 	and	r3,r3,r10
 400177c:	183fe01e 	bne	r3,zero,4001700 <memchr+0x4c>
 4001780:	10bfff04 	addi	r2,r2,-4
 4001784:	21000104 	addi	r4,r4,4
 4001788:	40bff636 	bltu	r8,r2,4001764 <memchr+0xb0>
 400178c:	003fdb06 	br	40016fc <memchr+0x48>
 4001790:	3005883a 	mov	r2,r6
 4001794:	003fd706 	br	40016f4 <memchr+0x40>

04001798 <memcpy>:
 4001798:	defffd04 	addi	sp,sp,-12
 400179c:	dfc00215 	stw	ra,8(sp)
 40017a0:	dc400115 	stw	r17,4(sp)
 40017a4:	dc000015 	stw	r16,0(sp)
 40017a8:	00c003c4 	movi	r3,15
 40017ac:	2005883a 	mov	r2,r4
 40017b0:	1980452e 	bgeu	r3,r6,40018c8 <memcpy+0x130>
 40017b4:	2906b03a 	or	r3,r5,r4
 40017b8:	18c000cc 	andi	r3,r3,3
 40017bc:	1800441e 	bne	r3,zero,40018d0 <memcpy+0x138>
 40017c0:	347ffc04 	addi	r17,r6,-16
 40017c4:	8822d13a 	srli	r17,r17,4
 40017c8:	28c00104 	addi	r3,r5,4
 40017cc:	23400104 	addi	r13,r4,4
 40017d0:	8820913a 	slli	r16,r17,4
 40017d4:	2b000204 	addi	r12,r5,8
 40017d8:	22c00204 	addi	r11,r4,8
 40017dc:	84000504 	addi	r16,r16,20
 40017e0:	2a800304 	addi	r10,r5,12
 40017e4:	22400304 	addi	r9,r4,12
 40017e8:	2c21883a 	add	r16,r5,r16
 40017ec:	2811883a 	mov	r8,r5
 40017f0:	200f883a 	mov	r7,r4
 40017f4:	41000017 	ldw	r4,0(r8)
 40017f8:	1fc00017 	ldw	ra,0(r3)
 40017fc:	63c00017 	ldw	r15,0(r12)
 4001800:	39000015 	stw	r4,0(r7)
 4001804:	53800017 	ldw	r14,0(r10)
 4001808:	6fc00015 	stw	ra,0(r13)
 400180c:	5bc00015 	stw	r15,0(r11)
 4001810:	4b800015 	stw	r14,0(r9)
 4001814:	18c00404 	addi	r3,r3,16
 4001818:	39c00404 	addi	r7,r7,16
 400181c:	42000404 	addi	r8,r8,16
 4001820:	6b400404 	addi	r13,r13,16
 4001824:	63000404 	addi	r12,r12,16
 4001828:	5ac00404 	addi	r11,r11,16
 400182c:	52800404 	addi	r10,r10,16
 4001830:	4a400404 	addi	r9,r9,16
 4001834:	1c3fef1e 	bne	r3,r16,40017f4 <memcpy+0x5c>
 4001838:	89c00044 	addi	r7,r17,1
 400183c:	380e913a 	slli	r7,r7,4
 4001840:	310003cc 	andi	r4,r6,15
 4001844:	02c000c4 	movi	r11,3
 4001848:	11c7883a 	add	r3,r2,r7
 400184c:	29cb883a 	add	r5,r5,r7
 4001850:	5900212e 	bgeu	r11,r4,40018d8 <memcpy+0x140>
 4001854:	1813883a 	mov	r9,r3
 4001858:	2811883a 	mov	r8,r5
 400185c:	200f883a 	mov	r7,r4
 4001860:	42800017 	ldw	r10,0(r8)
 4001864:	4a400104 	addi	r9,r9,4
 4001868:	39ffff04 	addi	r7,r7,-4
 400186c:	4abfff15 	stw	r10,-4(r9)
 4001870:	42000104 	addi	r8,r8,4
 4001874:	59fffa36 	bltu	r11,r7,4001860 <memcpy+0xc8>
 4001878:	213fff04 	addi	r4,r4,-4
 400187c:	2008d0ba 	srli	r4,r4,2
 4001880:	318000cc 	andi	r6,r6,3
 4001884:	21000044 	addi	r4,r4,1
 4001888:	2109883a 	add	r4,r4,r4
 400188c:	2109883a 	add	r4,r4,r4
 4001890:	1907883a 	add	r3,r3,r4
 4001894:	290b883a 	add	r5,r5,r4
 4001898:	30000626 	beq	r6,zero,40018b4 <memcpy+0x11c>
 400189c:	198d883a 	add	r6,r3,r6
 40018a0:	29c00003 	ldbu	r7,0(r5)
 40018a4:	18c00044 	addi	r3,r3,1
 40018a8:	29400044 	addi	r5,r5,1
 40018ac:	19ffffc5 	stb	r7,-1(r3)
 40018b0:	19bffb1e 	bne	r3,r6,40018a0 <memcpy+0x108>
 40018b4:	dfc00217 	ldw	ra,8(sp)
 40018b8:	dc400117 	ldw	r17,4(sp)
 40018bc:	dc000017 	ldw	r16,0(sp)
 40018c0:	dec00304 	addi	sp,sp,12
 40018c4:	f800283a 	ret
 40018c8:	2007883a 	mov	r3,r4
 40018cc:	003ff206 	br	4001898 <memcpy+0x100>
 40018d0:	2007883a 	mov	r3,r4
 40018d4:	003ff106 	br	400189c <memcpy+0x104>
 40018d8:	200d883a 	mov	r6,r4
 40018dc:	003fee06 	br	4001898 <memcpy+0x100>

040018e0 <memmove>:
 40018e0:	2005883a 	mov	r2,r4
 40018e4:	29000b2e 	bgeu	r5,r4,4001914 <memmove+0x34>
 40018e8:	298f883a 	add	r7,r5,r6
 40018ec:	21c0092e 	bgeu	r4,r7,4001914 <memmove+0x34>
 40018f0:	2187883a 	add	r3,r4,r6
 40018f4:	198bc83a 	sub	r5,r3,r6
 40018f8:	30004826 	beq	r6,zero,4001a1c <memmove+0x13c>
 40018fc:	39ffffc4 	addi	r7,r7,-1
 4001900:	39000003 	ldbu	r4,0(r7)
 4001904:	18ffffc4 	addi	r3,r3,-1
 4001908:	19000005 	stb	r4,0(r3)
 400190c:	28fffb1e 	bne	r5,r3,40018fc <memmove+0x1c>
 4001910:	f800283a 	ret
 4001914:	00c003c4 	movi	r3,15
 4001918:	1980412e 	bgeu	r3,r6,4001a20 <memmove+0x140>
 400191c:	2886b03a 	or	r3,r5,r2
 4001920:	18c000cc 	andi	r3,r3,3
 4001924:	1800401e 	bne	r3,zero,4001a28 <memmove+0x148>
 4001928:	33fffc04 	addi	r15,r6,-16
 400192c:	781ed13a 	srli	r15,r15,4
 4001930:	28c00104 	addi	r3,r5,4
 4001934:	13400104 	addi	r13,r2,4
 4001938:	781c913a 	slli	r14,r15,4
 400193c:	2b000204 	addi	r12,r5,8
 4001940:	12c00204 	addi	r11,r2,8
 4001944:	73800504 	addi	r14,r14,20
 4001948:	2a800304 	addi	r10,r5,12
 400194c:	12400304 	addi	r9,r2,12
 4001950:	2b9d883a 	add	r14,r5,r14
 4001954:	2811883a 	mov	r8,r5
 4001958:	100f883a 	mov	r7,r2
 400195c:	41000017 	ldw	r4,0(r8)
 4001960:	39c00404 	addi	r7,r7,16
 4001964:	18c00404 	addi	r3,r3,16
 4001968:	393ffc15 	stw	r4,-16(r7)
 400196c:	193ffc17 	ldw	r4,-16(r3)
 4001970:	6b400404 	addi	r13,r13,16
 4001974:	5ac00404 	addi	r11,r11,16
 4001978:	693ffc15 	stw	r4,-16(r13)
 400197c:	61000017 	ldw	r4,0(r12)
 4001980:	4a400404 	addi	r9,r9,16
 4001984:	42000404 	addi	r8,r8,16
 4001988:	593ffc15 	stw	r4,-16(r11)
 400198c:	51000017 	ldw	r4,0(r10)
 4001990:	63000404 	addi	r12,r12,16
 4001994:	52800404 	addi	r10,r10,16
 4001998:	493ffc15 	stw	r4,-16(r9)
 400199c:	1bbfef1e 	bne	r3,r14,400195c <memmove+0x7c>
 40019a0:	79000044 	addi	r4,r15,1
 40019a4:	2008913a 	slli	r4,r4,4
 40019a8:	328003cc 	andi	r10,r6,15
 40019ac:	02c000c4 	movi	r11,3
 40019b0:	1107883a 	add	r3,r2,r4
 40019b4:	290b883a 	add	r5,r5,r4
 40019b8:	5a801e2e 	bgeu	r11,r10,4001a34 <memmove+0x154>
 40019bc:	1813883a 	mov	r9,r3
 40019c0:	2811883a 	mov	r8,r5
 40019c4:	500f883a 	mov	r7,r10
 40019c8:	41000017 	ldw	r4,0(r8)
 40019cc:	4a400104 	addi	r9,r9,4
 40019d0:	39ffff04 	addi	r7,r7,-4
 40019d4:	493fff15 	stw	r4,-4(r9)
 40019d8:	42000104 	addi	r8,r8,4
 40019dc:	59fffa36 	bltu	r11,r7,40019c8 <memmove+0xe8>
 40019e0:	513fff04 	addi	r4,r10,-4
 40019e4:	2008d0ba 	srli	r4,r4,2
 40019e8:	318000cc 	andi	r6,r6,3
 40019ec:	21000044 	addi	r4,r4,1
 40019f0:	2109883a 	add	r4,r4,r4
 40019f4:	2109883a 	add	r4,r4,r4
 40019f8:	1907883a 	add	r3,r3,r4
 40019fc:	290b883a 	add	r5,r5,r4
 4001a00:	30000b26 	beq	r6,zero,4001a30 <memmove+0x150>
 4001a04:	198d883a 	add	r6,r3,r6
 4001a08:	29c00003 	ldbu	r7,0(r5)
 4001a0c:	18c00044 	addi	r3,r3,1
 4001a10:	29400044 	addi	r5,r5,1
 4001a14:	19ffffc5 	stb	r7,-1(r3)
 4001a18:	19bffb1e 	bne	r3,r6,4001a08 <memmove+0x128>
 4001a1c:	f800283a 	ret
 4001a20:	1007883a 	mov	r3,r2
 4001a24:	003ff606 	br	4001a00 <memmove+0x120>
 4001a28:	1007883a 	mov	r3,r2
 4001a2c:	003ff506 	br	4001a04 <memmove+0x124>
 4001a30:	f800283a 	ret
 4001a34:	500d883a 	mov	r6,r10
 4001a38:	003ff106 	br	4001a00 <memmove+0x120>

04001a3c <memset>:
 4001a3c:	20c000cc 	andi	r3,r4,3
 4001a40:	2005883a 	mov	r2,r4
 4001a44:	18004426 	beq	r3,zero,4001b58 <memset+0x11c>
 4001a48:	31ffffc4 	addi	r7,r6,-1
 4001a4c:	30004026 	beq	r6,zero,4001b50 <memset+0x114>
 4001a50:	2813883a 	mov	r9,r5
 4001a54:	200d883a 	mov	r6,r4
 4001a58:	2007883a 	mov	r3,r4
 4001a5c:	00000406 	br	4001a70 <memset+0x34>
 4001a60:	3a3fffc4 	addi	r8,r7,-1
 4001a64:	31800044 	addi	r6,r6,1
 4001a68:	38003926 	beq	r7,zero,4001b50 <memset+0x114>
 4001a6c:	400f883a 	mov	r7,r8
 4001a70:	18c00044 	addi	r3,r3,1
 4001a74:	32400005 	stb	r9,0(r6)
 4001a78:	1a0000cc 	andi	r8,r3,3
 4001a7c:	403ff81e 	bne	r8,zero,4001a60 <memset+0x24>
 4001a80:	010000c4 	movi	r4,3
 4001a84:	21c02d2e 	bgeu	r4,r7,4001b3c <memset+0x100>
 4001a88:	29003fcc 	andi	r4,r5,255
 4001a8c:	200c923a 	slli	r6,r4,8
 4001a90:	3108b03a 	or	r4,r6,r4
 4001a94:	200c943a 	slli	r6,r4,16
 4001a98:	218cb03a 	or	r6,r4,r6
 4001a9c:	010003c4 	movi	r4,15
 4001aa0:	21c0182e 	bgeu	r4,r7,4001b04 <memset+0xc8>
 4001aa4:	3b3ffc04 	addi	r12,r7,-16
 4001aa8:	6018d13a 	srli	r12,r12,4
 4001aac:	1a000104 	addi	r8,r3,4
 4001ab0:	1ac00204 	addi	r11,r3,8
 4001ab4:	6008913a 	slli	r4,r12,4
 4001ab8:	1a800304 	addi	r10,r3,12
 4001abc:	1813883a 	mov	r9,r3
 4001ac0:	21000504 	addi	r4,r4,20
 4001ac4:	1909883a 	add	r4,r3,r4
 4001ac8:	49800015 	stw	r6,0(r9)
 4001acc:	41800015 	stw	r6,0(r8)
 4001ad0:	59800015 	stw	r6,0(r11)
 4001ad4:	51800015 	stw	r6,0(r10)
 4001ad8:	42000404 	addi	r8,r8,16
 4001adc:	4a400404 	addi	r9,r9,16
 4001ae0:	5ac00404 	addi	r11,r11,16
 4001ae4:	52800404 	addi	r10,r10,16
 4001ae8:	413ff71e 	bne	r8,r4,4001ac8 <memset+0x8c>
 4001aec:	63000044 	addi	r12,r12,1
 4001af0:	6018913a 	slli	r12,r12,4
 4001af4:	39c003cc 	andi	r7,r7,15
 4001af8:	010000c4 	movi	r4,3
 4001afc:	1b07883a 	add	r3,r3,r12
 4001b00:	21c00e2e 	bgeu	r4,r7,4001b3c <memset+0x100>
 4001b04:	1813883a 	mov	r9,r3
 4001b08:	3811883a 	mov	r8,r7
 4001b0c:	010000c4 	movi	r4,3
 4001b10:	49800015 	stw	r6,0(r9)
 4001b14:	423fff04 	addi	r8,r8,-4
 4001b18:	4a400104 	addi	r9,r9,4
 4001b1c:	223ffc36 	bltu	r4,r8,4001b10 <memset+0xd4>
 4001b20:	393fff04 	addi	r4,r7,-4
 4001b24:	2008d0ba 	srli	r4,r4,2
 4001b28:	39c000cc 	andi	r7,r7,3
 4001b2c:	21000044 	addi	r4,r4,1
 4001b30:	2109883a 	add	r4,r4,r4
 4001b34:	2109883a 	add	r4,r4,r4
 4001b38:	1907883a 	add	r3,r3,r4
 4001b3c:	38000526 	beq	r7,zero,4001b54 <memset+0x118>
 4001b40:	19cf883a 	add	r7,r3,r7
 4001b44:	19400005 	stb	r5,0(r3)
 4001b48:	18c00044 	addi	r3,r3,1
 4001b4c:	38fffd1e 	bne	r7,r3,4001b44 <memset+0x108>
 4001b50:	f800283a 	ret
 4001b54:	f800283a 	ret
 4001b58:	2007883a 	mov	r3,r4
 4001b5c:	300f883a 	mov	r7,r6
 4001b60:	003fc706 	br	4001a80 <memset+0x44>

04001b64 <_realloc_r>:
 4001b64:	defff604 	addi	sp,sp,-40
 4001b68:	dc800215 	stw	r18,8(sp)
 4001b6c:	dfc00915 	stw	ra,36(sp)
 4001b70:	df000815 	stw	fp,32(sp)
 4001b74:	ddc00715 	stw	r23,28(sp)
 4001b78:	dd800615 	stw	r22,24(sp)
 4001b7c:	dd400515 	stw	r21,20(sp)
 4001b80:	dd000415 	stw	r20,16(sp)
 4001b84:	dcc00315 	stw	r19,12(sp)
 4001b88:	dc400115 	stw	r17,4(sp)
 4001b8c:	dc000015 	stw	r16,0(sp)
 4001b90:	3025883a 	mov	r18,r6
 4001b94:	2800b726 	beq	r5,zero,4001e74 <_realloc_r+0x310>
 4001b98:	282b883a 	mov	r21,r5
 4001b9c:	2029883a 	mov	r20,r4
 4001ba0:	400369c0 	call	400369c <__malloc_lock>
 4001ba4:	a8bfff17 	ldw	r2,-4(r21)
 4001ba8:	043fff04 	movi	r16,-4
 4001bac:	90c002c4 	addi	r3,r18,11
 4001bb0:	01000584 	movi	r4,22
 4001bb4:	acfffe04 	addi	r19,r21,-8
 4001bb8:	1420703a 	and	r16,r2,r16
 4001bbc:	20c0332e 	bgeu	r4,r3,4001c8c <_realloc_r+0x128>
 4001bc0:	047ffe04 	movi	r17,-8
 4001bc4:	1c62703a 	and	r17,r3,r17
 4001bc8:	8807883a 	mov	r3,r17
 4001bcc:	88005816 	blt	r17,zero,4001d30 <_realloc_r+0x1cc>
 4001bd0:	8c805736 	bltu	r17,r18,4001d30 <_realloc_r+0x1cc>
 4001bd4:	80c0300e 	bge	r16,r3,4001c98 <_realloc_r+0x134>
 4001bd8:	07010034 	movhi	fp,1024
 4001bdc:	e7177004 	addi	fp,fp,24000
 4001be0:	e1c00217 	ldw	r7,8(fp)
 4001be4:	9c09883a 	add	r4,r19,r16
 4001be8:	22000117 	ldw	r8,4(r4)
 4001bec:	21c06326 	beq	r4,r7,4001d7c <_realloc_r+0x218>
 4001bf0:	017fff84 	movi	r5,-2
 4001bf4:	414a703a 	and	r5,r8,r5
 4001bf8:	214b883a 	add	r5,r4,r5
 4001bfc:	29800117 	ldw	r6,4(r5)
 4001c00:	3180004c 	andi	r6,r6,1
 4001c04:	30003f26 	beq	r6,zero,4001d04 <_realloc_r+0x1a0>
 4001c08:	1080004c 	andi	r2,r2,1
 4001c0c:	10008326 	beq	r2,zero,4001e1c <_realloc_r+0x2b8>
 4001c10:	900b883a 	mov	r5,r18
 4001c14:	a009883a 	mov	r4,r20
 4001c18:	4000ea80 	call	4000ea8 <_malloc_r>
 4001c1c:	1025883a 	mov	r18,r2
 4001c20:	10011e26 	beq	r2,zero,400209c <_realloc_r+0x538>
 4001c24:	a93fff17 	ldw	r4,-4(r21)
 4001c28:	10fffe04 	addi	r3,r2,-8
 4001c2c:	00bfff84 	movi	r2,-2
 4001c30:	2084703a 	and	r2,r4,r2
 4001c34:	9885883a 	add	r2,r19,r2
 4001c38:	1880ee26 	beq	r3,r2,4001ff4 <_realloc_r+0x490>
 4001c3c:	81bfff04 	addi	r6,r16,-4
 4001c40:	00800904 	movi	r2,36
 4001c44:	1180b836 	bltu	r2,r6,4001f28 <_realloc_r+0x3c4>
 4001c48:	00c004c4 	movi	r3,19
 4001c4c:	19809636 	bltu	r3,r6,4001ea8 <_realloc_r+0x344>
 4001c50:	9005883a 	mov	r2,r18
 4001c54:	a807883a 	mov	r3,r21
 4001c58:	19000017 	ldw	r4,0(r3)
 4001c5c:	11000015 	stw	r4,0(r2)
 4001c60:	19000117 	ldw	r4,4(r3)
 4001c64:	11000115 	stw	r4,4(r2)
 4001c68:	18c00217 	ldw	r3,8(r3)
 4001c6c:	10c00215 	stw	r3,8(r2)
 4001c70:	a80b883a 	mov	r5,r21
 4001c74:	a009883a 	mov	r4,r20
 4001c78:	40029300 	call	4002930 <_free_r>
 4001c7c:	a009883a 	mov	r4,r20
 4001c80:	40036c00 	call	40036c0 <__malloc_unlock>
 4001c84:	9005883a 	mov	r2,r18
 4001c88:	00001206 	br	4001cd4 <_realloc_r+0x170>
 4001c8c:	00c00404 	movi	r3,16
 4001c90:	1823883a 	mov	r17,r3
 4001c94:	003fce06 	br	4001bd0 <_realloc_r+0x6c>
 4001c98:	a825883a 	mov	r18,r21
 4001c9c:	8445c83a 	sub	r2,r16,r17
 4001ca0:	00c003c4 	movi	r3,15
 4001ca4:	18802636 	bltu	r3,r2,4001d40 <_realloc_r+0x1dc>
 4001ca8:	99800117 	ldw	r6,4(r19)
 4001cac:	9c07883a 	add	r3,r19,r16
 4001cb0:	3180004c 	andi	r6,r6,1
 4001cb4:	3420b03a 	or	r16,r6,r16
 4001cb8:	9c000115 	stw	r16,4(r19)
 4001cbc:	18800117 	ldw	r2,4(r3)
 4001cc0:	10800054 	ori	r2,r2,1
 4001cc4:	18800115 	stw	r2,4(r3)
 4001cc8:	a009883a 	mov	r4,r20
 4001ccc:	40036c00 	call	40036c0 <__malloc_unlock>
 4001cd0:	9005883a 	mov	r2,r18
 4001cd4:	dfc00917 	ldw	ra,36(sp)
 4001cd8:	df000817 	ldw	fp,32(sp)
 4001cdc:	ddc00717 	ldw	r23,28(sp)
 4001ce0:	dd800617 	ldw	r22,24(sp)
 4001ce4:	dd400517 	ldw	r21,20(sp)
 4001ce8:	dd000417 	ldw	r20,16(sp)
 4001cec:	dcc00317 	ldw	r19,12(sp)
 4001cf0:	dc800217 	ldw	r18,8(sp)
 4001cf4:	dc400117 	ldw	r17,4(sp)
 4001cf8:	dc000017 	ldw	r16,0(sp)
 4001cfc:	dec00a04 	addi	sp,sp,40
 4001d00:	f800283a 	ret
 4001d04:	017fff04 	movi	r5,-4
 4001d08:	414a703a 	and	r5,r8,r5
 4001d0c:	814d883a 	add	r6,r16,r5
 4001d10:	30c01f16 	blt	r6,r3,4001d90 <_realloc_r+0x22c>
 4001d14:	20800317 	ldw	r2,12(r4)
 4001d18:	20c00217 	ldw	r3,8(r4)
 4001d1c:	a825883a 	mov	r18,r21
 4001d20:	3021883a 	mov	r16,r6
 4001d24:	18800315 	stw	r2,12(r3)
 4001d28:	10c00215 	stw	r3,8(r2)
 4001d2c:	003fdb06 	br	4001c9c <_realloc_r+0x138>
 4001d30:	00800304 	movi	r2,12
 4001d34:	a0800015 	stw	r2,0(r20)
 4001d38:	0005883a 	mov	r2,zero
 4001d3c:	003fe506 	br	4001cd4 <_realloc_r+0x170>
 4001d40:	98c00117 	ldw	r3,4(r19)
 4001d44:	9c4b883a 	add	r5,r19,r17
 4001d48:	11000054 	ori	r4,r2,1
 4001d4c:	18c0004c 	andi	r3,r3,1
 4001d50:	1c62b03a 	or	r17,r3,r17
 4001d54:	9c400115 	stw	r17,4(r19)
 4001d58:	29000115 	stw	r4,4(r5)
 4001d5c:	2885883a 	add	r2,r5,r2
 4001d60:	10c00117 	ldw	r3,4(r2)
 4001d64:	29400204 	addi	r5,r5,8
 4001d68:	a009883a 	mov	r4,r20
 4001d6c:	18c00054 	ori	r3,r3,1
 4001d70:	10c00115 	stw	r3,4(r2)
 4001d74:	40029300 	call	4002930 <_free_r>
 4001d78:	003fd306 	br	4001cc8 <_realloc_r+0x164>
 4001d7c:	017fff04 	movi	r5,-4
 4001d80:	414a703a 	and	r5,r8,r5
 4001d84:	89800404 	addi	r6,r17,16
 4001d88:	8151883a 	add	r8,r16,r5
 4001d8c:	4180590e 	bge	r8,r6,4001ef4 <_realloc_r+0x390>
 4001d90:	1080004c 	andi	r2,r2,1
 4001d94:	103f9e1e 	bne	r2,zero,4001c10 <_realloc_r+0xac>
 4001d98:	adbffe17 	ldw	r22,-8(r21)
 4001d9c:	00bfff04 	movi	r2,-4
 4001da0:	9dadc83a 	sub	r22,r19,r22
 4001da4:	b1800117 	ldw	r6,4(r22)
 4001da8:	3084703a 	and	r2,r6,r2
 4001dac:	20002026 	beq	r4,zero,4001e30 <_realloc_r+0x2cc>
 4001db0:	80af883a 	add	r23,r16,r2
 4001db4:	b96f883a 	add	r23,r23,r5
 4001db8:	21c05f26 	beq	r4,r7,4001f38 <_realloc_r+0x3d4>
 4001dbc:	b8c01c16 	blt	r23,r3,4001e30 <_realloc_r+0x2cc>
 4001dc0:	20800317 	ldw	r2,12(r4)
 4001dc4:	20c00217 	ldw	r3,8(r4)
 4001dc8:	81bfff04 	addi	r6,r16,-4
 4001dcc:	01000904 	movi	r4,36
 4001dd0:	18800315 	stw	r2,12(r3)
 4001dd4:	10c00215 	stw	r3,8(r2)
 4001dd8:	b0c00217 	ldw	r3,8(r22)
 4001ddc:	b0800317 	ldw	r2,12(r22)
 4001de0:	b4800204 	addi	r18,r22,8
 4001de4:	18800315 	stw	r2,12(r3)
 4001de8:	10c00215 	stw	r3,8(r2)
 4001dec:	21801b36 	bltu	r4,r6,4001e5c <_realloc_r+0x2f8>
 4001df0:	008004c4 	movi	r2,19
 4001df4:	1180352e 	bgeu	r2,r6,4001ecc <_realloc_r+0x368>
 4001df8:	a8800017 	ldw	r2,0(r21)
 4001dfc:	b0800215 	stw	r2,8(r22)
 4001e00:	a8800117 	ldw	r2,4(r21)
 4001e04:	b0800315 	stw	r2,12(r22)
 4001e08:	008006c4 	movi	r2,27
 4001e0c:	11807f36 	bltu	r2,r6,400200c <_realloc_r+0x4a8>
 4001e10:	b0800404 	addi	r2,r22,16
 4001e14:	ad400204 	addi	r21,r21,8
 4001e18:	00002d06 	br	4001ed0 <_realloc_r+0x36c>
 4001e1c:	adbffe17 	ldw	r22,-8(r21)
 4001e20:	00bfff04 	movi	r2,-4
 4001e24:	9dadc83a 	sub	r22,r19,r22
 4001e28:	b1000117 	ldw	r4,4(r22)
 4001e2c:	2084703a 	and	r2,r4,r2
 4001e30:	b03f7726 	beq	r22,zero,4001c10 <_realloc_r+0xac>
 4001e34:	80af883a 	add	r23,r16,r2
 4001e38:	b8ff7516 	blt	r23,r3,4001c10 <_realloc_r+0xac>
 4001e3c:	b0800317 	ldw	r2,12(r22)
 4001e40:	b0c00217 	ldw	r3,8(r22)
 4001e44:	81bfff04 	addi	r6,r16,-4
 4001e48:	01000904 	movi	r4,36
 4001e4c:	18800315 	stw	r2,12(r3)
 4001e50:	10c00215 	stw	r3,8(r2)
 4001e54:	b4800204 	addi	r18,r22,8
 4001e58:	21bfe52e 	bgeu	r4,r6,4001df0 <_realloc_r+0x28c>
 4001e5c:	a80b883a 	mov	r5,r21
 4001e60:	9009883a 	mov	r4,r18
 4001e64:	40018e00 	call	40018e0 <memmove>
 4001e68:	b821883a 	mov	r16,r23
 4001e6c:	b027883a 	mov	r19,r22
 4001e70:	003f8a06 	br	4001c9c <_realloc_r+0x138>
 4001e74:	300b883a 	mov	r5,r6
 4001e78:	dfc00917 	ldw	ra,36(sp)
 4001e7c:	df000817 	ldw	fp,32(sp)
 4001e80:	ddc00717 	ldw	r23,28(sp)
 4001e84:	dd800617 	ldw	r22,24(sp)
 4001e88:	dd400517 	ldw	r21,20(sp)
 4001e8c:	dd000417 	ldw	r20,16(sp)
 4001e90:	dcc00317 	ldw	r19,12(sp)
 4001e94:	dc800217 	ldw	r18,8(sp)
 4001e98:	dc400117 	ldw	r17,4(sp)
 4001e9c:	dc000017 	ldw	r16,0(sp)
 4001ea0:	dec00a04 	addi	sp,sp,40
 4001ea4:	4000ea81 	jmpi	4000ea8 <_malloc_r>
 4001ea8:	a8c00017 	ldw	r3,0(r21)
 4001eac:	90c00015 	stw	r3,0(r18)
 4001eb0:	a8c00117 	ldw	r3,4(r21)
 4001eb4:	90c00115 	stw	r3,4(r18)
 4001eb8:	00c006c4 	movi	r3,27
 4001ebc:	19804536 	bltu	r3,r6,4001fd4 <_realloc_r+0x470>
 4001ec0:	90800204 	addi	r2,r18,8
 4001ec4:	a8c00204 	addi	r3,r21,8
 4001ec8:	003f6306 	br	4001c58 <_realloc_r+0xf4>
 4001ecc:	9005883a 	mov	r2,r18
 4001ed0:	a8c00017 	ldw	r3,0(r21)
 4001ed4:	b821883a 	mov	r16,r23
 4001ed8:	b027883a 	mov	r19,r22
 4001edc:	10c00015 	stw	r3,0(r2)
 4001ee0:	a8c00117 	ldw	r3,4(r21)
 4001ee4:	10c00115 	stw	r3,4(r2)
 4001ee8:	a8c00217 	ldw	r3,8(r21)
 4001eec:	10c00215 	stw	r3,8(r2)
 4001ef0:	003f6a06 	br	4001c9c <_realloc_r+0x138>
 4001ef4:	9c67883a 	add	r19,r19,r17
 4001ef8:	4445c83a 	sub	r2,r8,r17
 4001efc:	e4c00215 	stw	r19,8(fp)
 4001f00:	10800054 	ori	r2,r2,1
 4001f04:	98800115 	stw	r2,4(r19)
 4001f08:	a8bfff17 	ldw	r2,-4(r21)
 4001f0c:	a009883a 	mov	r4,r20
 4001f10:	1080004c 	andi	r2,r2,1
 4001f14:	1462b03a 	or	r17,r2,r17
 4001f18:	ac7fff15 	stw	r17,-4(r21)
 4001f1c:	40036c00 	call	40036c0 <__malloc_unlock>
 4001f20:	a805883a 	mov	r2,r21
 4001f24:	003f6b06 	br	4001cd4 <_realloc_r+0x170>
 4001f28:	a80b883a 	mov	r5,r21
 4001f2c:	9009883a 	mov	r4,r18
 4001f30:	40018e00 	call	40018e0 <memmove>
 4001f34:	003f4e06 	br	4001c70 <_realloc_r+0x10c>
 4001f38:	89000404 	addi	r4,r17,16
 4001f3c:	b93fbc16 	blt	r23,r4,4001e30 <_realloc_r+0x2cc>
 4001f40:	b0800317 	ldw	r2,12(r22)
 4001f44:	b0c00217 	ldw	r3,8(r22)
 4001f48:	81bfff04 	addi	r6,r16,-4
 4001f4c:	01000904 	movi	r4,36
 4001f50:	18800315 	stw	r2,12(r3)
 4001f54:	10c00215 	stw	r3,8(r2)
 4001f58:	b4800204 	addi	r18,r22,8
 4001f5c:	21804336 	bltu	r4,r6,400206c <_realloc_r+0x508>
 4001f60:	008004c4 	movi	r2,19
 4001f64:	11803f2e 	bgeu	r2,r6,4002064 <_realloc_r+0x500>
 4001f68:	a8800017 	ldw	r2,0(r21)
 4001f6c:	b0800215 	stw	r2,8(r22)
 4001f70:	a8800117 	ldw	r2,4(r21)
 4001f74:	b0800315 	stw	r2,12(r22)
 4001f78:	008006c4 	movi	r2,27
 4001f7c:	11803f36 	bltu	r2,r6,400207c <_realloc_r+0x518>
 4001f80:	b0800404 	addi	r2,r22,16
 4001f84:	ad400204 	addi	r21,r21,8
 4001f88:	a8c00017 	ldw	r3,0(r21)
 4001f8c:	10c00015 	stw	r3,0(r2)
 4001f90:	a8c00117 	ldw	r3,4(r21)
 4001f94:	10c00115 	stw	r3,4(r2)
 4001f98:	a8c00217 	ldw	r3,8(r21)
 4001f9c:	10c00215 	stw	r3,8(r2)
 4001fa0:	b447883a 	add	r3,r22,r17
 4001fa4:	bc45c83a 	sub	r2,r23,r17
 4001fa8:	e0c00215 	stw	r3,8(fp)
 4001fac:	10800054 	ori	r2,r2,1
 4001fb0:	18800115 	stw	r2,4(r3)
 4001fb4:	b0800117 	ldw	r2,4(r22)
 4001fb8:	a009883a 	mov	r4,r20
 4001fbc:	1080004c 	andi	r2,r2,1
 4001fc0:	1462b03a 	or	r17,r2,r17
 4001fc4:	b4400115 	stw	r17,4(r22)
 4001fc8:	40036c00 	call	40036c0 <__malloc_unlock>
 4001fcc:	9005883a 	mov	r2,r18
 4001fd0:	003f4006 	br	4001cd4 <_realloc_r+0x170>
 4001fd4:	a8c00217 	ldw	r3,8(r21)
 4001fd8:	90c00215 	stw	r3,8(r18)
 4001fdc:	a8c00317 	ldw	r3,12(r21)
 4001fe0:	90c00315 	stw	r3,12(r18)
 4001fe4:	30801126 	beq	r6,r2,400202c <_realloc_r+0x4c8>
 4001fe8:	90800404 	addi	r2,r18,16
 4001fec:	a8c00404 	addi	r3,r21,16
 4001ff0:	003f1906 	br	4001c58 <_realloc_r+0xf4>
 4001ff4:	90ffff17 	ldw	r3,-4(r18)
 4001ff8:	00bfff04 	movi	r2,-4
 4001ffc:	a825883a 	mov	r18,r21
 4002000:	1884703a 	and	r2,r3,r2
 4002004:	80a1883a 	add	r16,r16,r2
 4002008:	003f2406 	br	4001c9c <_realloc_r+0x138>
 400200c:	a8800217 	ldw	r2,8(r21)
 4002010:	b0800415 	stw	r2,16(r22)
 4002014:	a8800317 	ldw	r2,12(r21)
 4002018:	b0800515 	stw	r2,20(r22)
 400201c:	31000a26 	beq	r6,r4,4002048 <_realloc_r+0x4e4>
 4002020:	b0800604 	addi	r2,r22,24
 4002024:	ad400404 	addi	r21,r21,16
 4002028:	003fa906 	br	4001ed0 <_realloc_r+0x36c>
 400202c:	a9000417 	ldw	r4,16(r21)
 4002030:	90800604 	addi	r2,r18,24
 4002034:	a8c00604 	addi	r3,r21,24
 4002038:	91000415 	stw	r4,16(r18)
 400203c:	a9000517 	ldw	r4,20(r21)
 4002040:	91000515 	stw	r4,20(r18)
 4002044:	003f0406 	br	4001c58 <_realloc_r+0xf4>
 4002048:	a8c00417 	ldw	r3,16(r21)
 400204c:	ad400604 	addi	r21,r21,24
 4002050:	b0800804 	addi	r2,r22,32
 4002054:	b0c00615 	stw	r3,24(r22)
 4002058:	a8ffff17 	ldw	r3,-4(r21)
 400205c:	b0c00715 	stw	r3,28(r22)
 4002060:	003f9b06 	br	4001ed0 <_realloc_r+0x36c>
 4002064:	9005883a 	mov	r2,r18
 4002068:	003fc706 	br	4001f88 <_realloc_r+0x424>
 400206c:	a80b883a 	mov	r5,r21
 4002070:	9009883a 	mov	r4,r18
 4002074:	40018e00 	call	40018e0 <memmove>
 4002078:	003fc906 	br	4001fa0 <_realloc_r+0x43c>
 400207c:	a8800217 	ldw	r2,8(r21)
 4002080:	b0800415 	stw	r2,16(r22)
 4002084:	a8800317 	ldw	r2,12(r21)
 4002088:	b0800515 	stw	r2,20(r22)
 400208c:	31000726 	beq	r6,r4,40020ac <_realloc_r+0x548>
 4002090:	b0800604 	addi	r2,r22,24
 4002094:	ad400404 	addi	r21,r21,16
 4002098:	003fbb06 	br	4001f88 <_realloc_r+0x424>
 400209c:	a009883a 	mov	r4,r20
 40020a0:	40036c00 	call	40036c0 <__malloc_unlock>
 40020a4:	0005883a 	mov	r2,zero
 40020a8:	003f0a06 	br	4001cd4 <_realloc_r+0x170>
 40020ac:	a8c00417 	ldw	r3,16(r21)
 40020b0:	ad400604 	addi	r21,r21,24
 40020b4:	b0800804 	addi	r2,r22,32
 40020b8:	b0c00615 	stw	r3,24(r22)
 40020bc:	a8ffff17 	ldw	r3,-4(r21)
 40020c0:	b0c00715 	stw	r3,28(r22)
 40020c4:	003fb006 	br	4001f88 <_realloc_r+0x424>

040020c8 <_sbrk_r>:
 40020c8:	defffd04 	addi	sp,sp,-12
 40020cc:	dc000015 	stw	r16,0(sp)
 40020d0:	04010074 	movhi	r16,1025
 40020d4:	dc400115 	stw	r17,4(sp)
 40020d8:	8423a004 	addi	r16,r16,-29056
 40020dc:	2023883a 	mov	r17,r4
 40020e0:	2809883a 	mov	r4,r5
 40020e4:	dfc00215 	stw	ra,8(sp)
 40020e8:	80000015 	stw	zero,0(r16)
 40020ec:	40038800 	call	4003880 <sbrk>
 40020f0:	00ffffc4 	movi	r3,-1
 40020f4:	10c00526 	beq	r2,r3,400210c <_sbrk_r+0x44>
 40020f8:	dfc00217 	ldw	ra,8(sp)
 40020fc:	dc400117 	ldw	r17,4(sp)
 4002100:	dc000017 	ldw	r16,0(sp)
 4002104:	dec00304 	addi	sp,sp,12
 4002108:	f800283a 	ret
 400210c:	80c00017 	ldw	r3,0(r16)
 4002110:	183ff926 	beq	r3,zero,40020f8 <_sbrk_r+0x30>
 4002114:	88c00015 	stw	r3,0(r17)
 4002118:	003ff706 	br	40020f8 <_sbrk_r+0x30>

0400211c <__sread>:
 400211c:	defffe04 	addi	sp,sp,-8
 4002120:	dc000015 	stw	r16,0(sp)
 4002124:	2821883a 	mov	r16,r5
 4002128:	2940038f 	ldh	r5,14(r5)
 400212c:	dfc00115 	stw	ra,4(sp)
 4002130:	4002e5c0 	call	4002e5c <_read_r>
 4002134:	10000716 	blt	r2,zero,4002154 <__sread+0x38>
 4002138:	80c01417 	ldw	r3,80(r16)
 400213c:	1887883a 	add	r3,r3,r2
 4002140:	80c01415 	stw	r3,80(r16)
 4002144:	dfc00117 	ldw	ra,4(sp)
 4002148:	dc000017 	ldw	r16,0(sp)
 400214c:	dec00204 	addi	sp,sp,8
 4002150:	f800283a 	ret
 4002154:	80c0030b 	ldhu	r3,12(r16)
 4002158:	18fbffcc 	andi	r3,r3,61439
 400215c:	80c0030d 	sth	r3,12(r16)
 4002160:	dfc00117 	ldw	ra,4(sp)
 4002164:	dc000017 	ldw	r16,0(sp)
 4002168:	dec00204 	addi	sp,sp,8
 400216c:	f800283a 	ret

04002170 <__seofread>:
 4002170:	0005883a 	mov	r2,zero
 4002174:	f800283a 	ret

04002178 <__swrite>:
 4002178:	2880030b 	ldhu	r2,12(r5)
 400217c:	defffb04 	addi	sp,sp,-20
 4002180:	dcc00315 	stw	r19,12(sp)
 4002184:	dc800215 	stw	r18,8(sp)
 4002188:	dc400115 	stw	r17,4(sp)
 400218c:	dc000015 	stw	r16,0(sp)
 4002190:	dfc00415 	stw	ra,16(sp)
 4002194:	10c0400c 	andi	r3,r2,256
 4002198:	2821883a 	mov	r16,r5
 400219c:	2023883a 	mov	r17,r4
 40021a0:	3025883a 	mov	r18,r6
 40021a4:	3827883a 	mov	r19,r7
 40021a8:	18000526 	beq	r3,zero,40021c0 <__swrite+0x48>
 40021ac:	2940038f 	ldh	r5,14(r5)
 40021b0:	01c00084 	movi	r7,2
 40021b4:	000d883a 	mov	r6,zero
 40021b8:	4002c400 	call	4002c40 <_lseek_r>
 40021bc:	8080030b 	ldhu	r2,12(r16)
 40021c0:	8140038f 	ldh	r5,14(r16)
 40021c4:	10bbffcc 	andi	r2,r2,61439
 40021c8:	980f883a 	mov	r7,r19
 40021cc:	900d883a 	mov	r6,r18
 40021d0:	8809883a 	mov	r4,r17
 40021d4:	8080030d 	sth	r2,12(r16)
 40021d8:	dfc00417 	ldw	ra,16(sp)
 40021dc:	dcc00317 	ldw	r19,12(sp)
 40021e0:	dc800217 	ldw	r18,8(sp)
 40021e4:	dc400117 	ldw	r17,4(sp)
 40021e8:	dc000017 	ldw	r16,0(sp)
 40021ec:	dec00504 	addi	sp,sp,20
 40021f0:	40022581 	jmpi	4002258 <_write_r>

040021f4 <__sseek>:
 40021f4:	defffe04 	addi	sp,sp,-8
 40021f8:	dc000015 	stw	r16,0(sp)
 40021fc:	2821883a 	mov	r16,r5
 4002200:	2940038f 	ldh	r5,14(r5)
 4002204:	dfc00115 	stw	ra,4(sp)
 4002208:	4002c400 	call	4002c40 <_lseek_r>
 400220c:	00ffffc4 	movi	r3,-1
 4002210:	10c00826 	beq	r2,r3,4002234 <__sseek+0x40>
 4002214:	80c0030b 	ldhu	r3,12(r16)
 4002218:	80801415 	stw	r2,80(r16)
 400221c:	18c40014 	ori	r3,r3,4096
 4002220:	80c0030d 	sth	r3,12(r16)
 4002224:	dfc00117 	ldw	ra,4(sp)
 4002228:	dc000017 	ldw	r16,0(sp)
 400222c:	dec00204 	addi	sp,sp,8
 4002230:	f800283a 	ret
 4002234:	80c0030b 	ldhu	r3,12(r16)
 4002238:	18fbffcc 	andi	r3,r3,61439
 400223c:	80c0030d 	sth	r3,12(r16)
 4002240:	dfc00117 	ldw	ra,4(sp)
 4002244:	dc000017 	ldw	r16,0(sp)
 4002248:	dec00204 	addi	sp,sp,8
 400224c:	f800283a 	ret

04002250 <__sclose>:
 4002250:	2940038f 	ldh	r5,14(r5)
 4002254:	400240c1 	jmpi	400240c <_close_r>

04002258 <_write_r>:
 4002258:	defffd04 	addi	sp,sp,-12
 400225c:	2805883a 	mov	r2,r5
 4002260:	dc000015 	stw	r16,0(sp)
 4002264:	04010074 	movhi	r16,1025
 4002268:	dc400115 	stw	r17,4(sp)
 400226c:	300b883a 	mov	r5,r6
 4002270:	8423a004 	addi	r16,r16,-29056
 4002274:	2023883a 	mov	r17,r4
 4002278:	380d883a 	mov	r6,r7
 400227c:	1009883a 	mov	r4,r2
 4002280:	dfc00215 	stw	ra,8(sp)
 4002284:	80000015 	stw	zero,0(r16)
 4002288:	400399c0 	call	400399c <write>
 400228c:	00ffffc4 	movi	r3,-1
 4002290:	10c00526 	beq	r2,r3,40022a8 <_write_r+0x50>
 4002294:	dfc00217 	ldw	ra,8(sp)
 4002298:	dc400117 	ldw	r17,4(sp)
 400229c:	dc000017 	ldw	r16,0(sp)
 40022a0:	dec00304 	addi	sp,sp,12
 40022a4:	f800283a 	ret
 40022a8:	80c00017 	ldw	r3,0(r16)
 40022ac:	183ff926 	beq	r3,zero,4002294 <_write_r+0x3c>
 40022b0:	88c00015 	stw	r3,0(r17)
 40022b4:	003ff706 	br	4002294 <_write_r+0x3c>

040022b8 <__swsetup_r>:
 40022b8:	00810034 	movhi	r2,1024
 40022bc:	defffd04 	addi	sp,sp,-12
 40022c0:	109cf504 	addi	r2,r2,29652
 40022c4:	dc400115 	stw	r17,4(sp)
 40022c8:	2023883a 	mov	r17,r4
 40022cc:	11000017 	ldw	r4,0(r2)
 40022d0:	dc000015 	stw	r16,0(sp)
 40022d4:	dfc00215 	stw	ra,8(sp)
 40022d8:	2821883a 	mov	r16,r5
 40022dc:	20000226 	beq	r4,zero,40022e8 <__swsetup_r+0x30>
 40022e0:	20800e17 	ldw	r2,56(r4)
 40022e4:	10003126 	beq	r2,zero,40023ac <__swsetup_r+0xf4>
 40022e8:	8080030b 	ldhu	r2,12(r16)
 40022ec:	10c0020c 	andi	r3,r2,8
 40022f0:	1009883a 	mov	r4,r2
 40022f4:	18000f26 	beq	r3,zero,4002334 <__swsetup_r+0x7c>
 40022f8:	80c00417 	ldw	r3,16(r16)
 40022fc:	18001526 	beq	r3,zero,4002354 <__swsetup_r+0x9c>
 4002300:	1100004c 	andi	r4,r2,1
 4002304:	20001c1e 	bne	r4,zero,4002378 <__swsetup_r+0xc0>
 4002308:	1080008c 	andi	r2,r2,2
 400230c:	1000291e 	bne	r2,zero,40023b4 <__swsetup_r+0xfc>
 4002310:	80800517 	ldw	r2,20(r16)
 4002314:	80800215 	stw	r2,8(r16)
 4002318:	18001c26 	beq	r3,zero,400238c <__swsetup_r+0xd4>
 400231c:	0005883a 	mov	r2,zero
 4002320:	dfc00217 	ldw	ra,8(sp)
 4002324:	dc400117 	ldw	r17,4(sp)
 4002328:	dc000017 	ldw	r16,0(sp)
 400232c:	dec00304 	addi	sp,sp,12
 4002330:	f800283a 	ret
 4002334:	2080040c 	andi	r2,r4,16
 4002338:	10002e26 	beq	r2,zero,40023f4 <__swsetup_r+0x13c>
 400233c:	2080010c 	andi	r2,r4,4
 4002340:	10001e1e 	bne	r2,zero,40023bc <__swsetup_r+0x104>
 4002344:	80c00417 	ldw	r3,16(r16)
 4002348:	20800214 	ori	r2,r4,8
 400234c:	8080030d 	sth	r2,12(r16)
 4002350:	183feb1e 	bne	r3,zero,4002300 <__swsetup_r+0x48>
 4002354:	1100a00c 	andi	r4,r2,640
 4002358:	01408004 	movi	r5,512
 400235c:	217fe826 	beq	r4,r5,4002300 <__swsetup_r+0x48>
 4002360:	800b883a 	mov	r5,r16
 4002364:	8809883a 	mov	r4,r17
 4002368:	4002ca00 	call	4002ca0 <__smakebuf_r>
 400236c:	8080030b 	ldhu	r2,12(r16)
 4002370:	80c00417 	ldw	r3,16(r16)
 4002374:	003fe206 	br	4002300 <__swsetup_r+0x48>
 4002378:	80800517 	ldw	r2,20(r16)
 400237c:	80000215 	stw	zero,8(r16)
 4002380:	0085c83a 	sub	r2,zero,r2
 4002384:	80800615 	stw	r2,24(r16)
 4002388:	183fe41e 	bne	r3,zero,400231c <__swsetup_r+0x64>
 400238c:	80c0030b 	ldhu	r3,12(r16)
 4002390:	0005883a 	mov	r2,zero
 4002394:	1900200c 	andi	r4,r3,128
 4002398:	203fe126 	beq	r4,zero,4002320 <__swsetup_r+0x68>
 400239c:	18c01014 	ori	r3,r3,64
 40023a0:	80c0030d 	sth	r3,12(r16)
 40023a4:	00bfffc4 	movi	r2,-1
 40023a8:	003fdd06 	br	4002320 <__swsetup_r+0x68>
 40023ac:	40008140 	call	4000814 <__sinit>
 40023b0:	003fcd06 	br	40022e8 <__swsetup_r+0x30>
 40023b4:	0005883a 	mov	r2,zero
 40023b8:	003fd606 	br	4002314 <__swsetup_r+0x5c>
 40023bc:	81400c17 	ldw	r5,48(r16)
 40023c0:	28000626 	beq	r5,zero,40023dc <__swsetup_r+0x124>
 40023c4:	80801004 	addi	r2,r16,64
 40023c8:	28800326 	beq	r5,r2,40023d8 <__swsetup_r+0x120>
 40023cc:	8809883a 	mov	r4,r17
 40023d0:	40029300 	call	4002930 <_free_r>
 40023d4:	8100030b 	ldhu	r4,12(r16)
 40023d8:	80000c15 	stw	zero,48(r16)
 40023dc:	80c00417 	ldw	r3,16(r16)
 40023e0:	00bff6c4 	movi	r2,-37
 40023e4:	1108703a 	and	r4,r2,r4
 40023e8:	80000115 	stw	zero,4(r16)
 40023ec:	80c00015 	stw	r3,0(r16)
 40023f0:	003fd506 	br	4002348 <__swsetup_r+0x90>
 40023f4:	00800244 	movi	r2,9
 40023f8:	88800015 	stw	r2,0(r17)
 40023fc:	20801014 	ori	r2,r4,64
 4002400:	8080030d 	sth	r2,12(r16)
 4002404:	00bfffc4 	movi	r2,-1
 4002408:	003fc506 	br	4002320 <__swsetup_r+0x68>

0400240c <_close_r>:
 400240c:	defffd04 	addi	sp,sp,-12
 4002410:	dc000015 	stw	r16,0(sp)
 4002414:	04010074 	movhi	r16,1025
 4002418:	dc400115 	stw	r17,4(sp)
 400241c:	8423a004 	addi	r16,r16,-29056
 4002420:	2023883a 	mov	r17,r4
 4002424:	2809883a 	mov	r4,r5
 4002428:	dfc00215 	stw	ra,8(sp)
 400242c:	80000015 	stw	zero,0(r16)
 4002430:	400315c0 	call	400315c <close>
 4002434:	00ffffc4 	movi	r3,-1
 4002438:	10c00526 	beq	r2,r3,4002450 <_close_r+0x44>
 400243c:	dfc00217 	ldw	ra,8(sp)
 4002440:	dc400117 	ldw	r17,4(sp)
 4002444:	dc000017 	ldw	r16,0(sp)
 4002448:	dec00304 	addi	sp,sp,12
 400244c:	f800283a 	ret
 4002450:	80c00017 	ldw	r3,0(r16)
 4002454:	183ff926 	beq	r3,zero,400243c <_close_r+0x30>
 4002458:	88c00015 	stw	r3,0(r17)
 400245c:	003ff706 	br	400243c <_close_r+0x30>

04002460 <_fclose_r>:
 4002460:	28003926 	beq	r5,zero,4002548 <_fclose_r+0xe8>
 4002464:	defffc04 	addi	sp,sp,-16
 4002468:	dc400115 	stw	r17,4(sp)
 400246c:	dc000015 	stw	r16,0(sp)
 4002470:	dfc00315 	stw	ra,12(sp)
 4002474:	dc800215 	stw	r18,8(sp)
 4002478:	2023883a 	mov	r17,r4
 400247c:	2821883a 	mov	r16,r5
 4002480:	20000226 	beq	r4,zero,400248c <_fclose_r+0x2c>
 4002484:	20800e17 	ldw	r2,56(r4)
 4002488:	10002726 	beq	r2,zero,4002528 <_fclose_r+0xc8>
 400248c:	8080030f 	ldh	r2,12(r16)
 4002490:	1000071e 	bne	r2,zero,40024b0 <_fclose_r+0x50>
 4002494:	0005883a 	mov	r2,zero
 4002498:	dfc00317 	ldw	ra,12(sp)
 400249c:	dc800217 	ldw	r18,8(sp)
 40024a0:	dc400117 	ldw	r17,4(sp)
 40024a4:	dc000017 	ldw	r16,0(sp)
 40024a8:	dec00404 	addi	sp,sp,16
 40024ac:	f800283a 	ret
 40024b0:	800b883a 	mov	r5,r16
 40024b4:	8809883a 	mov	r4,r17
 40024b8:	40025640 	call	4002564 <__sflush_r>
 40024bc:	1025883a 	mov	r18,r2
 40024c0:	80800b17 	ldw	r2,44(r16)
 40024c4:	10000426 	beq	r2,zero,40024d8 <_fclose_r+0x78>
 40024c8:	81400717 	ldw	r5,28(r16)
 40024cc:	8809883a 	mov	r4,r17
 40024d0:	103ee83a 	callr	r2
 40024d4:	10001616 	blt	r2,zero,4002530 <_fclose_r+0xd0>
 40024d8:	8080030b 	ldhu	r2,12(r16)
 40024dc:	1080200c 	andi	r2,r2,128
 40024e0:	1000151e 	bne	r2,zero,4002538 <_fclose_r+0xd8>
 40024e4:	81400c17 	ldw	r5,48(r16)
 40024e8:	28000526 	beq	r5,zero,4002500 <_fclose_r+0xa0>
 40024ec:	80801004 	addi	r2,r16,64
 40024f0:	28800226 	beq	r5,r2,40024fc <_fclose_r+0x9c>
 40024f4:	8809883a 	mov	r4,r17
 40024f8:	40029300 	call	4002930 <_free_r>
 40024fc:	80000c15 	stw	zero,48(r16)
 4002500:	81401117 	ldw	r5,68(r16)
 4002504:	28000326 	beq	r5,zero,4002514 <_fclose_r+0xb4>
 4002508:	8809883a 	mov	r4,r17
 400250c:	40029300 	call	4002930 <_free_r>
 4002510:	80001115 	stw	zero,68(r16)
 4002514:	40008240 	call	4000824 <__sfp_lock_acquire>
 4002518:	8000030d 	sth	zero,12(r16)
 400251c:	40008280 	call	4000828 <__sfp_lock_release>
 4002520:	9005883a 	mov	r2,r18
 4002524:	003fdc06 	br	4002498 <_fclose_r+0x38>
 4002528:	40008140 	call	4000814 <__sinit>
 400252c:	003fd706 	br	400248c <_fclose_r+0x2c>
 4002530:	04bfffc4 	movi	r18,-1
 4002534:	003fe806 	br	40024d8 <_fclose_r+0x78>
 4002538:	81400417 	ldw	r5,16(r16)
 400253c:	8809883a 	mov	r4,r17
 4002540:	40029300 	call	4002930 <_free_r>
 4002544:	003fe706 	br	40024e4 <_fclose_r+0x84>
 4002548:	0005883a 	mov	r2,zero
 400254c:	f800283a 	ret

04002550 <fclose>:
 4002550:	00810034 	movhi	r2,1024
 4002554:	109cf504 	addi	r2,r2,29652
 4002558:	200b883a 	mov	r5,r4
 400255c:	11000017 	ldw	r4,0(r2)
 4002560:	40024601 	jmpi	4002460 <_fclose_r>

04002564 <__sflush_r>:
 4002564:	2880030b 	ldhu	r2,12(r5)
 4002568:	defffb04 	addi	sp,sp,-20
 400256c:	dcc00315 	stw	r19,12(sp)
 4002570:	dc400115 	stw	r17,4(sp)
 4002574:	dfc00415 	stw	ra,16(sp)
 4002578:	dc800215 	stw	r18,8(sp)
 400257c:	dc000015 	stw	r16,0(sp)
 4002580:	10c0020c 	andi	r3,r2,8
 4002584:	2823883a 	mov	r17,r5
 4002588:	2027883a 	mov	r19,r4
 400258c:	1800311e 	bne	r3,zero,4002654 <__sflush_r+0xf0>
 4002590:	28c00117 	ldw	r3,4(r5)
 4002594:	10820014 	ori	r2,r2,2048
 4002598:	2880030d 	sth	r2,12(r5)
 400259c:	00c04b0e 	bge	zero,r3,40026cc <__sflush_r+0x168>
 40025a0:	8a000a17 	ldw	r8,40(r17)
 40025a4:	40002326 	beq	r8,zero,4002634 <__sflush_r+0xd0>
 40025a8:	9c000017 	ldw	r16,0(r19)
 40025ac:	10c4000c 	andi	r3,r2,4096
 40025b0:	98000015 	stw	zero,0(r19)
 40025b4:	18004826 	beq	r3,zero,40026d8 <__sflush_r+0x174>
 40025b8:	89801417 	ldw	r6,80(r17)
 40025bc:	10c0010c 	andi	r3,r2,4
 40025c0:	18000626 	beq	r3,zero,40025dc <__sflush_r+0x78>
 40025c4:	88c00117 	ldw	r3,4(r17)
 40025c8:	88800c17 	ldw	r2,48(r17)
 40025cc:	30cdc83a 	sub	r6,r6,r3
 40025d0:	10000226 	beq	r2,zero,40025dc <__sflush_r+0x78>
 40025d4:	88800f17 	ldw	r2,60(r17)
 40025d8:	308dc83a 	sub	r6,r6,r2
 40025dc:	89400717 	ldw	r5,28(r17)
 40025e0:	000f883a 	mov	r7,zero
 40025e4:	9809883a 	mov	r4,r19
 40025e8:	403ee83a 	callr	r8
 40025ec:	00ffffc4 	movi	r3,-1
 40025f0:	10c04426 	beq	r2,r3,4002704 <__sflush_r+0x1a0>
 40025f4:	88c0030b 	ldhu	r3,12(r17)
 40025f8:	89000417 	ldw	r4,16(r17)
 40025fc:	88000115 	stw	zero,4(r17)
 4002600:	197dffcc 	andi	r5,r3,63487
 4002604:	8940030d 	sth	r5,12(r17)
 4002608:	89000015 	stw	r4,0(r17)
 400260c:	18c4000c 	andi	r3,r3,4096
 4002610:	18002c1e 	bne	r3,zero,40026c4 <__sflush_r+0x160>
 4002614:	89400c17 	ldw	r5,48(r17)
 4002618:	9c000015 	stw	r16,0(r19)
 400261c:	28000526 	beq	r5,zero,4002634 <__sflush_r+0xd0>
 4002620:	88801004 	addi	r2,r17,64
 4002624:	28800226 	beq	r5,r2,4002630 <__sflush_r+0xcc>
 4002628:	9809883a 	mov	r4,r19
 400262c:	40029300 	call	4002930 <_free_r>
 4002630:	88000c15 	stw	zero,48(r17)
 4002634:	0005883a 	mov	r2,zero
 4002638:	dfc00417 	ldw	ra,16(sp)
 400263c:	dcc00317 	ldw	r19,12(sp)
 4002640:	dc800217 	ldw	r18,8(sp)
 4002644:	dc400117 	ldw	r17,4(sp)
 4002648:	dc000017 	ldw	r16,0(sp)
 400264c:	dec00504 	addi	sp,sp,20
 4002650:	f800283a 	ret
 4002654:	2c800417 	ldw	r18,16(r5)
 4002658:	903ff626 	beq	r18,zero,4002634 <__sflush_r+0xd0>
 400265c:	2c000017 	ldw	r16,0(r5)
 4002660:	108000cc 	andi	r2,r2,3
 4002664:	2c800015 	stw	r18,0(r5)
 4002668:	84a1c83a 	sub	r16,r16,r18
 400266c:	1000131e 	bne	r2,zero,40026bc <__sflush_r+0x158>
 4002670:	28800517 	ldw	r2,20(r5)
 4002674:	88800215 	stw	r2,8(r17)
 4002678:	04000316 	blt	zero,r16,4002688 <__sflush_r+0x124>
 400267c:	003fed06 	br	4002634 <__sflush_r+0xd0>
 4002680:	90a5883a 	add	r18,r18,r2
 4002684:	043feb0e 	bge	zero,r16,4002634 <__sflush_r+0xd0>
 4002688:	88800917 	ldw	r2,36(r17)
 400268c:	89400717 	ldw	r5,28(r17)
 4002690:	800f883a 	mov	r7,r16
 4002694:	900d883a 	mov	r6,r18
 4002698:	9809883a 	mov	r4,r19
 400269c:	103ee83a 	callr	r2
 40026a0:	80a1c83a 	sub	r16,r16,r2
 40026a4:	00bff616 	blt	zero,r2,4002680 <__sflush_r+0x11c>
 40026a8:	88c0030b 	ldhu	r3,12(r17)
 40026ac:	00bfffc4 	movi	r2,-1
 40026b0:	18c01014 	ori	r3,r3,64
 40026b4:	88c0030d 	sth	r3,12(r17)
 40026b8:	003fdf06 	br	4002638 <__sflush_r+0xd4>
 40026bc:	0005883a 	mov	r2,zero
 40026c0:	003fec06 	br	4002674 <__sflush_r+0x110>
 40026c4:	88801415 	stw	r2,80(r17)
 40026c8:	003fd206 	br	4002614 <__sflush_r+0xb0>
 40026cc:	28c00f17 	ldw	r3,60(r5)
 40026d0:	00ffb316 	blt	zero,r3,40025a0 <__sflush_r+0x3c>
 40026d4:	003fd706 	br	4002634 <__sflush_r+0xd0>
 40026d8:	89400717 	ldw	r5,28(r17)
 40026dc:	000d883a 	mov	r6,zero
 40026e0:	01c00044 	movi	r7,1
 40026e4:	9809883a 	mov	r4,r19
 40026e8:	403ee83a 	callr	r8
 40026ec:	100d883a 	mov	r6,r2
 40026f0:	00bfffc4 	movi	r2,-1
 40026f4:	30801426 	beq	r6,r2,4002748 <__sflush_r+0x1e4>
 40026f8:	8880030b 	ldhu	r2,12(r17)
 40026fc:	8a000a17 	ldw	r8,40(r17)
 4002700:	003fae06 	br	40025bc <__sflush_r+0x58>
 4002704:	98c00017 	ldw	r3,0(r19)
 4002708:	183fba26 	beq	r3,zero,40025f4 <__sflush_r+0x90>
 400270c:	01000744 	movi	r4,29
 4002710:	19000626 	beq	r3,r4,400272c <__sflush_r+0x1c8>
 4002714:	01000584 	movi	r4,22
 4002718:	19000426 	beq	r3,r4,400272c <__sflush_r+0x1c8>
 400271c:	88c0030b 	ldhu	r3,12(r17)
 4002720:	18c01014 	ori	r3,r3,64
 4002724:	88c0030d 	sth	r3,12(r17)
 4002728:	003fc306 	br	4002638 <__sflush_r+0xd4>
 400272c:	8880030b 	ldhu	r2,12(r17)
 4002730:	88c00417 	ldw	r3,16(r17)
 4002734:	88000115 	stw	zero,4(r17)
 4002738:	10bdffcc 	andi	r2,r2,63487
 400273c:	8880030d 	sth	r2,12(r17)
 4002740:	88c00015 	stw	r3,0(r17)
 4002744:	003fb306 	br	4002614 <__sflush_r+0xb0>
 4002748:	98800017 	ldw	r2,0(r19)
 400274c:	103fea26 	beq	r2,zero,40026f8 <__sflush_r+0x194>
 4002750:	00c00744 	movi	r3,29
 4002754:	10c00226 	beq	r2,r3,4002760 <__sflush_r+0x1fc>
 4002758:	00c00584 	movi	r3,22
 400275c:	10c0031e 	bne	r2,r3,400276c <__sflush_r+0x208>
 4002760:	9c000015 	stw	r16,0(r19)
 4002764:	0005883a 	mov	r2,zero
 4002768:	003fb306 	br	4002638 <__sflush_r+0xd4>
 400276c:	88c0030b 	ldhu	r3,12(r17)
 4002770:	3005883a 	mov	r2,r6
 4002774:	18c01014 	ori	r3,r3,64
 4002778:	88c0030d 	sth	r3,12(r17)
 400277c:	003fae06 	br	4002638 <__sflush_r+0xd4>

04002780 <_fflush_r>:
 4002780:	defffd04 	addi	sp,sp,-12
 4002784:	dc000115 	stw	r16,4(sp)
 4002788:	dfc00215 	stw	ra,8(sp)
 400278c:	2021883a 	mov	r16,r4
 4002790:	20000226 	beq	r4,zero,400279c <_fflush_r+0x1c>
 4002794:	20800e17 	ldw	r2,56(r4)
 4002798:	10000c26 	beq	r2,zero,40027cc <_fflush_r+0x4c>
 400279c:	2880030f 	ldh	r2,12(r5)
 40027a0:	1000051e 	bne	r2,zero,40027b8 <_fflush_r+0x38>
 40027a4:	0005883a 	mov	r2,zero
 40027a8:	dfc00217 	ldw	ra,8(sp)
 40027ac:	dc000117 	ldw	r16,4(sp)
 40027b0:	dec00304 	addi	sp,sp,12
 40027b4:	f800283a 	ret
 40027b8:	8009883a 	mov	r4,r16
 40027bc:	dfc00217 	ldw	ra,8(sp)
 40027c0:	dc000117 	ldw	r16,4(sp)
 40027c4:	dec00304 	addi	sp,sp,12
 40027c8:	40025641 	jmpi	4002564 <__sflush_r>
 40027cc:	d9400015 	stw	r5,0(sp)
 40027d0:	40008140 	call	4000814 <__sinit>
 40027d4:	d9400017 	ldw	r5,0(sp)
 40027d8:	003ff006 	br	400279c <_fflush_r+0x1c>

040027dc <fflush>:
 40027dc:	20000526 	beq	r4,zero,40027f4 <fflush+0x18>
 40027e0:	00810034 	movhi	r2,1024
 40027e4:	109cf504 	addi	r2,r2,29652
 40027e8:	200b883a 	mov	r5,r4
 40027ec:	11000017 	ldw	r4,0(r2)
 40027f0:	40027801 	jmpi	4002780 <_fflush_r>
 40027f4:	00810034 	movhi	r2,1024
 40027f8:	109cf404 	addi	r2,r2,29648
 40027fc:	11000017 	ldw	r4,0(r2)
 4002800:	01410034 	movhi	r5,1024
 4002804:	2949e004 	addi	r5,r5,10112
 4002808:	4000de41 	jmpi	4000de4 <_fwalk_reent>

0400280c <_malloc_trim_r>:
 400280c:	defffb04 	addi	sp,sp,-20
 4002810:	dcc00315 	stw	r19,12(sp)
 4002814:	04c10034 	movhi	r19,1024
 4002818:	dc800215 	stw	r18,8(sp)
 400281c:	dc400115 	stw	r17,4(sp)
 4002820:	dc000015 	stw	r16,0(sp)
 4002824:	dfc00415 	stw	ra,16(sp)
 4002828:	2821883a 	mov	r16,r5
 400282c:	9cd77004 	addi	r19,r19,24000
 4002830:	2025883a 	mov	r18,r4
 4002834:	400369c0 	call	400369c <__malloc_lock>
 4002838:	98800217 	ldw	r2,8(r19)
 400283c:	14400117 	ldw	r17,4(r2)
 4002840:	00bfff04 	movi	r2,-4
 4002844:	88a2703a 	and	r17,r17,r2
 4002848:	8c21c83a 	sub	r16,r17,r16
 400284c:	8403fbc4 	addi	r16,r16,4079
 4002850:	8020d33a 	srli	r16,r16,12
 4002854:	0083ffc4 	movi	r2,4095
 4002858:	843fffc4 	addi	r16,r16,-1
 400285c:	8020933a 	slli	r16,r16,12
 4002860:	1400060e 	bge	r2,r16,400287c <_malloc_trim_r+0x70>
 4002864:	000b883a 	mov	r5,zero
 4002868:	9009883a 	mov	r4,r18
 400286c:	40020c80 	call	40020c8 <_sbrk_r>
 4002870:	98c00217 	ldw	r3,8(r19)
 4002874:	1c47883a 	add	r3,r3,r17
 4002878:	10c00a26 	beq	r2,r3,40028a4 <_malloc_trim_r+0x98>
 400287c:	9009883a 	mov	r4,r18
 4002880:	40036c00 	call	40036c0 <__malloc_unlock>
 4002884:	0005883a 	mov	r2,zero
 4002888:	dfc00417 	ldw	ra,16(sp)
 400288c:	dcc00317 	ldw	r19,12(sp)
 4002890:	dc800217 	ldw	r18,8(sp)
 4002894:	dc400117 	ldw	r17,4(sp)
 4002898:	dc000017 	ldw	r16,0(sp)
 400289c:	dec00504 	addi	sp,sp,20
 40028a0:	f800283a 	ret
 40028a4:	040bc83a 	sub	r5,zero,r16
 40028a8:	9009883a 	mov	r4,r18
 40028ac:	40020c80 	call	40020c8 <_sbrk_r>
 40028b0:	00ffffc4 	movi	r3,-1
 40028b4:	10c00d26 	beq	r2,r3,40028ec <_malloc_trim_r+0xe0>
 40028b8:	00c10074 	movhi	r3,1025
 40028bc:	18e3a804 	addi	r3,r3,-29024
 40028c0:	18800017 	ldw	r2,0(r3)
 40028c4:	99000217 	ldw	r4,8(r19)
 40028c8:	8c23c83a 	sub	r17,r17,r16
 40028cc:	8c400054 	ori	r17,r17,1
 40028d0:	1421c83a 	sub	r16,r2,r16
 40028d4:	24400115 	stw	r17,4(r4)
 40028d8:	9009883a 	mov	r4,r18
 40028dc:	1c000015 	stw	r16,0(r3)
 40028e0:	40036c00 	call	40036c0 <__malloc_unlock>
 40028e4:	00800044 	movi	r2,1
 40028e8:	003fe706 	br	4002888 <_malloc_trim_r+0x7c>
 40028ec:	000b883a 	mov	r5,zero
 40028f0:	9009883a 	mov	r4,r18
 40028f4:	40020c80 	call	40020c8 <_sbrk_r>
 40028f8:	99000217 	ldw	r4,8(r19)
 40028fc:	014003c4 	movi	r5,15
 4002900:	1107c83a 	sub	r3,r2,r4
 4002904:	28ffdd0e 	bge	r5,r3,400287c <_malloc_trim_r+0x70>
 4002908:	01410034 	movhi	r5,1024
 400290c:	295cf604 	addi	r5,r5,29656
 4002910:	29400017 	ldw	r5,0(r5)
 4002914:	18c00054 	ori	r3,r3,1
 4002918:	20c00115 	stw	r3,4(r4)
 400291c:	00c10074 	movhi	r3,1025
 4002920:	1145c83a 	sub	r2,r2,r5
 4002924:	18e3a804 	addi	r3,r3,-29024
 4002928:	18800015 	stw	r2,0(r3)
 400292c:	003fd306 	br	400287c <_malloc_trim_r+0x70>

04002930 <_free_r>:
 4002930:	28004126 	beq	r5,zero,4002a38 <_free_r+0x108>
 4002934:	defffd04 	addi	sp,sp,-12
 4002938:	dc400115 	stw	r17,4(sp)
 400293c:	dc000015 	stw	r16,0(sp)
 4002940:	2023883a 	mov	r17,r4
 4002944:	2821883a 	mov	r16,r5
 4002948:	dfc00215 	stw	ra,8(sp)
 400294c:	400369c0 	call	400369c <__malloc_lock>
 4002950:	81ffff17 	ldw	r7,-4(r16)
 4002954:	00bfff84 	movi	r2,-2
 4002958:	01010034 	movhi	r4,1024
 400295c:	81bffe04 	addi	r6,r16,-8
 4002960:	3884703a 	and	r2,r7,r2
 4002964:	21177004 	addi	r4,r4,24000
 4002968:	308b883a 	add	r5,r6,r2
 400296c:	2a400117 	ldw	r9,4(r5)
 4002970:	22000217 	ldw	r8,8(r4)
 4002974:	00ffff04 	movi	r3,-4
 4002978:	48c6703a 	and	r3,r9,r3
 400297c:	2a005726 	beq	r5,r8,4002adc <_free_r+0x1ac>
 4002980:	28c00115 	stw	r3,4(r5)
 4002984:	39c0004c 	andi	r7,r7,1
 4002988:	3800091e 	bne	r7,zero,40029b0 <_free_r+0x80>
 400298c:	823ffe17 	ldw	r8,-8(r16)
 4002990:	22400204 	addi	r9,r4,8
 4002994:	320dc83a 	sub	r6,r6,r8
 4002998:	31c00217 	ldw	r7,8(r6)
 400299c:	1205883a 	add	r2,r2,r8
 40029a0:	3a406526 	beq	r7,r9,4002b38 <_free_r+0x208>
 40029a4:	32000317 	ldw	r8,12(r6)
 40029a8:	3a000315 	stw	r8,12(r7)
 40029ac:	41c00215 	stw	r7,8(r8)
 40029b0:	28cf883a 	add	r7,r5,r3
 40029b4:	39c00117 	ldw	r7,4(r7)
 40029b8:	39c0004c 	andi	r7,r7,1
 40029bc:	38003a26 	beq	r7,zero,4002aa8 <_free_r+0x178>
 40029c0:	10c00054 	ori	r3,r2,1
 40029c4:	30c00115 	stw	r3,4(r6)
 40029c8:	3087883a 	add	r3,r6,r2
 40029cc:	18800015 	stw	r2,0(r3)
 40029d0:	00c07fc4 	movi	r3,511
 40029d4:	18801936 	bltu	r3,r2,4002a3c <_free_r+0x10c>
 40029d8:	1004d0fa 	srli	r2,r2,3
 40029dc:	01c00044 	movi	r7,1
 40029e0:	21400117 	ldw	r5,4(r4)
 40029e4:	10c00044 	addi	r3,r2,1
 40029e8:	18c7883a 	add	r3,r3,r3
 40029ec:	1005d0ba 	srai	r2,r2,2
 40029f0:	18c7883a 	add	r3,r3,r3
 40029f4:	18c7883a 	add	r3,r3,r3
 40029f8:	1907883a 	add	r3,r3,r4
 40029fc:	3884983a 	sll	r2,r7,r2
 4002a00:	19c00017 	ldw	r7,0(r3)
 4002a04:	1a3ffe04 	addi	r8,r3,-8
 4002a08:	1144b03a 	or	r2,r2,r5
 4002a0c:	32000315 	stw	r8,12(r6)
 4002a10:	31c00215 	stw	r7,8(r6)
 4002a14:	20800115 	stw	r2,4(r4)
 4002a18:	19800015 	stw	r6,0(r3)
 4002a1c:	39800315 	stw	r6,12(r7)
 4002a20:	8809883a 	mov	r4,r17
 4002a24:	dfc00217 	ldw	ra,8(sp)
 4002a28:	dc400117 	ldw	r17,4(sp)
 4002a2c:	dc000017 	ldw	r16,0(sp)
 4002a30:	dec00304 	addi	sp,sp,12
 4002a34:	40036c01 	jmpi	40036c0 <__malloc_unlock>
 4002a38:	f800283a 	ret
 4002a3c:	100ad27a 	srli	r5,r2,9
 4002a40:	00c00104 	movi	r3,4
 4002a44:	19404a36 	bltu	r3,r5,4002b70 <_free_r+0x240>
 4002a48:	100ad1ba 	srli	r5,r2,6
 4002a4c:	28c00e44 	addi	r3,r5,57
 4002a50:	18c7883a 	add	r3,r3,r3
 4002a54:	29400e04 	addi	r5,r5,56
 4002a58:	18c7883a 	add	r3,r3,r3
 4002a5c:	18c7883a 	add	r3,r3,r3
 4002a60:	1909883a 	add	r4,r3,r4
 4002a64:	20c00017 	ldw	r3,0(r4)
 4002a68:	01c10034 	movhi	r7,1024
 4002a6c:	213ffe04 	addi	r4,r4,-8
 4002a70:	39d77004 	addi	r7,r7,24000
 4002a74:	20c04426 	beq	r4,r3,4002b88 <_free_r+0x258>
 4002a78:	01ffff04 	movi	r7,-4
 4002a7c:	19400117 	ldw	r5,4(r3)
 4002a80:	29ca703a 	and	r5,r5,r7
 4002a84:	1140022e 	bgeu	r2,r5,4002a90 <_free_r+0x160>
 4002a88:	18c00217 	ldw	r3,8(r3)
 4002a8c:	20fffb1e 	bne	r4,r3,4002a7c <_free_r+0x14c>
 4002a90:	19000317 	ldw	r4,12(r3)
 4002a94:	31000315 	stw	r4,12(r6)
 4002a98:	30c00215 	stw	r3,8(r6)
 4002a9c:	21800215 	stw	r6,8(r4)
 4002aa0:	19800315 	stw	r6,12(r3)
 4002aa4:	003fde06 	br	4002a20 <_free_r+0xf0>
 4002aa8:	29c00217 	ldw	r7,8(r5)
 4002aac:	10c5883a 	add	r2,r2,r3
 4002ab0:	00c10034 	movhi	r3,1024
 4002ab4:	18d77204 	addi	r3,r3,24008
 4002ab8:	38c03b26 	beq	r7,r3,4002ba8 <_free_r+0x278>
 4002abc:	2a000317 	ldw	r8,12(r5)
 4002ac0:	11400054 	ori	r5,r2,1
 4002ac4:	3087883a 	add	r3,r6,r2
 4002ac8:	3a000315 	stw	r8,12(r7)
 4002acc:	41c00215 	stw	r7,8(r8)
 4002ad0:	31400115 	stw	r5,4(r6)
 4002ad4:	18800015 	stw	r2,0(r3)
 4002ad8:	003fbd06 	br	40029d0 <_free_r+0xa0>
 4002adc:	39c0004c 	andi	r7,r7,1
 4002ae0:	10c5883a 	add	r2,r2,r3
 4002ae4:	3800071e 	bne	r7,zero,4002b04 <_free_r+0x1d4>
 4002ae8:	81fffe17 	ldw	r7,-8(r16)
 4002aec:	31cdc83a 	sub	r6,r6,r7
 4002af0:	30c00317 	ldw	r3,12(r6)
 4002af4:	31400217 	ldw	r5,8(r6)
 4002af8:	11c5883a 	add	r2,r2,r7
 4002afc:	28c00315 	stw	r3,12(r5)
 4002b00:	19400215 	stw	r5,8(r3)
 4002b04:	10c00054 	ori	r3,r2,1
 4002b08:	30c00115 	stw	r3,4(r6)
 4002b0c:	00c10034 	movhi	r3,1024
 4002b10:	18dcf704 	addi	r3,r3,29660
 4002b14:	18c00017 	ldw	r3,0(r3)
 4002b18:	21800215 	stw	r6,8(r4)
 4002b1c:	10ffc036 	bltu	r2,r3,4002a20 <_free_r+0xf0>
 4002b20:	00810074 	movhi	r2,1025
 4002b24:	10a39f04 	addi	r2,r2,-29060
 4002b28:	11400017 	ldw	r5,0(r2)
 4002b2c:	8809883a 	mov	r4,r17
 4002b30:	400280c0 	call	400280c <_malloc_trim_r>
 4002b34:	003fba06 	br	4002a20 <_free_r+0xf0>
 4002b38:	28c9883a 	add	r4,r5,r3
 4002b3c:	21000117 	ldw	r4,4(r4)
 4002b40:	2100004c 	andi	r4,r4,1
 4002b44:	2000391e 	bne	r4,zero,4002c2c <_free_r+0x2fc>
 4002b48:	29c00217 	ldw	r7,8(r5)
 4002b4c:	29000317 	ldw	r4,12(r5)
 4002b50:	1885883a 	add	r2,r3,r2
 4002b54:	10c00054 	ori	r3,r2,1
 4002b58:	39000315 	stw	r4,12(r7)
 4002b5c:	21c00215 	stw	r7,8(r4)
 4002b60:	30c00115 	stw	r3,4(r6)
 4002b64:	308d883a 	add	r6,r6,r2
 4002b68:	30800015 	stw	r2,0(r6)
 4002b6c:	003fac06 	br	4002a20 <_free_r+0xf0>
 4002b70:	00c00504 	movi	r3,20
 4002b74:	19401536 	bltu	r3,r5,4002bcc <_free_r+0x29c>
 4002b78:	28c01704 	addi	r3,r5,92
 4002b7c:	18c7883a 	add	r3,r3,r3
 4002b80:	294016c4 	addi	r5,r5,91
 4002b84:	003fb406 	br	4002a58 <_free_r+0x128>
 4002b88:	280bd0ba 	srai	r5,r5,2
 4002b8c:	00c00044 	movi	r3,1
 4002b90:	38800117 	ldw	r2,4(r7)
 4002b94:	194a983a 	sll	r5,r3,r5
 4002b98:	2007883a 	mov	r3,r4
 4002b9c:	2884b03a 	or	r2,r5,r2
 4002ba0:	38800115 	stw	r2,4(r7)
 4002ba4:	003fbb06 	br	4002a94 <_free_r+0x164>
 4002ba8:	21800515 	stw	r6,20(r4)
 4002bac:	21800415 	stw	r6,16(r4)
 4002bb0:	10c00054 	ori	r3,r2,1
 4002bb4:	31c00315 	stw	r7,12(r6)
 4002bb8:	31c00215 	stw	r7,8(r6)
 4002bbc:	30c00115 	stw	r3,4(r6)
 4002bc0:	308d883a 	add	r6,r6,r2
 4002bc4:	30800015 	stw	r2,0(r6)
 4002bc8:	003f9506 	br	4002a20 <_free_r+0xf0>
 4002bcc:	00c01504 	movi	r3,84
 4002bd0:	19400536 	bltu	r3,r5,4002be8 <_free_r+0x2b8>
 4002bd4:	100ad33a 	srli	r5,r2,12
 4002bd8:	28c01bc4 	addi	r3,r5,111
 4002bdc:	18c7883a 	add	r3,r3,r3
 4002be0:	29401b84 	addi	r5,r5,110
 4002be4:	003f9c06 	br	4002a58 <_free_r+0x128>
 4002be8:	00c05504 	movi	r3,340
 4002bec:	19400536 	bltu	r3,r5,4002c04 <_free_r+0x2d4>
 4002bf0:	100ad3fa 	srli	r5,r2,15
 4002bf4:	28c01e04 	addi	r3,r5,120
 4002bf8:	18c7883a 	add	r3,r3,r3
 4002bfc:	29401dc4 	addi	r5,r5,119
 4002c00:	003f9506 	br	4002a58 <_free_r+0x128>
 4002c04:	00c15504 	movi	r3,1364
 4002c08:	19400536 	bltu	r3,r5,4002c20 <_free_r+0x2f0>
 4002c0c:	100ad4ba 	srli	r5,r2,18
 4002c10:	28c01f44 	addi	r3,r5,125
 4002c14:	18c7883a 	add	r3,r3,r3
 4002c18:	29401f04 	addi	r5,r5,124
 4002c1c:	003f8e06 	br	4002a58 <_free_r+0x128>
 4002c20:	00c03f84 	movi	r3,254
 4002c24:	01401f84 	movi	r5,126
 4002c28:	003f8b06 	br	4002a58 <_free_r+0x128>
 4002c2c:	10c00054 	ori	r3,r2,1
 4002c30:	30c00115 	stw	r3,4(r6)
 4002c34:	308d883a 	add	r6,r6,r2
 4002c38:	30800015 	stw	r2,0(r6)
 4002c3c:	003f7806 	br	4002a20 <_free_r+0xf0>

04002c40 <_lseek_r>:
 4002c40:	defffd04 	addi	sp,sp,-12
 4002c44:	2805883a 	mov	r2,r5
 4002c48:	dc000015 	stw	r16,0(sp)
 4002c4c:	04010074 	movhi	r16,1025
 4002c50:	dc400115 	stw	r17,4(sp)
 4002c54:	300b883a 	mov	r5,r6
 4002c58:	8423a004 	addi	r16,r16,-29056
 4002c5c:	2023883a 	mov	r17,r4
 4002c60:	380d883a 	mov	r6,r7
 4002c64:	1009883a 	mov	r4,r2
 4002c68:	dfc00215 	stw	ra,8(sp)
 4002c6c:	80000015 	stw	zero,0(r16)
 4002c70:	400354c0 	call	400354c <lseek>
 4002c74:	00ffffc4 	movi	r3,-1
 4002c78:	10c00526 	beq	r2,r3,4002c90 <_lseek_r+0x50>
 4002c7c:	dfc00217 	ldw	ra,8(sp)
 4002c80:	dc400117 	ldw	r17,4(sp)
 4002c84:	dc000017 	ldw	r16,0(sp)
 4002c88:	dec00304 	addi	sp,sp,12
 4002c8c:	f800283a 	ret
 4002c90:	80c00017 	ldw	r3,0(r16)
 4002c94:	183ff926 	beq	r3,zero,4002c7c <_lseek_r+0x3c>
 4002c98:	88c00015 	stw	r3,0(r17)
 4002c9c:	003ff706 	br	4002c7c <_lseek_r+0x3c>

04002ca0 <__smakebuf_r>:
 4002ca0:	2880030b 	ldhu	r2,12(r5)
 4002ca4:	10c0008c 	andi	r3,r2,2
 4002ca8:	1800411e 	bne	r3,zero,4002db0 <__smakebuf_r+0x110>
 4002cac:	deffec04 	addi	sp,sp,-80
 4002cb0:	dc000f15 	stw	r16,60(sp)
 4002cb4:	2821883a 	mov	r16,r5
 4002cb8:	2940038f 	ldh	r5,14(r5)
 4002cbc:	dc401015 	stw	r17,64(sp)
 4002cc0:	dfc01315 	stw	ra,76(sp)
 4002cc4:	dcc01215 	stw	r19,72(sp)
 4002cc8:	dc801115 	stw	r18,68(sp)
 4002ccc:	2023883a 	mov	r17,r4
 4002cd0:	28001c16 	blt	r5,zero,4002d44 <__smakebuf_r+0xa4>
 4002cd4:	d80d883a 	mov	r6,sp
 4002cd8:	4002ebc0 	call	4002ebc <_fstat_r>
 4002cdc:	10001816 	blt	r2,zero,4002d40 <__smakebuf_r+0xa0>
 4002ce0:	d8800117 	ldw	r2,4(sp)
 4002ce4:	00e00014 	movui	r3,32768
 4002ce8:	10bc000c 	andi	r2,r2,61440
 4002cec:	14c80020 	cmpeqi	r19,r2,8192
 4002cf0:	10c03726 	beq	r2,r3,4002dd0 <__smakebuf_r+0x130>
 4002cf4:	80c0030b 	ldhu	r3,12(r16)
 4002cf8:	18c20014 	ori	r3,r3,2048
 4002cfc:	80c0030d 	sth	r3,12(r16)
 4002d00:	00c80004 	movi	r3,8192
 4002d04:	10c0521e 	bne	r2,r3,4002e50 <__smakebuf_r+0x1b0>
 4002d08:	8140038f 	ldh	r5,14(r16)
 4002d0c:	8809883a 	mov	r4,r17
 4002d10:	4002f180 	call	4002f18 <_isatty_r>
 4002d14:	10004c26 	beq	r2,zero,4002e48 <__smakebuf_r+0x1a8>
 4002d18:	8080030b 	ldhu	r2,12(r16)
 4002d1c:	80c010c4 	addi	r3,r16,67
 4002d20:	80c00015 	stw	r3,0(r16)
 4002d24:	10800054 	ori	r2,r2,1
 4002d28:	8080030d 	sth	r2,12(r16)
 4002d2c:	00800044 	movi	r2,1
 4002d30:	80c00415 	stw	r3,16(r16)
 4002d34:	80800515 	stw	r2,20(r16)
 4002d38:	04810004 	movi	r18,1024
 4002d3c:	00000706 	br	4002d5c <__smakebuf_r+0xbc>
 4002d40:	8080030b 	ldhu	r2,12(r16)
 4002d44:	10c0200c 	andi	r3,r2,128
 4002d48:	18001f1e 	bne	r3,zero,4002dc8 <__smakebuf_r+0x128>
 4002d4c:	04810004 	movi	r18,1024
 4002d50:	10820014 	ori	r2,r2,2048
 4002d54:	8080030d 	sth	r2,12(r16)
 4002d58:	0027883a 	mov	r19,zero
 4002d5c:	900b883a 	mov	r5,r18
 4002d60:	8809883a 	mov	r4,r17
 4002d64:	4000ea80 	call	4000ea8 <_malloc_r>
 4002d68:	10002c26 	beq	r2,zero,4002e1c <__smakebuf_r+0x17c>
 4002d6c:	80c0030b 	ldhu	r3,12(r16)
 4002d70:	01010034 	movhi	r4,1024
 4002d74:	21013304 	addi	r4,r4,1228
 4002d78:	89000f15 	stw	r4,60(r17)
 4002d7c:	18c02014 	ori	r3,r3,128
 4002d80:	80c0030d 	sth	r3,12(r16)
 4002d84:	80800015 	stw	r2,0(r16)
 4002d88:	80800415 	stw	r2,16(r16)
 4002d8c:	84800515 	stw	r18,20(r16)
 4002d90:	98001a1e 	bne	r19,zero,4002dfc <__smakebuf_r+0x15c>
 4002d94:	dfc01317 	ldw	ra,76(sp)
 4002d98:	dcc01217 	ldw	r19,72(sp)
 4002d9c:	dc801117 	ldw	r18,68(sp)
 4002da0:	dc401017 	ldw	r17,64(sp)
 4002da4:	dc000f17 	ldw	r16,60(sp)
 4002da8:	dec01404 	addi	sp,sp,80
 4002dac:	f800283a 	ret
 4002db0:	288010c4 	addi	r2,r5,67
 4002db4:	28800015 	stw	r2,0(r5)
 4002db8:	28800415 	stw	r2,16(r5)
 4002dbc:	00800044 	movi	r2,1
 4002dc0:	28800515 	stw	r2,20(r5)
 4002dc4:	f800283a 	ret
 4002dc8:	04801004 	movi	r18,64
 4002dcc:	003fe006 	br	4002d50 <__smakebuf_r+0xb0>
 4002dd0:	81000a17 	ldw	r4,40(r16)
 4002dd4:	00c10034 	movhi	r3,1024
 4002dd8:	18c87d04 	addi	r3,r3,8692
 4002ddc:	20ffc51e 	bne	r4,r3,4002cf4 <__smakebuf_r+0x54>
 4002de0:	8080030b 	ldhu	r2,12(r16)
 4002de4:	04810004 	movi	r18,1024
 4002de8:	84801315 	stw	r18,76(r16)
 4002dec:	1484b03a 	or	r2,r2,r18
 4002df0:	8080030d 	sth	r2,12(r16)
 4002df4:	0027883a 	mov	r19,zero
 4002df8:	003fd806 	br	4002d5c <__smakebuf_r+0xbc>
 4002dfc:	8140038f 	ldh	r5,14(r16)
 4002e00:	8809883a 	mov	r4,r17
 4002e04:	4002f180 	call	4002f18 <_isatty_r>
 4002e08:	103fe226 	beq	r2,zero,4002d94 <__smakebuf_r+0xf4>
 4002e0c:	8080030b 	ldhu	r2,12(r16)
 4002e10:	10800054 	ori	r2,r2,1
 4002e14:	8080030d 	sth	r2,12(r16)
 4002e18:	003fde06 	br	4002d94 <__smakebuf_r+0xf4>
 4002e1c:	8080030b 	ldhu	r2,12(r16)
 4002e20:	10c0800c 	andi	r3,r2,512
 4002e24:	183fdb1e 	bne	r3,zero,4002d94 <__smakebuf_r+0xf4>
 4002e28:	10800094 	ori	r2,r2,2
 4002e2c:	80c010c4 	addi	r3,r16,67
 4002e30:	8080030d 	sth	r2,12(r16)
 4002e34:	00800044 	movi	r2,1
 4002e38:	80c00015 	stw	r3,0(r16)
 4002e3c:	80c00415 	stw	r3,16(r16)
 4002e40:	80800515 	stw	r2,20(r16)
 4002e44:	003fd306 	br	4002d94 <__smakebuf_r+0xf4>
 4002e48:	04810004 	movi	r18,1024
 4002e4c:	003fc306 	br	4002d5c <__smakebuf_r+0xbc>
 4002e50:	0027883a 	mov	r19,zero
 4002e54:	04810004 	movi	r18,1024
 4002e58:	003fc006 	br	4002d5c <__smakebuf_r+0xbc>

04002e5c <_read_r>:
 4002e5c:	defffd04 	addi	sp,sp,-12
 4002e60:	2805883a 	mov	r2,r5
 4002e64:	dc000015 	stw	r16,0(sp)
 4002e68:	04010074 	movhi	r16,1025
 4002e6c:	dc400115 	stw	r17,4(sp)
 4002e70:	300b883a 	mov	r5,r6
 4002e74:	8423a004 	addi	r16,r16,-29056
 4002e78:	2023883a 	mov	r17,r4
 4002e7c:	380d883a 	mov	r6,r7
 4002e80:	1009883a 	mov	r4,r2
 4002e84:	dfc00215 	stw	ra,8(sp)
 4002e88:	80000015 	stw	zero,0(r16)
 4002e8c:	40037200 	call	4003720 <read>
 4002e90:	00ffffc4 	movi	r3,-1
 4002e94:	10c00526 	beq	r2,r3,4002eac <_read_r+0x50>
 4002e98:	dfc00217 	ldw	ra,8(sp)
 4002e9c:	dc400117 	ldw	r17,4(sp)
 4002ea0:	dc000017 	ldw	r16,0(sp)
 4002ea4:	dec00304 	addi	sp,sp,12
 4002ea8:	f800283a 	ret
 4002eac:	80c00017 	ldw	r3,0(r16)
 4002eb0:	183ff926 	beq	r3,zero,4002e98 <_read_r+0x3c>
 4002eb4:	88c00015 	stw	r3,0(r17)
 4002eb8:	003ff706 	br	4002e98 <_read_r+0x3c>

04002ebc <_fstat_r>:
 4002ebc:	defffd04 	addi	sp,sp,-12
 4002ec0:	2805883a 	mov	r2,r5
 4002ec4:	dc000015 	stw	r16,0(sp)
 4002ec8:	04010074 	movhi	r16,1025
 4002ecc:	dc400115 	stw	r17,4(sp)
 4002ed0:	8423a004 	addi	r16,r16,-29056
 4002ed4:	2023883a 	mov	r17,r4
 4002ed8:	300b883a 	mov	r5,r6
 4002edc:	1009883a 	mov	r4,r2
 4002ee0:	dfc00215 	stw	ra,8(sp)
 4002ee4:	80000015 	stw	zero,0(r16)
 4002ee8:	40032940 	call	4003294 <fstat>
 4002eec:	00ffffc4 	movi	r3,-1
 4002ef0:	10c00526 	beq	r2,r3,4002f08 <_fstat_r+0x4c>
 4002ef4:	dfc00217 	ldw	ra,8(sp)
 4002ef8:	dc400117 	ldw	r17,4(sp)
 4002efc:	dc000017 	ldw	r16,0(sp)
 4002f00:	dec00304 	addi	sp,sp,12
 4002f04:	f800283a 	ret
 4002f08:	80c00017 	ldw	r3,0(r16)
 4002f0c:	183ff926 	beq	r3,zero,4002ef4 <_fstat_r+0x38>
 4002f10:	88c00015 	stw	r3,0(r17)
 4002f14:	003ff706 	br	4002ef4 <_fstat_r+0x38>

04002f18 <_isatty_r>:
 4002f18:	defffd04 	addi	sp,sp,-12
 4002f1c:	dc000015 	stw	r16,0(sp)
 4002f20:	04010074 	movhi	r16,1025
 4002f24:	dc400115 	stw	r17,4(sp)
 4002f28:	8423a004 	addi	r16,r16,-29056
 4002f2c:	2023883a 	mov	r17,r4
 4002f30:	2809883a 	mov	r4,r5
 4002f34:	dfc00215 	stw	ra,8(sp)
 4002f38:	80000015 	stw	zero,0(r16)
 4002f3c:	40033800 	call	4003380 <isatty>
 4002f40:	00ffffc4 	movi	r3,-1
 4002f44:	10c00526 	beq	r2,r3,4002f5c <_isatty_r+0x44>
 4002f48:	dfc00217 	ldw	ra,8(sp)
 4002f4c:	dc400117 	ldw	r17,4(sp)
 4002f50:	dc000017 	ldw	r16,0(sp)
 4002f54:	dec00304 	addi	sp,sp,12
 4002f58:	f800283a 	ret
 4002f5c:	80c00017 	ldw	r3,0(r16)
 4002f60:	183ff926 	beq	r3,zero,4002f48 <_isatty_r+0x30>
 4002f64:	88c00015 	stw	r3,0(r17)
 4002f68:	003ff706 	br	4002f48 <_isatty_r+0x30>

04002f6c <__divsi3>:
 4002f6c:	20001b16 	blt	r4,zero,4002fdc <__divsi3+0x70>
 4002f70:	000f883a 	mov	r7,zero
 4002f74:	28001616 	blt	r5,zero,4002fd0 <__divsi3+0x64>
 4002f78:	200d883a 	mov	r6,r4
 4002f7c:	29001a2e 	bgeu	r5,r4,4002fe8 <__divsi3+0x7c>
 4002f80:	00800804 	movi	r2,32
 4002f84:	00c00044 	movi	r3,1
 4002f88:	00000106 	br	4002f90 <__divsi3+0x24>
 4002f8c:	10000d26 	beq	r2,zero,4002fc4 <__divsi3+0x58>
 4002f90:	294b883a 	add	r5,r5,r5
 4002f94:	10bfffc4 	addi	r2,r2,-1
 4002f98:	18c7883a 	add	r3,r3,r3
 4002f9c:	293ffb36 	bltu	r5,r4,4002f8c <__divsi3+0x20>
 4002fa0:	0005883a 	mov	r2,zero
 4002fa4:	18000726 	beq	r3,zero,4002fc4 <__divsi3+0x58>
 4002fa8:	0005883a 	mov	r2,zero
 4002fac:	31400236 	bltu	r6,r5,4002fb8 <__divsi3+0x4c>
 4002fb0:	314dc83a 	sub	r6,r6,r5
 4002fb4:	10c4b03a 	or	r2,r2,r3
 4002fb8:	1806d07a 	srli	r3,r3,1
 4002fbc:	280ad07a 	srli	r5,r5,1
 4002fc0:	183ffa1e 	bne	r3,zero,4002fac <__divsi3+0x40>
 4002fc4:	38000126 	beq	r7,zero,4002fcc <__divsi3+0x60>
 4002fc8:	0085c83a 	sub	r2,zero,r2
 4002fcc:	f800283a 	ret
 4002fd0:	014bc83a 	sub	r5,zero,r5
 4002fd4:	39c0005c 	xori	r7,r7,1
 4002fd8:	003fe706 	br	4002f78 <__divsi3+0xc>
 4002fdc:	0109c83a 	sub	r4,zero,r4
 4002fe0:	01c00044 	movi	r7,1
 4002fe4:	003fe306 	br	4002f74 <__divsi3+0x8>
 4002fe8:	00c00044 	movi	r3,1
 4002fec:	003fee06 	br	4002fa8 <__divsi3+0x3c>

04002ff0 <__modsi3>:
 4002ff0:	20001716 	blt	r4,zero,4003050 <__modsi3+0x60>
 4002ff4:	000f883a 	mov	r7,zero
 4002ff8:	2005883a 	mov	r2,r4
 4002ffc:	28001216 	blt	r5,zero,4003048 <__modsi3+0x58>
 4003000:	2900162e 	bgeu	r5,r4,400305c <__modsi3+0x6c>
 4003004:	01800804 	movi	r6,32
 4003008:	00c00044 	movi	r3,1
 400300c:	00000106 	br	4003014 <__modsi3+0x24>
 4003010:	30000a26 	beq	r6,zero,400303c <__modsi3+0x4c>
 4003014:	294b883a 	add	r5,r5,r5
 4003018:	31bfffc4 	addi	r6,r6,-1
 400301c:	18c7883a 	add	r3,r3,r3
 4003020:	293ffb36 	bltu	r5,r4,4003010 <__modsi3+0x20>
 4003024:	18000526 	beq	r3,zero,400303c <__modsi3+0x4c>
 4003028:	1806d07a 	srli	r3,r3,1
 400302c:	11400136 	bltu	r2,r5,4003034 <__modsi3+0x44>
 4003030:	1145c83a 	sub	r2,r2,r5
 4003034:	280ad07a 	srli	r5,r5,1
 4003038:	183ffb1e 	bne	r3,zero,4003028 <__modsi3+0x38>
 400303c:	38000126 	beq	r7,zero,4003044 <__modsi3+0x54>
 4003040:	0085c83a 	sub	r2,zero,r2
 4003044:	f800283a 	ret
 4003048:	014bc83a 	sub	r5,zero,r5
 400304c:	003fec06 	br	4003000 <__modsi3+0x10>
 4003050:	0109c83a 	sub	r4,zero,r4
 4003054:	01c00044 	movi	r7,1
 4003058:	003fe706 	br	4002ff8 <__modsi3+0x8>
 400305c:	00c00044 	movi	r3,1
 4003060:	003ff106 	br	4003028 <__modsi3+0x38>

04003064 <__udivsi3>:
 4003064:	200d883a 	mov	r6,r4
 4003068:	2900152e 	bgeu	r5,r4,40030c0 <__udivsi3+0x5c>
 400306c:	28001416 	blt	r5,zero,40030c0 <__udivsi3+0x5c>
 4003070:	00800804 	movi	r2,32
 4003074:	00c00044 	movi	r3,1
 4003078:	00000206 	br	4003084 <__udivsi3+0x20>
 400307c:	10000e26 	beq	r2,zero,40030b8 <__udivsi3+0x54>
 4003080:	28000516 	blt	r5,zero,4003098 <__udivsi3+0x34>
 4003084:	294b883a 	add	r5,r5,r5
 4003088:	10bfffc4 	addi	r2,r2,-1
 400308c:	18c7883a 	add	r3,r3,r3
 4003090:	293ffa36 	bltu	r5,r4,400307c <__udivsi3+0x18>
 4003094:	18000826 	beq	r3,zero,40030b8 <__udivsi3+0x54>
 4003098:	0005883a 	mov	r2,zero
 400309c:	31400236 	bltu	r6,r5,40030a8 <__udivsi3+0x44>
 40030a0:	314dc83a 	sub	r6,r6,r5
 40030a4:	10c4b03a 	or	r2,r2,r3
 40030a8:	1806d07a 	srli	r3,r3,1
 40030ac:	280ad07a 	srli	r5,r5,1
 40030b0:	183ffa1e 	bne	r3,zero,400309c <__udivsi3+0x38>
 40030b4:	f800283a 	ret
 40030b8:	0005883a 	mov	r2,zero
 40030bc:	f800283a 	ret
 40030c0:	00c00044 	movi	r3,1
 40030c4:	003ff406 	br	4003098 <__udivsi3+0x34>

040030c8 <__umodsi3>:
 40030c8:	2005883a 	mov	r2,r4
 40030cc:	2900122e 	bgeu	r5,r4,4003118 <__umodsi3+0x50>
 40030d0:	28001116 	blt	r5,zero,4003118 <__umodsi3+0x50>
 40030d4:	01800804 	movi	r6,32
 40030d8:	00c00044 	movi	r3,1
 40030dc:	00000206 	br	40030e8 <__umodsi3+0x20>
 40030e0:	30000c26 	beq	r6,zero,4003114 <__umodsi3+0x4c>
 40030e4:	28000516 	blt	r5,zero,40030fc <__umodsi3+0x34>
 40030e8:	294b883a 	add	r5,r5,r5
 40030ec:	31bfffc4 	addi	r6,r6,-1
 40030f0:	18c7883a 	add	r3,r3,r3
 40030f4:	293ffa36 	bltu	r5,r4,40030e0 <__umodsi3+0x18>
 40030f8:	18000626 	beq	r3,zero,4003114 <__umodsi3+0x4c>
 40030fc:	1806d07a 	srli	r3,r3,1
 4003100:	11400136 	bltu	r2,r5,4003108 <__umodsi3+0x40>
 4003104:	1145c83a 	sub	r2,r2,r5
 4003108:	280ad07a 	srli	r5,r5,1
 400310c:	183ffb1e 	bne	r3,zero,40030fc <__umodsi3+0x34>
 4003110:	f800283a 	ret
 4003114:	f800283a 	ret
 4003118:	00c00044 	movi	r3,1
 400311c:	003ff706 	br	40030fc <__umodsi3+0x34>

04003120 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003120:	defffe04 	addi	sp,sp,-8
 4003124:	dfc00115 	stw	ra,4(sp)
 4003128:	df000015 	stw	fp,0(sp)
 400312c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4003130:	d0a00917 	ldw	r2,-32732(gp)
 4003134:	10000326 	beq	r2,zero,4003144 <alt_get_errno+0x24>
 4003138:	d0a00917 	ldw	r2,-32732(gp)
 400313c:	103ee83a 	callr	r2
 4003140:	00000106 	br	4003148 <alt_get_errno+0x28>
 4003144:	d0a6ac04 	addi	r2,gp,-25936
}
 4003148:	e037883a 	mov	sp,fp
 400314c:	dfc00117 	ldw	ra,4(sp)
 4003150:	df000017 	ldw	fp,0(sp)
 4003154:	dec00204 	addi	sp,sp,8
 4003158:	f800283a 	ret

0400315c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400315c:	defffb04 	addi	sp,sp,-20
 4003160:	dfc00415 	stw	ra,16(sp)
 4003164:	df000315 	stw	fp,12(sp)
 4003168:	df000304 	addi	fp,sp,12
 400316c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4003170:	e0bfff17 	ldw	r2,-4(fp)
 4003174:	10000616 	blt	r2,zero,4003190 <close+0x34>
 4003178:	e0bfff17 	ldw	r2,-4(fp)
 400317c:	10c00324 	muli	r3,r2,12
 4003180:	00810034 	movhi	r2,1024
 4003184:	10987c04 	addi	r2,r2,25072
 4003188:	1885883a 	add	r2,r3,r2
 400318c:	00000106 	br	4003194 <close+0x38>
 4003190:	0005883a 	mov	r2,zero
 4003194:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4003198:	e0bffd17 	ldw	r2,-12(fp)
 400319c:	10001926 	beq	r2,zero,4003204 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 40031a0:	e0bffd17 	ldw	r2,-12(fp)
 40031a4:	10800017 	ldw	r2,0(r2)
 40031a8:	10800417 	ldw	r2,16(r2)
 40031ac:	10000626 	beq	r2,zero,40031c8 <close+0x6c>
 40031b0:	e0bffd17 	ldw	r2,-12(fp)
 40031b4:	10800017 	ldw	r2,0(r2)
 40031b8:	10800417 	ldw	r2,16(r2)
 40031bc:	e13ffd17 	ldw	r4,-12(fp)
 40031c0:	103ee83a 	callr	r2
 40031c4:	00000106 	br	40031cc <close+0x70>
 40031c8:	0005883a 	mov	r2,zero
 40031cc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 40031d0:	e13fff17 	ldw	r4,-4(fp)
 40031d4:	400381c0 	call	400381c <alt_release_fd>
    if (rval < 0)
 40031d8:	e0bffe17 	ldw	r2,-8(fp)
 40031dc:	1000070e 	bge	r2,zero,40031fc <close+0xa0>
    {
      ALT_ERRNO = -rval;
 40031e0:	40031200 	call	4003120 <alt_get_errno>
 40031e4:	1007883a 	mov	r3,r2
 40031e8:	e0bffe17 	ldw	r2,-8(fp)
 40031ec:	0085c83a 	sub	r2,zero,r2
 40031f0:	18800015 	stw	r2,0(r3)
      return -1;
 40031f4:	00bfffc4 	movi	r2,-1
 40031f8:	00000706 	br	4003218 <close+0xbc>
    }
    return 0;
 40031fc:	0005883a 	mov	r2,zero
 4003200:	00000506 	br	4003218 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4003204:	40031200 	call	4003120 <alt_get_errno>
 4003208:	1007883a 	mov	r3,r2
 400320c:	00801444 	movi	r2,81
 4003210:	18800015 	stw	r2,0(r3)
    return -1;
 4003214:	00bfffc4 	movi	r2,-1
  }
}
 4003218:	e037883a 	mov	sp,fp
 400321c:	dfc00117 	ldw	ra,4(sp)
 4003220:	df000017 	ldw	fp,0(sp)
 4003224:	dec00204 	addi	sp,sp,8
 4003228:	f800283a 	ret

0400322c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400322c:	defffc04 	addi	sp,sp,-16
 4003230:	df000315 	stw	fp,12(sp)
 4003234:	df000304 	addi	fp,sp,12
 4003238:	e13ffd15 	stw	r4,-12(fp)
 400323c:	e17ffe15 	stw	r5,-8(fp)
 4003240:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4003244:	e0bfff17 	ldw	r2,-4(fp)
}
 4003248:	e037883a 	mov	sp,fp
 400324c:	df000017 	ldw	fp,0(sp)
 4003250:	dec00104 	addi	sp,sp,4
 4003254:	f800283a 	ret

04003258 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003258:	defffe04 	addi	sp,sp,-8
 400325c:	dfc00115 	stw	ra,4(sp)
 4003260:	df000015 	stw	fp,0(sp)
 4003264:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4003268:	d0a00917 	ldw	r2,-32732(gp)
 400326c:	10000326 	beq	r2,zero,400327c <alt_get_errno+0x24>
 4003270:	d0a00917 	ldw	r2,-32732(gp)
 4003274:	103ee83a 	callr	r2
 4003278:	00000106 	br	4003280 <alt_get_errno+0x28>
 400327c:	d0a6ac04 	addi	r2,gp,-25936
}
 4003280:	e037883a 	mov	sp,fp
 4003284:	dfc00117 	ldw	ra,4(sp)
 4003288:	df000017 	ldw	fp,0(sp)
 400328c:	dec00204 	addi	sp,sp,8
 4003290:	f800283a 	ret

04003294 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4003294:	defffb04 	addi	sp,sp,-20
 4003298:	dfc00415 	stw	ra,16(sp)
 400329c:	df000315 	stw	fp,12(sp)
 40032a0:	df000304 	addi	fp,sp,12
 40032a4:	e13ffe15 	stw	r4,-8(fp)
 40032a8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40032ac:	e0bffe17 	ldw	r2,-8(fp)
 40032b0:	10000616 	blt	r2,zero,40032cc <fstat+0x38>
 40032b4:	e0bffe17 	ldw	r2,-8(fp)
 40032b8:	10c00324 	muli	r3,r2,12
 40032bc:	00810034 	movhi	r2,1024
 40032c0:	10987c04 	addi	r2,r2,25072
 40032c4:	1885883a 	add	r2,r3,r2
 40032c8:	00000106 	br	40032d0 <fstat+0x3c>
 40032cc:	0005883a 	mov	r2,zero
 40032d0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 40032d4:	e0bffd17 	ldw	r2,-12(fp)
 40032d8:	10001026 	beq	r2,zero,400331c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 40032dc:	e0bffd17 	ldw	r2,-12(fp)
 40032e0:	10800017 	ldw	r2,0(r2)
 40032e4:	10800817 	ldw	r2,32(r2)
 40032e8:	10000726 	beq	r2,zero,4003308 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 40032ec:	e0bffd17 	ldw	r2,-12(fp)
 40032f0:	10800017 	ldw	r2,0(r2)
 40032f4:	10800817 	ldw	r2,32(r2)
 40032f8:	e17fff17 	ldw	r5,-4(fp)
 40032fc:	e13ffd17 	ldw	r4,-12(fp)
 4003300:	103ee83a 	callr	r2
 4003304:	00000a06 	br	4003330 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4003308:	e0bfff17 	ldw	r2,-4(fp)
 400330c:	00c80004 	movi	r3,8192
 4003310:	10c00115 	stw	r3,4(r2)
      return 0;
 4003314:	0005883a 	mov	r2,zero
 4003318:	00000506 	br	4003330 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400331c:	40032580 	call	4003258 <alt_get_errno>
 4003320:	1007883a 	mov	r3,r2
 4003324:	00801444 	movi	r2,81
 4003328:	18800015 	stw	r2,0(r3)
    return -1;
 400332c:	00bfffc4 	movi	r2,-1
  }
}
 4003330:	e037883a 	mov	sp,fp
 4003334:	dfc00117 	ldw	ra,4(sp)
 4003338:	df000017 	ldw	fp,0(sp)
 400333c:	dec00204 	addi	sp,sp,8
 4003340:	f800283a 	ret

04003344 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003344:	defffe04 	addi	sp,sp,-8
 4003348:	dfc00115 	stw	ra,4(sp)
 400334c:	df000015 	stw	fp,0(sp)
 4003350:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4003354:	d0a00917 	ldw	r2,-32732(gp)
 4003358:	10000326 	beq	r2,zero,4003368 <alt_get_errno+0x24>
 400335c:	d0a00917 	ldw	r2,-32732(gp)
 4003360:	103ee83a 	callr	r2
 4003364:	00000106 	br	400336c <alt_get_errno+0x28>
 4003368:	d0a6ac04 	addi	r2,gp,-25936
}
 400336c:	e037883a 	mov	sp,fp
 4003370:	dfc00117 	ldw	ra,4(sp)
 4003374:	df000017 	ldw	fp,0(sp)
 4003378:	dec00204 	addi	sp,sp,8
 400337c:	f800283a 	ret

04003380 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4003380:	deffed04 	addi	sp,sp,-76
 4003384:	dfc01215 	stw	ra,72(sp)
 4003388:	df001115 	stw	fp,68(sp)
 400338c:	df001104 	addi	fp,sp,68
 4003390:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4003394:	e0bfff17 	ldw	r2,-4(fp)
 4003398:	10000616 	blt	r2,zero,40033b4 <isatty+0x34>
 400339c:	e0bfff17 	ldw	r2,-4(fp)
 40033a0:	10c00324 	muli	r3,r2,12
 40033a4:	00810034 	movhi	r2,1024
 40033a8:	10987c04 	addi	r2,r2,25072
 40033ac:	1885883a 	add	r2,r3,r2
 40033b0:	00000106 	br	40033b8 <isatty+0x38>
 40033b4:	0005883a 	mov	r2,zero
 40033b8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 40033bc:	e0bfef17 	ldw	r2,-68(fp)
 40033c0:	10000e26 	beq	r2,zero,40033fc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 40033c4:	e0bfef17 	ldw	r2,-68(fp)
 40033c8:	10800017 	ldw	r2,0(r2)
 40033cc:	10800817 	ldw	r2,32(r2)
 40033d0:	1000021e 	bne	r2,zero,40033dc <isatty+0x5c>
    {
      return 1;
 40033d4:	00800044 	movi	r2,1
 40033d8:	00000d06 	br	4003410 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 40033dc:	e0bff004 	addi	r2,fp,-64
 40033e0:	100b883a 	mov	r5,r2
 40033e4:	e13fff17 	ldw	r4,-4(fp)
 40033e8:	40032940 	call	4003294 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 40033ec:	e0bff117 	ldw	r2,-60(fp)
 40033f0:	10880020 	cmpeqi	r2,r2,8192
 40033f4:	10803fcc 	andi	r2,r2,255
 40033f8:	00000506 	br	4003410 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40033fc:	40033440 	call	4003344 <alt_get_errno>
 4003400:	1007883a 	mov	r3,r2
 4003404:	00801444 	movi	r2,81
 4003408:	18800015 	stw	r2,0(r3)
    return 0;
 400340c:	0005883a 	mov	r2,zero
  }
}
 4003410:	e037883a 	mov	sp,fp
 4003414:	dfc00117 	ldw	ra,4(sp)
 4003418:	df000017 	ldw	fp,0(sp)
 400341c:	dec00204 	addi	sp,sp,8
 4003420:	f800283a 	ret

04003424 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4003424:	defffc04 	addi	sp,sp,-16
 4003428:	df000315 	stw	fp,12(sp)
 400342c:	df000304 	addi	fp,sp,12
 4003430:	e13ffd15 	stw	r4,-12(fp)
 4003434:	e17ffe15 	stw	r5,-8(fp)
 4003438:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 400343c:	e0fffe17 	ldw	r3,-8(fp)
 4003440:	e0bffd17 	ldw	r2,-12(fp)
 4003444:	18800c26 	beq	r3,r2,4003478 <alt_load_section+0x54>
  {
    while( to != end )
 4003448:	00000806 	br	400346c <alt_load_section+0x48>
    {
      *to++ = *from++;
 400344c:	e0bffe17 	ldw	r2,-8(fp)
 4003450:	10c00104 	addi	r3,r2,4
 4003454:	e0fffe15 	stw	r3,-8(fp)
 4003458:	e0fffd17 	ldw	r3,-12(fp)
 400345c:	19000104 	addi	r4,r3,4
 4003460:	e13ffd15 	stw	r4,-12(fp)
 4003464:	18c00017 	ldw	r3,0(r3)
 4003468:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 400346c:	e0fffe17 	ldw	r3,-8(fp)
 4003470:	e0bfff17 	ldw	r2,-4(fp)
 4003474:	18bff51e 	bne	r3,r2,400344c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 4003478:	0001883a 	nop
 400347c:	e037883a 	mov	sp,fp
 4003480:	df000017 	ldw	fp,0(sp)
 4003484:	dec00104 	addi	sp,sp,4
 4003488:	f800283a 	ret

0400348c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400348c:	defffe04 	addi	sp,sp,-8
 4003490:	dfc00115 	stw	ra,4(sp)
 4003494:	df000015 	stw	fp,0(sp)
 4003498:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 400349c:	01810034 	movhi	r6,1024
 40034a0:	319d0204 	addi	r6,r6,29704
 40034a4:	01410034 	movhi	r5,1024
 40034a8:	29566704 	addi	r5,r5,22940
 40034ac:	01010034 	movhi	r4,1024
 40034b0:	211d0204 	addi	r4,r4,29704
 40034b4:	40034240 	call	4003424 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 40034b8:	01810034 	movhi	r6,1024
 40034bc:	31809104 	addi	r6,r6,580
 40034c0:	01410034 	movhi	r5,1024
 40034c4:	29400804 	addi	r5,r5,32
 40034c8:	01010034 	movhi	r4,1024
 40034cc:	21000804 	addi	r4,r4,32
 40034d0:	40034240 	call	4003424 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 40034d4:	01810034 	movhi	r6,1024
 40034d8:	31966704 	addi	r6,r6,22940
 40034dc:	01410034 	movhi	r5,1024
 40034e0:	29565304 	addi	r5,r5,22860
 40034e4:	01010034 	movhi	r4,1024
 40034e8:	21165304 	addi	r4,r4,22860
 40034ec:	40034240 	call	4003424 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 40034f0:	40048380 	call	4004838 <alt_dcache_flush_all>
  alt_icache_flush_all();
 40034f4:	4004a200 	call	4004a20 <alt_icache_flush_all>
}
 40034f8:	0001883a 	nop
 40034fc:	e037883a 	mov	sp,fp
 4003500:	dfc00117 	ldw	ra,4(sp)
 4003504:	df000017 	ldw	fp,0(sp)
 4003508:	dec00204 	addi	sp,sp,8
 400350c:	f800283a 	ret

04003510 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003510:	defffe04 	addi	sp,sp,-8
 4003514:	dfc00115 	stw	ra,4(sp)
 4003518:	df000015 	stw	fp,0(sp)
 400351c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4003520:	d0a00917 	ldw	r2,-32732(gp)
 4003524:	10000326 	beq	r2,zero,4003534 <alt_get_errno+0x24>
 4003528:	d0a00917 	ldw	r2,-32732(gp)
 400352c:	103ee83a 	callr	r2
 4003530:	00000106 	br	4003538 <alt_get_errno+0x28>
 4003534:	d0a6ac04 	addi	r2,gp,-25936
}
 4003538:	e037883a 	mov	sp,fp
 400353c:	dfc00117 	ldw	ra,4(sp)
 4003540:	df000017 	ldw	fp,0(sp)
 4003544:	dec00204 	addi	sp,sp,8
 4003548:	f800283a 	ret

0400354c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400354c:	defff904 	addi	sp,sp,-28
 4003550:	dfc00615 	stw	ra,24(sp)
 4003554:	df000515 	stw	fp,20(sp)
 4003558:	df000504 	addi	fp,sp,20
 400355c:	e13ffd15 	stw	r4,-12(fp)
 4003560:	e17ffe15 	stw	r5,-8(fp)
 4003564:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 4003568:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400356c:	e0bffd17 	ldw	r2,-12(fp)
 4003570:	10000616 	blt	r2,zero,400358c <lseek+0x40>
 4003574:	e0bffd17 	ldw	r2,-12(fp)
 4003578:	10c00324 	muli	r3,r2,12
 400357c:	00810034 	movhi	r2,1024
 4003580:	10987c04 	addi	r2,r2,25072
 4003584:	1885883a 	add	r2,r3,r2
 4003588:	00000106 	br	4003590 <lseek+0x44>
 400358c:	0005883a 	mov	r2,zero
 4003590:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 4003594:	e0bffc17 	ldw	r2,-16(fp)
 4003598:	10001026 	beq	r2,zero,40035dc <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400359c:	e0bffc17 	ldw	r2,-16(fp)
 40035a0:	10800017 	ldw	r2,0(r2)
 40035a4:	10800717 	ldw	r2,28(r2)
 40035a8:	10000926 	beq	r2,zero,40035d0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 40035ac:	e0bffc17 	ldw	r2,-16(fp)
 40035b0:	10800017 	ldw	r2,0(r2)
 40035b4:	10800717 	ldw	r2,28(r2)
 40035b8:	e1bfff17 	ldw	r6,-4(fp)
 40035bc:	e17ffe17 	ldw	r5,-8(fp)
 40035c0:	e13ffc17 	ldw	r4,-16(fp)
 40035c4:	103ee83a 	callr	r2
 40035c8:	e0bffb15 	stw	r2,-20(fp)
 40035cc:	00000506 	br	40035e4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 40035d0:	00bfde84 	movi	r2,-134
 40035d4:	e0bffb15 	stw	r2,-20(fp)
 40035d8:	00000206 	br	40035e4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 40035dc:	00bfebc4 	movi	r2,-81
 40035e0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 40035e4:	e0bffb17 	ldw	r2,-20(fp)
 40035e8:	1000070e 	bge	r2,zero,4003608 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 40035ec:	40035100 	call	4003510 <alt_get_errno>
 40035f0:	1007883a 	mov	r3,r2
 40035f4:	e0bffb17 	ldw	r2,-20(fp)
 40035f8:	0085c83a 	sub	r2,zero,r2
 40035fc:	18800015 	stw	r2,0(r3)
    rc = -1;
 4003600:	00bfffc4 	movi	r2,-1
 4003604:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 4003608:	e0bffb17 	ldw	r2,-20(fp)
}
 400360c:	e037883a 	mov	sp,fp
 4003610:	dfc00117 	ldw	ra,4(sp)
 4003614:	df000017 	ldw	fp,0(sp)
 4003618:	dec00204 	addi	sp,sp,8
 400361c:	f800283a 	ret

04003620 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4003620:	defffd04 	addi	sp,sp,-12
 4003624:	dfc00215 	stw	ra,8(sp)
 4003628:	df000115 	stw	fp,4(sp)
 400362c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4003630:	0009883a 	mov	r4,zero
 4003634:	4003ac80 	call	4003ac8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4003638:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400363c:	4003b000 	call	4003b00 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4003640:	01810034 	movhi	r6,1024
 4003644:	31965d04 	addi	r6,r6,22900
 4003648:	01410034 	movhi	r5,1024
 400364c:	29565d04 	addi	r5,r5,22900
 4003650:	01010034 	movhi	r4,1024
 4003654:	21165d04 	addi	r4,r4,22900
 4003658:	4004db80 	call	4004db8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400365c:	40049600 	call	4004960 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4003660:	01010034 	movhi	r4,1024
 4003664:	21127004 	addi	r4,r4,18880
 4003668:	40055b80 	call	40055b8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400366c:	d0a6ad17 	ldw	r2,-25932(gp)
 4003670:	d0e6ae17 	ldw	r3,-25928(gp)
 4003674:	d126af17 	ldw	r4,-25924(gp)
 4003678:	200d883a 	mov	r6,r4
 400367c:	180b883a 	mov	r5,r3
 4003680:	1009883a 	mov	r4,r2
 4003684:	40003240 	call	4000324 <main>
 4003688:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400368c:	01000044 	movi	r4,1
 4003690:	400315c0 	call	400315c <close>
  exit (result);
 4003694:	e13fff17 	ldw	r4,-4(fp)
 4003698:	40055cc0 	call	40055cc <exit>

0400369c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400369c:	defffe04 	addi	sp,sp,-8
 40036a0:	df000115 	stw	fp,4(sp)
 40036a4:	df000104 	addi	fp,sp,4
 40036a8:	e13fff15 	stw	r4,-4(fp)
}
 40036ac:	0001883a 	nop
 40036b0:	e037883a 	mov	sp,fp
 40036b4:	df000017 	ldw	fp,0(sp)
 40036b8:	dec00104 	addi	sp,sp,4
 40036bc:	f800283a 	ret

040036c0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 40036c0:	defffe04 	addi	sp,sp,-8
 40036c4:	df000115 	stw	fp,4(sp)
 40036c8:	df000104 	addi	fp,sp,4
 40036cc:	e13fff15 	stw	r4,-4(fp)
}
 40036d0:	0001883a 	nop
 40036d4:	e037883a 	mov	sp,fp
 40036d8:	df000017 	ldw	fp,0(sp)
 40036dc:	dec00104 	addi	sp,sp,4
 40036e0:	f800283a 	ret

040036e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40036e4:	defffe04 	addi	sp,sp,-8
 40036e8:	dfc00115 	stw	ra,4(sp)
 40036ec:	df000015 	stw	fp,0(sp)
 40036f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40036f4:	d0a00917 	ldw	r2,-32732(gp)
 40036f8:	10000326 	beq	r2,zero,4003708 <alt_get_errno+0x24>
 40036fc:	d0a00917 	ldw	r2,-32732(gp)
 4003700:	103ee83a 	callr	r2
 4003704:	00000106 	br	400370c <alt_get_errno+0x28>
 4003708:	d0a6ac04 	addi	r2,gp,-25936
}
 400370c:	e037883a 	mov	sp,fp
 4003710:	dfc00117 	ldw	ra,4(sp)
 4003714:	df000017 	ldw	fp,0(sp)
 4003718:	dec00204 	addi	sp,sp,8
 400371c:	f800283a 	ret

04003720 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4003720:	defff904 	addi	sp,sp,-28
 4003724:	dfc00615 	stw	ra,24(sp)
 4003728:	df000515 	stw	fp,20(sp)
 400372c:	df000504 	addi	fp,sp,20
 4003730:	e13ffd15 	stw	r4,-12(fp)
 4003734:	e17ffe15 	stw	r5,-8(fp)
 4003738:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400373c:	e0bffd17 	ldw	r2,-12(fp)
 4003740:	10000616 	blt	r2,zero,400375c <read+0x3c>
 4003744:	e0bffd17 	ldw	r2,-12(fp)
 4003748:	10c00324 	muli	r3,r2,12
 400374c:	00810034 	movhi	r2,1024
 4003750:	10987c04 	addi	r2,r2,25072
 4003754:	1885883a 	add	r2,r3,r2
 4003758:	00000106 	br	4003760 <read+0x40>
 400375c:	0005883a 	mov	r2,zero
 4003760:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4003764:	e0bffb17 	ldw	r2,-20(fp)
 4003768:	10002226 	beq	r2,zero,40037f4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400376c:	e0bffb17 	ldw	r2,-20(fp)
 4003770:	10800217 	ldw	r2,8(r2)
 4003774:	108000cc 	andi	r2,r2,3
 4003778:	10800060 	cmpeqi	r2,r2,1
 400377c:	1000181e 	bne	r2,zero,40037e0 <read+0xc0>
        (fd->dev->read))
 4003780:	e0bffb17 	ldw	r2,-20(fp)
 4003784:	10800017 	ldw	r2,0(r2)
 4003788:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400378c:	10001426 	beq	r2,zero,40037e0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4003790:	e0bffb17 	ldw	r2,-20(fp)
 4003794:	10800017 	ldw	r2,0(r2)
 4003798:	10800517 	ldw	r2,20(r2)
 400379c:	e0ffff17 	ldw	r3,-4(fp)
 40037a0:	180d883a 	mov	r6,r3
 40037a4:	e17ffe17 	ldw	r5,-8(fp)
 40037a8:	e13ffb17 	ldw	r4,-20(fp)
 40037ac:	103ee83a 	callr	r2
 40037b0:	e0bffc15 	stw	r2,-16(fp)
 40037b4:	e0bffc17 	ldw	r2,-16(fp)
 40037b8:	1000070e 	bge	r2,zero,40037d8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 40037bc:	40036e40 	call	40036e4 <alt_get_errno>
 40037c0:	1007883a 	mov	r3,r2
 40037c4:	e0bffc17 	ldw	r2,-16(fp)
 40037c8:	0085c83a 	sub	r2,zero,r2
 40037cc:	18800015 	stw	r2,0(r3)
          return -1;
 40037d0:	00bfffc4 	movi	r2,-1
 40037d4:	00000c06 	br	4003808 <read+0xe8>
        }
        return rval;
 40037d8:	e0bffc17 	ldw	r2,-16(fp)
 40037dc:	00000a06 	br	4003808 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 40037e0:	40036e40 	call	40036e4 <alt_get_errno>
 40037e4:	1007883a 	mov	r3,r2
 40037e8:	00800344 	movi	r2,13
 40037ec:	18800015 	stw	r2,0(r3)
 40037f0:	00000406 	br	4003804 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 40037f4:	40036e40 	call	40036e4 <alt_get_errno>
 40037f8:	1007883a 	mov	r3,r2
 40037fc:	00801444 	movi	r2,81
 4003800:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4003804:	00bfffc4 	movi	r2,-1
}
 4003808:	e037883a 	mov	sp,fp
 400380c:	dfc00117 	ldw	ra,4(sp)
 4003810:	df000017 	ldw	fp,0(sp)
 4003814:	dec00204 	addi	sp,sp,8
 4003818:	f800283a 	ret

0400381c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400381c:	defffe04 	addi	sp,sp,-8
 4003820:	df000115 	stw	fp,4(sp)
 4003824:	df000104 	addi	fp,sp,4
 4003828:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 400382c:	e0bfff17 	ldw	r2,-4(fp)
 4003830:	108000d0 	cmplti	r2,r2,3
 4003834:	10000d1e 	bne	r2,zero,400386c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4003838:	00810034 	movhi	r2,1024
 400383c:	10987c04 	addi	r2,r2,25072
 4003840:	e0ffff17 	ldw	r3,-4(fp)
 4003844:	18c00324 	muli	r3,r3,12
 4003848:	10c5883a 	add	r2,r2,r3
 400384c:	10800204 	addi	r2,r2,8
 4003850:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4003854:	00810034 	movhi	r2,1024
 4003858:	10987c04 	addi	r2,r2,25072
 400385c:	e0ffff17 	ldw	r3,-4(fp)
 4003860:	18c00324 	muli	r3,r3,12
 4003864:	10c5883a 	add	r2,r2,r3
 4003868:	10000015 	stw	zero,0(r2)
  }
}
 400386c:	0001883a 	nop
 4003870:	e037883a 	mov	sp,fp
 4003874:	df000017 	ldw	fp,0(sp)
 4003878:	dec00104 	addi	sp,sp,4
 400387c:	f800283a 	ret

04003880 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4003880:	defff904 	addi	sp,sp,-28
 4003884:	df000615 	stw	fp,24(sp)
 4003888:	df000604 	addi	fp,sp,24
 400388c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4003890:	0005303a 	rdctl	r2,status
 4003894:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4003898:	e0fffe17 	ldw	r3,-8(fp)
 400389c:	00bfff84 	movi	r2,-2
 40038a0:	1884703a 	and	r2,r3,r2
 40038a4:	1001703a 	wrctl	status,r2
  
  return context;
 40038a8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 40038ac:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 40038b0:	d0a00a17 	ldw	r2,-32728(gp)
 40038b4:	10c000c4 	addi	r3,r2,3
 40038b8:	00bfff04 	movi	r2,-4
 40038bc:	1884703a 	and	r2,r3,r2
 40038c0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 40038c4:	d0e00a17 	ldw	r3,-32728(gp)
 40038c8:	e0bfff17 	ldw	r2,-4(fp)
 40038cc:	1887883a 	add	r3,r3,r2
 40038d0:	00820034 	movhi	r2,2048
 40038d4:	10800004 	addi	r2,r2,0
 40038d8:	10c0062e 	bgeu	r2,r3,40038f4 <sbrk+0x74>
 40038dc:	e0bffb17 	ldw	r2,-20(fp)
 40038e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40038e4:	e0bffa17 	ldw	r2,-24(fp)
 40038e8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 40038ec:	00bfffc4 	movi	r2,-1
 40038f0:	00000b06 	br	4003920 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 40038f4:	d0a00a17 	ldw	r2,-32728(gp)
 40038f8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 40038fc:	d0e00a17 	ldw	r3,-32728(gp)
 4003900:	e0bfff17 	ldw	r2,-4(fp)
 4003904:	1885883a 	add	r2,r3,r2
 4003908:	d0a00a15 	stw	r2,-32728(gp)
 400390c:	e0bffb17 	ldw	r2,-20(fp)
 4003910:	e0bffc15 	stw	r2,-16(fp)
 4003914:	e0bffc17 	ldw	r2,-16(fp)
 4003918:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400391c:	e0bffd17 	ldw	r2,-12(fp)
} 
 4003920:	e037883a 	mov	sp,fp
 4003924:	df000017 	ldw	fp,0(sp)
 4003928:	dec00104 	addi	sp,sp,4
 400392c:	f800283a 	ret

04003930 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4003930:	defffd04 	addi	sp,sp,-12
 4003934:	dfc00215 	stw	ra,8(sp)
 4003938:	df000115 	stw	fp,4(sp)
 400393c:	df000104 	addi	fp,sp,4
 4003940:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4003944:	e13fff17 	ldw	r4,-4(fp)
 4003948:	40046e00 	call	40046e0 <alt_busy_sleep>
}
 400394c:	e037883a 	mov	sp,fp
 4003950:	dfc00117 	ldw	ra,4(sp)
 4003954:	df000017 	ldw	fp,0(sp)
 4003958:	dec00204 	addi	sp,sp,8
 400395c:	f800283a 	ret

04003960 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4003960:	defffe04 	addi	sp,sp,-8
 4003964:	dfc00115 	stw	ra,4(sp)
 4003968:	df000015 	stw	fp,0(sp)
 400396c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4003970:	d0a00917 	ldw	r2,-32732(gp)
 4003974:	10000326 	beq	r2,zero,4003984 <alt_get_errno+0x24>
 4003978:	d0a00917 	ldw	r2,-32732(gp)
 400397c:	103ee83a 	callr	r2
 4003980:	00000106 	br	4003988 <alt_get_errno+0x28>
 4003984:	d0a6ac04 	addi	r2,gp,-25936
}
 4003988:	e037883a 	mov	sp,fp
 400398c:	dfc00117 	ldw	ra,4(sp)
 4003990:	df000017 	ldw	fp,0(sp)
 4003994:	dec00204 	addi	sp,sp,8
 4003998:	f800283a 	ret

0400399c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400399c:	defff904 	addi	sp,sp,-28
 40039a0:	dfc00615 	stw	ra,24(sp)
 40039a4:	df000515 	stw	fp,20(sp)
 40039a8:	df000504 	addi	fp,sp,20
 40039ac:	e13ffd15 	stw	r4,-12(fp)
 40039b0:	e17ffe15 	stw	r5,-8(fp)
 40039b4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40039b8:	e0bffd17 	ldw	r2,-12(fp)
 40039bc:	10000616 	blt	r2,zero,40039d8 <write+0x3c>
 40039c0:	e0bffd17 	ldw	r2,-12(fp)
 40039c4:	10c00324 	muli	r3,r2,12
 40039c8:	00810034 	movhi	r2,1024
 40039cc:	10987c04 	addi	r2,r2,25072
 40039d0:	1885883a 	add	r2,r3,r2
 40039d4:	00000106 	br	40039dc <write+0x40>
 40039d8:	0005883a 	mov	r2,zero
 40039dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 40039e0:	e0bffb17 	ldw	r2,-20(fp)
 40039e4:	10002126 	beq	r2,zero,4003a6c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 40039e8:	e0bffb17 	ldw	r2,-20(fp)
 40039ec:	10800217 	ldw	r2,8(r2)
 40039f0:	108000cc 	andi	r2,r2,3
 40039f4:	10001826 	beq	r2,zero,4003a58 <write+0xbc>
 40039f8:	e0bffb17 	ldw	r2,-20(fp)
 40039fc:	10800017 	ldw	r2,0(r2)
 4003a00:	10800617 	ldw	r2,24(r2)
 4003a04:	10001426 	beq	r2,zero,4003a58 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4003a08:	e0bffb17 	ldw	r2,-20(fp)
 4003a0c:	10800017 	ldw	r2,0(r2)
 4003a10:	10800617 	ldw	r2,24(r2)
 4003a14:	e0ffff17 	ldw	r3,-4(fp)
 4003a18:	180d883a 	mov	r6,r3
 4003a1c:	e17ffe17 	ldw	r5,-8(fp)
 4003a20:	e13ffb17 	ldw	r4,-20(fp)
 4003a24:	103ee83a 	callr	r2
 4003a28:	e0bffc15 	stw	r2,-16(fp)
 4003a2c:	e0bffc17 	ldw	r2,-16(fp)
 4003a30:	1000070e 	bge	r2,zero,4003a50 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 4003a34:	40039600 	call	4003960 <alt_get_errno>
 4003a38:	1007883a 	mov	r3,r2
 4003a3c:	e0bffc17 	ldw	r2,-16(fp)
 4003a40:	0085c83a 	sub	r2,zero,r2
 4003a44:	18800015 	stw	r2,0(r3)
        return -1;
 4003a48:	00bfffc4 	movi	r2,-1
 4003a4c:	00000c06 	br	4003a80 <write+0xe4>
      }
      return rval;
 4003a50:	e0bffc17 	ldw	r2,-16(fp)
 4003a54:	00000a06 	br	4003a80 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4003a58:	40039600 	call	4003960 <alt_get_errno>
 4003a5c:	1007883a 	mov	r3,r2
 4003a60:	00800344 	movi	r2,13
 4003a64:	18800015 	stw	r2,0(r3)
 4003a68:	00000406 	br	4003a7c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4003a6c:	40039600 	call	4003960 <alt_get_errno>
 4003a70:	1007883a 	mov	r3,r2
 4003a74:	00801444 	movi	r2,81
 4003a78:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4003a7c:	00bfffc4 	movi	r2,-1
}
 4003a80:	e037883a 	mov	sp,fp
 4003a84:	dfc00117 	ldw	ra,4(sp)
 4003a88:	df000017 	ldw	fp,0(sp)
 4003a8c:	dec00204 	addi	sp,sp,8
 4003a90:	f800283a 	ret

04003a94 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4003a94:	defffd04 	addi	sp,sp,-12
 4003a98:	dfc00215 	stw	ra,8(sp)
 4003a9c:	df000115 	stw	fp,4(sp)
 4003aa0:	df000104 	addi	fp,sp,4
 4003aa4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4003aa8:	d1600604 	addi	r5,gp,-32744
 4003aac:	e13fff17 	ldw	r4,-4(fp)
 4003ab0:	40048bc0 	call	40048bc <alt_dev_llist_insert>
}
 4003ab4:	e037883a 	mov	sp,fp
 4003ab8:	dfc00117 	ldw	ra,4(sp)
 4003abc:	df000017 	ldw	fp,0(sp)
 4003ac0:	dec00204 	addi	sp,sp,8
 4003ac4:	f800283a 	ret

04003ac8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4003ac8:	defffd04 	addi	sp,sp,-12
 4003acc:	dfc00215 	stw	ra,8(sp)
 4003ad0:	df000115 	stw	fp,4(sp)
 4003ad4:	df000104 	addi	fp,sp,4
 4003ad8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 4003adc:	400522c0 	call	400522c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4003ae0:	00800044 	movi	r2,1
 4003ae4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4003ae8:	0001883a 	nop
 4003aec:	e037883a 	mov	sp,fp
 4003af0:	dfc00117 	ldw	ra,4(sp)
 4003af4:	df000017 	ldw	fp,0(sp)
 4003af8:	dec00204 	addi	sp,sp,8
 4003afc:	f800283a 	ret

04003b00 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4003b00:	defffe04 	addi	sp,sp,-8
 4003b04:	dfc00115 	stw	ra,4(sp)
 4003b08:	df000015 	stw	fp,0(sp)
 4003b0c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 4003b10:	000d883a 	mov	r6,zero
 4003b14:	000b883a 	mov	r5,zero
 4003b18:	01010034 	movhi	r4,1024
 4003b1c:	2118e604 	addi	r4,r4,25496
 4003b20:	4003cb00 	call	4003cb0 <altera_avalon_jtag_uart_init>
 4003b24:	01010034 	movhi	r4,1024
 4003b28:	2118dc04 	addi	r4,r4,25456
 4003b2c:	4003a940 	call	4003a94 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 4003b30:	0001883a 	nop
}
 4003b34:	0001883a 	nop
 4003b38:	e037883a 	mov	sp,fp
 4003b3c:	dfc00117 	ldw	ra,4(sp)
 4003b40:	df000017 	ldw	fp,0(sp)
 4003b44:	dec00204 	addi	sp,sp,8
 4003b48:	f800283a 	ret

04003b4c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4003b4c:	defffa04 	addi	sp,sp,-24
 4003b50:	dfc00515 	stw	ra,20(sp)
 4003b54:	df000415 	stw	fp,16(sp)
 4003b58:	df000404 	addi	fp,sp,16
 4003b5c:	e13ffd15 	stw	r4,-12(fp)
 4003b60:	e17ffe15 	stw	r5,-8(fp)
 4003b64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4003b68:	e0bffd17 	ldw	r2,-12(fp)
 4003b6c:	10800017 	ldw	r2,0(r2)
 4003b70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4003b74:	e0bffc17 	ldw	r2,-16(fp)
 4003b78:	10c00a04 	addi	r3,r2,40
 4003b7c:	e0bffd17 	ldw	r2,-12(fp)
 4003b80:	10800217 	ldw	r2,8(r2)
 4003b84:	100f883a 	mov	r7,r2
 4003b88:	e1bfff17 	ldw	r6,-4(fp)
 4003b8c:	e17ffe17 	ldw	r5,-8(fp)
 4003b90:	1809883a 	mov	r4,r3
 4003b94:	40041740 	call	4004174 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4003b98:	e037883a 	mov	sp,fp
 4003b9c:	dfc00117 	ldw	ra,4(sp)
 4003ba0:	df000017 	ldw	fp,0(sp)
 4003ba4:	dec00204 	addi	sp,sp,8
 4003ba8:	f800283a 	ret

04003bac <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4003bac:	defffa04 	addi	sp,sp,-24
 4003bb0:	dfc00515 	stw	ra,20(sp)
 4003bb4:	df000415 	stw	fp,16(sp)
 4003bb8:	df000404 	addi	fp,sp,16
 4003bbc:	e13ffd15 	stw	r4,-12(fp)
 4003bc0:	e17ffe15 	stw	r5,-8(fp)
 4003bc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4003bc8:	e0bffd17 	ldw	r2,-12(fp)
 4003bcc:	10800017 	ldw	r2,0(r2)
 4003bd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4003bd4:	e0bffc17 	ldw	r2,-16(fp)
 4003bd8:	10c00a04 	addi	r3,r2,40
 4003bdc:	e0bffd17 	ldw	r2,-12(fp)
 4003be0:	10800217 	ldw	r2,8(r2)
 4003be4:	100f883a 	mov	r7,r2
 4003be8:	e1bfff17 	ldw	r6,-4(fp)
 4003bec:	e17ffe17 	ldw	r5,-8(fp)
 4003bf0:	1809883a 	mov	r4,r3
 4003bf4:	40043900 	call	4004390 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4003bf8:	e037883a 	mov	sp,fp
 4003bfc:	dfc00117 	ldw	ra,4(sp)
 4003c00:	df000017 	ldw	fp,0(sp)
 4003c04:	dec00204 	addi	sp,sp,8
 4003c08:	f800283a 	ret

04003c0c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4003c0c:	defffc04 	addi	sp,sp,-16
 4003c10:	dfc00315 	stw	ra,12(sp)
 4003c14:	df000215 	stw	fp,8(sp)
 4003c18:	df000204 	addi	fp,sp,8
 4003c1c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4003c20:	e0bfff17 	ldw	r2,-4(fp)
 4003c24:	10800017 	ldw	r2,0(r2)
 4003c28:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4003c2c:	e0bffe17 	ldw	r2,-8(fp)
 4003c30:	10c00a04 	addi	r3,r2,40
 4003c34:	e0bfff17 	ldw	r2,-4(fp)
 4003c38:	10800217 	ldw	r2,8(r2)
 4003c3c:	100b883a 	mov	r5,r2
 4003c40:	1809883a 	mov	r4,r3
 4003c44:	400401c0 	call	400401c <altera_avalon_jtag_uart_close>
}
 4003c48:	e037883a 	mov	sp,fp
 4003c4c:	dfc00117 	ldw	ra,4(sp)
 4003c50:	df000017 	ldw	fp,0(sp)
 4003c54:	dec00204 	addi	sp,sp,8
 4003c58:	f800283a 	ret

04003c5c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4003c5c:	defffa04 	addi	sp,sp,-24
 4003c60:	dfc00515 	stw	ra,20(sp)
 4003c64:	df000415 	stw	fp,16(sp)
 4003c68:	df000404 	addi	fp,sp,16
 4003c6c:	e13ffd15 	stw	r4,-12(fp)
 4003c70:	e17ffe15 	stw	r5,-8(fp)
 4003c74:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4003c78:	e0bffd17 	ldw	r2,-12(fp)
 4003c7c:	10800017 	ldw	r2,0(r2)
 4003c80:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4003c84:	e0bffc17 	ldw	r2,-16(fp)
 4003c88:	10800a04 	addi	r2,r2,40
 4003c8c:	e1bfff17 	ldw	r6,-4(fp)
 4003c90:	e17ffe17 	ldw	r5,-8(fp)
 4003c94:	1009883a 	mov	r4,r2
 4003c98:	40040840 	call	4004084 <altera_avalon_jtag_uart_ioctl>
}
 4003c9c:	e037883a 	mov	sp,fp
 4003ca0:	dfc00117 	ldw	ra,4(sp)
 4003ca4:	df000017 	ldw	fp,0(sp)
 4003ca8:	dec00204 	addi	sp,sp,8
 4003cac:	f800283a 	ret

04003cb0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4003cb0:	defffa04 	addi	sp,sp,-24
 4003cb4:	dfc00515 	stw	ra,20(sp)
 4003cb8:	df000415 	stw	fp,16(sp)
 4003cbc:	df000404 	addi	fp,sp,16
 4003cc0:	e13ffd15 	stw	r4,-12(fp)
 4003cc4:	e17ffe15 	stw	r5,-8(fp)
 4003cc8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4003ccc:	e0bffd17 	ldw	r2,-12(fp)
 4003cd0:	00c00044 	movi	r3,1
 4003cd4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4003cd8:	e0bffd17 	ldw	r2,-12(fp)
 4003cdc:	10800017 	ldw	r2,0(r2)
 4003ce0:	10800104 	addi	r2,r2,4
 4003ce4:	1007883a 	mov	r3,r2
 4003ce8:	e0bffd17 	ldw	r2,-12(fp)
 4003cec:	10800817 	ldw	r2,32(r2)
 4003cf0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4003cf4:	e0bffe17 	ldw	r2,-8(fp)
 4003cf8:	e0ffff17 	ldw	r3,-4(fp)
 4003cfc:	d8000015 	stw	zero,0(sp)
 4003d00:	e1fffd17 	ldw	r7,-12(fp)
 4003d04:	01810034 	movhi	r6,1024
 4003d08:	318f5c04 	addi	r6,r6,15728
 4003d0c:	180b883a 	mov	r5,r3
 4003d10:	1009883a 	mov	r4,r2
 4003d14:	4004a540 	call	4004a54 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4003d18:	e0bffd17 	ldw	r2,-12(fp)
 4003d1c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4003d20:	e0bffd17 	ldw	r2,-12(fp)
 4003d24:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4003d28:	d0e6b117 	ldw	r3,-25916(gp)
 4003d2c:	e1fffd17 	ldw	r7,-12(fp)
 4003d30:	01810034 	movhi	r6,1024
 4003d34:	318fdf04 	addi	r6,r6,16252
 4003d38:	180b883a 	mov	r5,r3
 4003d3c:	1009883a 	mov	r4,r2
 4003d40:	40045b40 	call	40045b4 <alt_alarm_start>
 4003d44:	1000040e 	bge	r2,zero,4003d58 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4003d48:	e0fffd17 	ldw	r3,-12(fp)
 4003d4c:	00a00034 	movhi	r2,32768
 4003d50:	10bfffc4 	addi	r2,r2,-1
 4003d54:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4003d58:	0001883a 	nop
 4003d5c:	e037883a 	mov	sp,fp
 4003d60:	dfc00117 	ldw	ra,4(sp)
 4003d64:	df000017 	ldw	fp,0(sp)
 4003d68:	dec00204 	addi	sp,sp,8
 4003d6c:	f800283a 	ret

04003d70 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4003d70:	defff804 	addi	sp,sp,-32
 4003d74:	df000715 	stw	fp,28(sp)
 4003d78:	df000704 	addi	fp,sp,28
 4003d7c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4003d80:	e0bfff17 	ldw	r2,-4(fp)
 4003d84:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4003d88:	e0bffb17 	ldw	r2,-20(fp)
 4003d8c:	10800017 	ldw	r2,0(r2)
 4003d90:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4003d94:	e0bffc17 	ldw	r2,-16(fp)
 4003d98:	10800104 	addi	r2,r2,4
 4003d9c:	10800037 	ldwio	r2,0(r2)
 4003da0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4003da4:	e0bffd17 	ldw	r2,-12(fp)
 4003da8:	1080c00c 	andi	r2,r2,768
 4003dac:	10006d26 	beq	r2,zero,4003f64 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4003db0:	e0bffd17 	ldw	r2,-12(fp)
 4003db4:	1080400c 	andi	r2,r2,256
 4003db8:	10003526 	beq	r2,zero,4003e90 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4003dbc:	00800074 	movhi	r2,1
 4003dc0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4003dc4:	e0bffb17 	ldw	r2,-20(fp)
 4003dc8:	10800a17 	ldw	r2,40(r2)
 4003dcc:	10800044 	addi	r2,r2,1
 4003dd0:	1081ffcc 	andi	r2,r2,2047
 4003dd4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4003dd8:	e0bffb17 	ldw	r2,-20(fp)
 4003ddc:	10c00b17 	ldw	r3,44(r2)
 4003de0:	e0bffe17 	ldw	r2,-8(fp)
 4003de4:	18801526 	beq	r3,r2,4003e3c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4003de8:	e0bffc17 	ldw	r2,-16(fp)
 4003dec:	10800037 	ldwio	r2,0(r2)
 4003df0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4003df4:	e0bff917 	ldw	r2,-28(fp)
 4003df8:	10a0000c 	andi	r2,r2,32768
 4003dfc:	10001126 	beq	r2,zero,4003e44 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4003e00:	e0bffb17 	ldw	r2,-20(fp)
 4003e04:	10800a17 	ldw	r2,40(r2)
 4003e08:	e0fff917 	ldw	r3,-28(fp)
 4003e0c:	1809883a 	mov	r4,r3
 4003e10:	e0fffb17 	ldw	r3,-20(fp)
 4003e14:	1885883a 	add	r2,r3,r2
 4003e18:	10800e04 	addi	r2,r2,56
 4003e1c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4003e20:	e0bffb17 	ldw	r2,-20(fp)
 4003e24:	10800a17 	ldw	r2,40(r2)
 4003e28:	10800044 	addi	r2,r2,1
 4003e2c:	10c1ffcc 	andi	r3,r2,2047
 4003e30:	e0bffb17 	ldw	r2,-20(fp)
 4003e34:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4003e38:	003fe206 	br	4003dc4 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4003e3c:	0001883a 	nop
 4003e40:	00000106 	br	4003e48 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4003e44:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4003e48:	e0bff917 	ldw	r2,-28(fp)
 4003e4c:	10bfffec 	andhi	r2,r2,65535
 4003e50:	10000f26 	beq	r2,zero,4003e90 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4003e54:	e0bffb17 	ldw	r2,-20(fp)
 4003e58:	10c00817 	ldw	r3,32(r2)
 4003e5c:	00bfff84 	movi	r2,-2
 4003e60:	1886703a 	and	r3,r3,r2
 4003e64:	e0bffb17 	ldw	r2,-20(fp)
 4003e68:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4003e6c:	e0bffc17 	ldw	r2,-16(fp)
 4003e70:	10800104 	addi	r2,r2,4
 4003e74:	1007883a 	mov	r3,r2
 4003e78:	e0bffb17 	ldw	r2,-20(fp)
 4003e7c:	10800817 	ldw	r2,32(r2)
 4003e80:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4003e84:	e0bffc17 	ldw	r2,-16(fp)
 4003e88:	10800104 	addi	r2,r2,4
 4003e8c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4003e90:	e0bffd17 	ldw	r2,-12(fp)
 4003e94:	1080800c 	andi	r2,r2,512
 4003e98:	103fbe26 	beq	r2,zero,4003d94 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4003e9c:	e0bffd17 	ldw	r2,-12(fp)
 4003ea0:	1004d43a 	srli	r2,r2,16
 4003ea4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4003ea8:	00001406 	br	4003efc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4003eac:	e0bffc17 	ldw	r2,-16(fp)
 4003eb0:	e0fffb17 	ldw	r3,-20(fp)
 4003eb4:	18c00d17 	ldw	r3,52(r3)
 4003eb8:	e13ffb17 	ldw	r4,-20(fp)
 4003ebc:	20c7883a 	add	r3,r4,r3
 4003ec0:	18c20e04 	addi	r3,r3,2104
 4003ec4:	18c00003 	ldbu	r3,0(r3)
 4003ec8:	18c03fcc 	andi	r3,r3,255
 4003ecc:	18c0201c 	xori	r3,r3,128
 4003ed0:	18ffe004 	addi	r3,r3,-128
 4003ed4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4003ed8:	e0bffb17 	ldw	r2,-20(fp)
 4003edc:	10800d17 	ldw	r2,52(r2)
 4003ee0:	10800044 	addi	r2,r2,1
 4003ee4:	10c1ffcc 	andi	r3,r2,2047
 4003ee8:	e0bffb17 	ldw	r2,-20(fp)
 4003eec:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4003ef0:	e0bffa17 	ldw	r2,-24(fp)
 4003ef4:	10bfffc4 	addi	r2,r2,-1
 4003ef8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4003efc:	e0bffa17 	ldw	r2,-24(fp)
 4003f00:	10000526 	beq	r2,zero,4003f18 <altera_avalon_jtag_uart_irq+0x1a8>
 4003f04:	e0bffb17 	ldw	r2,-20(fp)
 4003f08:	10c00d17 	ldw	r3,52(r2)
 4003f0c:	e0bffb17 	ldw	r2,-20(fp)
 4003f10:	10800c17 	ldw	r2,48(r2)
 4003f14:	18bfe51e 	bne	r3,r2,4003eac <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4003f18:	e0bffa17 	ldw	r2,-24(fp)
 4003f1c:	103f9d26 	beq	r2,zero,4003d94 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4003f20:	e0bffb17 	ldw	r2,-20(fp)
 4003f24:	10c00817 	ldw	r3,32(r2)
 4003f28:	00bfff44 	movi	r2,-3
 4003f2c:	1886703a 	and	r3,r3,r2
 4003f30:	e0bffb17 	ldw	r2,-20(fp)
 4003f34:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4003f38:	e0bffb17 	ldw	r2,-20(fp)
 4003f3c:	10800017 	ldw	r2,0(r2)
 4003f40:	10800104 	addi	r2,r2,4
 4003f44:	1007883a 	mov	r3,r2
 4003f48:	e0bffb17 	ldw	r2,-20(fp)
 4003f4c:	10800817 	ldw	r2,32(r2)
 4003f50:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4003f54:	e0bffc17 	ldw	r2,-16(fp)
 4003f58:	10800104 	addi	r2,r2,4
 4003f5c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4003f60:	003f8c06 	br	4003d94 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4003f64:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4003f68:	0001883a 	nop
 4003f6c:	e037883a 	mov	sp,fp
 4003f70:	df000017 	ldw	fp,0(sp)
 4003f74:	dec00104 	addi	sp,sp,4
 4003f78:	f800283a 	ret

04003f7c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4003f7c:	defff804 	addi	sp,sp,-32
 4003f80:	df000715 	stw	fp,28(sp)
 4003f84:	df000704 	addi	fp,sp,28
 4003f88:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4003f8c:	e0bffb17 	ldw	r2,-20(fp)
 4003f90:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4003f94:	e0bff917 	ldw	r2,-28(fp)
 4003f98:	10800017 	ldw	r2,0(r2)
 4003f9c:	10800104 	addi	r2,r2,4
 4003fa0:	10800037 	ldwio	r2,0(r2)
 4003fa4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4003fa8:	e0bffa17 	ldw	r2,-24(fp)
 4003fac:	1081000c 	andi	r2,r2,1024
 4003fb0:	10000b26 	beq	r2,zero,4003fe0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4003fb4:	e0bff917 	ldw	r2,-28(fp)
 4003fb8:	10800017 	ldw	r2,0(r2)
 4003fbc:	10800104 	addi	r2,r2,4
 4003fc0:	1007883a 	mov	r3,r2
 4003fc4:	e0bff917 	ldw	r2,-28(fp)
 4003fc8:	10800817 	ldw	r2,32(r2)
 4003fcc:	10810014 	ori	r2,r2,1024
 4003fd0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4003fd4:	e0bff917 	ldw	r2,-28(fp)
 4003fd8:	10000915 	stw	zero,36(r2)
 4003fdc:	00000a06 	br	4004008 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4003fe0:	e0bff917 	ldw	r2,-28(fp)
 4003fe4:	10c00917 	ldw	r3,36(r2)
 4003fe8:	00a00034 	movhi	r2,32768
 4003fec:	10bfff04 	addi	r2,r2,-4
 4003ff0:	10c00536 	bltu	r2,r3,4004008 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4003ff4:	e0bff917 	ldw	r2,-28(fp)
 4003ff8:	10800917 	ldw	r2,36(r2)
 4003ffc:	10c00044 	addi	r3,r2,1
 4004000:	e0bff917 	ldw	r2,-28(fp)
 4004004:	10c00915 	stw	r3,36(r2)
 4004008:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 400400c:	e037883a 	mov	sp,fp
 4004010:	df000017 	ldw	fp,0(sp)
 4004014:	dec00104 	addi	sp,sp,4
 4004018:	f800283a 	ret

0400401c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 400401c:	defffd04 	addi	sp,sp,-12
 4004020:	df000215 	stw	fp,8(sp)
 4004024:	df000204 	addi	fp,sp,8
 4004028:	e13ffe15 	stw	r4,-8(fp)
 400402c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4004030:	00000506 	br	4004048 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4004034:	e0bfff17 	ldw	r2,-4(fp)
 4004038:	1090000c 	andi	r2,r2,16384
 400403c:	10000226 	beq	r2,zero,4004048 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4004040:	00bffd44 	movi	r2,-11
 4004044:	00000b06 	br	4004074 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4004048:	e0bffe17 	ldw	r2,-8(fp)
 400404c:	10c00d17 	ldw	r3,52(r2)
 4004050:	e0bffe17 	ldw	r2,-8(fp)
 4004054:	10800c17 	ldw	r2,48(r2)
 4004058:	18800526 	beq	r3,r2,4004070 <altera_avalon_jtag_uart_close+0x54>
 400405c:	e0bffe17 	ldw	r2,-8(fp)
 4004060:	10c00917 	ldw	r3,36(r2)
 4004064:	e0bffe17 	ldw	r2,-8(fp)
 4004068:	10800117 	ldw	r2,4(r2)
 400406c:	18bff136 	bltu	r3,r2,4004034 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4004070:	0005883a 	mov	r2,zero
}
 4004074:	e037883a 	mov	sp,fp
 4004078:	df000017 	ldw	fp,0(sp)
 400407c:	dec00104 	addi	sp,sp,4
 4004080:	f800283a 	ret

04004084 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4004084:	defffa04 	addi	sp,sp,-24
 4004088:	df000515 	stw	fp,20(sp)
 400408c:	df000504 	addi	fp,sp,20
 4004090:	e13ffd15 	stw	r4,-12(fp)
 4004094:	e17ffe15 	stw	r5,-8(fp)
 4004098:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 400409c:	00bff9c4 	movi	r2,-25
 40040a0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 40040a4:	e0bffe17 	ldw	r2,-8(fp)
 40040a8:	10da8060 	cmpeqi	r3,r2,27137
 40040ac:	1800031e 	bne	r3,zero,40040bc <altera_avalon_jtag_uart_ioctl+0x38>
 40040b0:	109a80a0 	cmpeqi	r2,r2,27138
 40040b4:	1000181e 	bne	r2,zero,4004118 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 40040b8:	00002906 	br	4004160 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 40040bc:	e0bffd17 	ldw	r2,-12(fp)
 40040c0:	10c00117 	ldw	r3,4(r2)
 40040c4:	00a00034 	movhi	r2,32768
 40040c8:	10bfffc4 	addi	r2,r2,-1
 40040cc:	18802126 	beq	r3,r2,4004154 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 40040d0:	e0bfff17 	ldw	r2,-4(fp)
 40040d4:	10800017 	ldw	r2,0(r2)
 40040d8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 40040dc:	e0bffc17 	ldw	r2,-16(fp)
 40040e0:	10800090 	cmplti	r2,r2,2
 40040e4:	1000061e 	bne	r2,zero,4004100 <altera_avalon_jtag_uart_ioctl+0x7c>
 40040e8:	e0fffc17 	ldw	r3,-16(fp)
 40040ec:	00a00034 	movhi	r2,32768
 40040f0:	10bfffc4 	addi	r2,r2,-1
 40040f4:	18800226 	beq	r3,r2,4004100 <altera_avalon_jtag_uart_ioctl+0x7c>
 40040f8:	e0bffc17 	ldw	r2,-16(fp)
 40040fc:	00000206 	br	4004108 <altera_avalon_jtag_uart_ioctl+0x84>
 4004100:	00a00034 	movhi	r2,32768
 4004104:	10bfff84 	addi	r2,r2,-2
 4004108:	e0fffd17 	ldw	r3,-12(fp)
 400410c:	18800115 	stw	r2,4(r3)
      rc = 0;
 4004110:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4004114:	00000f06 	br	4004154 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4004118:	e0bffd17 	ldw	r2,-12(fp)
 400411c:	10c00117 	ldw	r3,4(r2)
 4004120:	00a00034 	movhi	r2,32768
 4004124:	10bfffc4 	addi	r2,r2,-1
 4004128:	18800c26 	beq	r3,r2,400415c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 400412c:	e0bffd17 	ldw	r2,-12(fp)
 4004130:	10c00917 	ldw	r3,36(r2)
 4004134:	e0bffd17 	ldw	r2,-12(fp)
 4004138:	10800117 	ldw	r2,4(r2)
 400413c:	1885803a 	cmpltu	r2,r3,r2
 4004140:	10c03fcc 	andi	r3,r2,255
 4004144:	e0bfff17 	ldw	r2,-4(fp)
 4004148:	10c00015 	stw	r3,0(r2)
      rc = 0;
 400414c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4004150:	00000206 	br	400415c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4004154:	0001883a 	nop
 4004158:	00000106 	br	4004160 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 400415c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4004160:	e0bffb17 	ldw	r2,-20(fp)
}
 4004164:	e037883a 	mov	sp,fp
 4004168:	df000017 	ldw	fp,0(sp)
 400416c:	dec00104 	addi	sp,sp,4
 4004170:	f800283a 	ret

04004174 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4004174:	defff304 	addi	sp,sp,-52
 4004178:	dfc00c15 	stw	ra,48(sp)
 400417c:	df000b15 	stw	fp,44(sp)
 4004180:	df000b04 	addi	fp,sp,44
 4004184:	e13ffc15 	stw	r4,-16(fp)
 4004188:	e17ffd15 	stw	r5,-12(fp)
 400418c:	e1bffe15 	stw	r6,-8(fp)
 4004190:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4004194:	e0bffd17 	ldw	r2,-12(fp)
 4004198:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400419c:	00004706 	br	40042bc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 40041a0:	e0bffc17 	ldw	r2,-16(fp)
 40041a4:	10800a17 	ldw	r2,40(r2)
 40041a8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 40041ac:	e0bffc17 	ldw	r2,-16(fp)
 40041b0:	10800b17 	ldw	r2,44(r2)
 40041b4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 40041b8:	e0fff717 	ldw	r3,-36(fp)
 40041bc:	e0bff817 	ldw	r2,-32(fp)
 40041c0:	18800536 	bltu	r3,r2,40041d8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 40041c4:	e0fff717 	ldw	r3,-36(fp)
 40041c8:	e0bff817 	ldw	r2,-32(fp)
 40041cc:	1885c83a 	sub	r2,r3,r2
 40041d0:	e0bff615 	stw	r2,-40(fp)
 40041d4:	00000406 	br	40041e8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 40041d8:	00c20004 	movi	r3,2048
 40041dc:	e0bff817 	ldw	r2,-32(fp)
 40041e0:	1885c83a 	sub	r2,r3,r2
 40041e4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 40041e8:	e0bff617 	ldw	r2,-40(fp)
 40041ec:	10001e26 	beq	r2,zero,4004268 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 40041f0:	e0fffe17 	ldw	r3,-8(fp)
 40041f4:	e0bff617 	ldw	r2,-40(fp)
 40041f8:	1880022e 	bgeu	r3,r2,4004204 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 40041fc:	e0bffe17 	ldw	r2,-8(fp)
 4004200:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4004204:	e0bffc17 	ldw	r2,-16(fp)
 4004208:	10c00e04 	addi	r3,r2,56
 400420c:	e0bff817 	ldw	r2,-32(fp)
 4004210:	1885883a 	add	r2,r3,r2
 4004214:	e1bff617 	ldw	r6,-40(fp)
 4004218:	100b883a 	mov	r5,r2
 400421c:	e13ff517 	ldw	r4,-44(fp)
 4004220:	40017980 	call	4001798 <memcpy>
      ptr   += n;
 4004224:	e0fff517 	ldw	r3,-44(fp)
 4004228:	e0bff617 	ldw	r2,-40(fp)
 400422c:	1885883a 	add	r2,r3,r2
 4004230:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4004234:	e0fffe17 	ldw	r3,-8(fp)
 4004238:	e0bff617 	ldw	r2,-40(fp)
 400423c:	1885c83a 	sub	r2,r3,r2
 4004240:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4004244:	e0fff817 	ldw	r3,-32(fp)
 4004248:	e0bff617 	ldw	r2,-40(fp)
 400424c:	1885883a 	add	r2,r3,r2
 4004250:	10c1ffcc 	andi	r3,r2,2047
 4004254:	e0bffc17 	ldw	r2,-16(fp)
 4004258:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 400425c:	e0bffe17 	ldw	r2,-8(fp)
 4004260:	00bfcf16 	blt	zero,r2,40041a0 <altera_avalon_jtag_uart_read+0x2c>
 4004264:	00000106 	br	400426c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4004268:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 400426c:	e0fff517 	ldw	r3,-44(fp)
 4004270:	e0bffd17 	ldw	r2,-12(fp)
 4004274:	1880141e 	bne	r3,r2,40042c8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4004278:	e0bfff17 	ldw	r2,-4(fp)
 400427c:	1090000c 	andi	r2,r2,16384
 4004280:	1000131e 	bne	r2,zero,40042d0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4004284:	0001883a 	nop
 4004288:	e0bffc17 	ldw	r2,-16(fp)
 400428c:	10c00a17 	ldw	r3,40(r2)
 4004290:	e0bff717 	ldw	r2,-36(fp)
 4004294:	1880051e 	bne	r3,r2,40042ac <altera_avalon_jtag_uart_read+0x138>
 4004298:	e0bffc17 	ldw	r2,-16(fp)
 400429c:	10c00917 	ldw	r3,36(r2)
 40042a0:	e0bffc17 	ldw	r2,-16(fp)
 40042a4:	10800117 	ldw	r2,4(r2)
 40042a8:	18bff736 	bltu	r3,r2,4004288 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 40042ac:	e0bffc17 	ldw	r2,-16(fp)
 40042b0:	10c00a17 	ldw	r3,40(r2)
 40042b4:	e0bff717 	ldw	r2,-36(fp)
 40042b8:	18800726 	beq	r3,r2,40042d8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40042bc:	e0bffe17 	ldw	r2,-8(fp)
 40042c0:	00bfb716 	blt	zero,r2,40041a0 <altera_avalon_jtag_uart_read+0x2c>
 40042c4:	00000506 	br	40042dc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 40042c8:	0001883a 	nop
 40042cc:	00000306 	br	40042dc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 40042d0:	0001883a 	nop
 40042d4:	00000106 	br	40042dc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 40042d8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 40042dc:	e0fff517 	ldw	r3,-44(fp)
 40042e0:	e0bffd17 	ldw	r2,-12(fp)
 40042e4:	18801826 	beq	r3,r2,4004348 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40042e8:	0005303a 	rdctl	r2,status
 40042ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40042f0:	e0fffb17 	ldw	r3,-20(fp)
 40042f4:	00bfff84 	movi	r2,-2
 40042f8:	1884703a 	and	r2,r3,r2
 40042fc:	1001703a 	wrctl	status,r2
  
  return context;
 4004300:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4004304:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4004308:	e0bffc17 	ldw	r2,-16(fp)
 400430c:	10800817 	ldw	r2,32(r2)
 4004310:	10c00054 	ori	r3,r2,1
 4004314:	e0bffc17 	ldw	r2,-16(fp)
 4004318:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400431c:	e0bffc17 	ldw	r2,-16(fp)
 4004320:	10800017 	ldw	r2,0(r2)
 4004324:	10800104 	addi	r2,r2,4
 4004328:	1007883a 	mov	r3,r2
 400432c:	e0bffc17 	ldw	r2,-16(fp)
 4004330:	10800817 	ldw	r2,32(r2)
 4004334:	18800035 	stwio	r2,0(r3)
 4004338:	e0bffa17 	ldw	r2,-24(fp)
 400433c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004340:	e0bff917 	ldw	r2,-28(fp)
 4004344:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4004348:	e0fff517 	ldw	r3,-44(fp)
 400434c:	e0bffd17 	ldw	r2,-12(fp)
 4004350:	18800426 	beq	r3,r2,4004364 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4004354:	e0fff517 	ldw	r3,-44(fp)
 4004358:	e0bffd17 	ldw	r2,-12(fp)
 400435c:	1885c83a 	sub	r2,r3,r2
 4004360:	00000606 	br	400437c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4004364:	e0bfff17 	ldw	r2,-4(fp)
 4004368:	1090000c 	andi	r2,r2,16384
 400436c:	10000226 	beq	r2,zero,4004378 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4004370:	00bffd44 	movi	r2,-11
 4004374:	00000106 	br	400437c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 4004378:	00bffec4 	movi	r2,-5
}
 400437c:	e037883a 	mov	sp,fp
 4004380:	dfc00117 	ldw	ra,4(sp)
 4004384:	df000017 	ldw	fp,0(sp)
 4004388:	dec00204 	addi	sp,sp,8
 400438c:	f800283a 	ret

04004390 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4004390:	defff304 	addi	sp,sp,-52
 4004394:	dfc00c15 	stw	ra,48(sp)
 4004398:	df000b15 	stw	fp,44(sp)
 400439c:	df000b04 	addi	fp,sp,44
 40043a0:	e13ffc15 	stw	r4,-16(fp)
 40043a4:	e17ffd15 	stw	r5,-12(fp)
 40043a8:	e1bffe15 	stw	r6,-8(fp)
 40043ac:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 40043b0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 40043b4:	e0bffd17 	ldw	r2,-12(fp)
 40043b8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40043bc:	00003706 	br	400449c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 40043c0:	e0bffc17 	ldw	r2,-16(fp)
 40043c4:	10800c17 	ldw	r2,48(r2)
 40043c8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 40043cc:	e0bffc17 	ldw	r2,-16(fp)
 40043d0:	10800d17 	ldw	r2,52(r2)
 40043d4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 40043d8:	e0fff917 	ldw	r3,-28(fp)
 40043dc:	e0bff517 	ldw	r2,-44(fp)
 40043e0:	1880062e 	bgeu	r3,r2,40043fc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 40043e4:	e0fff517 	ldw	r3,-44(fp)
 40043e8:	e0bff917 	ldw	r2,-28(fp)
 40043ec:	1885c83a 	sub	r2,r3,r2
 40043f0:	10bfffc4 	addi	r2,r2,-1
 40043f4:	e0bff615 	stw	r2,-40(fp)
 40043f8:	00000b06 	br	4004428 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 40043fc:	e0bff517 	ldw	r2,-44(fp)
 4004400:	10000526 	beq	r2,zero,4004418 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4004404:	00c20004 	movi	r3,2048
 4004408:	e0bff917 	ldw	r2,-28(fp)
 400440c:	1885c83a 	sub	r2,r3,r2
 4004410:	e0bff615 	stw	r2,-40(fp)
 4004414:	00000406 	br	4004428 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4004418:	00c1ffc4 	movi	r3,2047
 400441c:	e0bff917 	ldw	r2,-28(fp)
 4004420:	1885c83a 	sub	r2,r3,r2
 4004424:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4004428:	e0bff617 	ldw	r2,-40(fp)
 400442c:	10001e26 	beq	r2,zero,40044a8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4004430:	e0fffe17 	ldw	r3,-8(fp)
 4004434:	e0bff617 	ldw	r2,-40(fp)
 4004438:	1880022e 	bgeu	r3,r2,4004444 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 400443c:	e0bffe17 	ldw	r2,-8(fp)
 4004440:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4004444:	e0bffc17 	ldw	r2,-16(fp)
 4004448:	10c20e04 	addi	r3,r2,2104
 400444c:	e0bff917 	ldw	r2,-28(fp)
 4004450:	1885883a 	add	r2,r3,r2
 4004454:	e1bff617 	ldw	r6,-40(fp)
 4004458:	e17ffd17 	ldw	r5,-12(fp)
 400445c:	1009883a 	mov	r4,r2
 4004460:	40017980 	call	4001798 <memcpy>
      ptr   += n;
 4004464:	e0fffd17 	ldw	r3,-12(fp)
 4004468:	e0bff617 	ldw	r2,-40(fp)
 400446c:	1885883a 	add	r2,r3,r2
 4004470:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4004474:	e0fffe17 	ldw	r3,-8(fp)
 4004478:	e0bff617 	ldw	r2,-40(fp)
 400447c:	1885c83a 	sub	r2,r3,r2
 4004480:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4004484:	e0fff917 	ldw	r3,-28(fp)
 4004488:	e0bff617 	ldw	r2,-40(fp)
 400448c:	1885883a 	add	r2,r3,r2
 4004490:	10c1ffcc 	andi	r3,r2,2047
 4004494:	e0bffc17 	ldw	r2,-16(fp)
 4004498:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400449c:	e0bffe17 	ldw	r2,-8(fp)
 40044a0:	00bfc716 	blt	zero,r2,40043c0 <altera_avalon_jtag_uart_write+0x30>
 40044a4:	00000106 	br	40044ac <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 40044a8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40044ac:	0005303a 	rdctl	r2,status
 40044b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40044b4:	e0fffb17 	ldw	r3,-20(fp)
 40044b8:	00bfff84 	movi	r2,-2
 40044bc:	1884703a 	and	r2,r3,r2
 40044c0:	1001703a 	wrctl	status,r2
  
  return context;
 40044c4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 40044c8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40044cc:	e0bffc17 	ldw	r2,-16(fp)
 40044d0:	10800817 	ldw	r2,32(r2)
 40044d4:	10c00094 	ori	r3,r2,2
 40044d8:	e0bffc17 	ldw	r2,-16(fp)
 40044dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40044e0:	e0bffc17 	ldw	r2,-16(fp)
 40044e4:	10800017 	ldw	r2,0(r2)
 40044e8:	10800104 	addi	r2,r2,4
 40044ec:	1007883a 	mov	r3,r2
 40044f0:	e0bffc17 	ldw	r2,-16(fp)
 40044f4:	10800817 	ldw	r2,32(r2)
 40044f8:	18800035 	stwio	r2,0(r3)
 40044fc:	e0bffa17 	ldw	r2,-24(fp)
 4004500:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004504:	e0bff817 	ldw	r2,-32(fp)
 4004508:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 400450c:	e0bffe17 	ldw	r2,-8(fp)
 4004510:	0080100e 	bge	zero,r2,4004554 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4004514:	e0bfff17 	ldw	r2,-4(fp)
 4004518:	1090000c 	andi	r2,r2,16384
 400451c:	1000101e 	bne	r2,zero,4004560 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4004520:	0001883a 	nop
 4004524:	e0bffc17 	ldw	r2,-16(fp)
 4004528:	10c00d17 	ldw	r3,52(r2)
 400452c:	e0bff517 	ldw	r2,-44(fp)
 4004530:	1880051e 	bne	r3,r2,4004548 <altera_avalon_jtag_uart_write+0x1b8>
 4004534:	e0bffc17 	ldw	r2,-16(fp)
 4004538:	10c00917 	ldw	r3,36(r2)
 400453c:	e0bffc17 	ldw	r2,-16(fp)
 4004540:	10800117 	ldw	r2,4(r2)
 4004544:	18bff736 	bltu	r3,r2,4004524 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4004548:	e0bffc17 	ldw	r2,-16(fp)
 400454c:	10800917 	ldw	r2,36(r2)
 4004550:	1000051e 	bne	r2,zero,4004568 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4004554:	e0bffe17 	ldw	r2,-8(fp)
 4004558:	00bfd016 	blt	zero,r2,400449c <altera_avalon_jtag_uart_write+0x10c>
 400455c:	00000306 	br	400456c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4004560:	0001883a 	nop
 4004564:	00000106 	br	400456c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4004568:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 400456c:	e0fffd17 	ldw	r3,-12(fp)
 4004570:	e0bff717 	ldw	r2,-36(fp)
 4004574:	18800426 	beq	r3,r2,4004588 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4004578:	e0fffd17 	ldw	r3,-12(fp)
 400457c:	e0bff717 	ldw	r2,-36(fp)
 4004580:	1885c83a 	sub	r2,r3,r2
 4004584:	00000606 	br	40045a0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4004588:	e0bfff17 	ldw	r2,-4(fp)
 400458c:	1090000c 	andi	r2,r2,16384
 4004590:	10000226 	beq	r2,zero,400459c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4004594:	00bffd44 	movi	r2,-11
 4004598:	00000106 	br	40045a0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 400459c:	00bffec4 	movi	r2,-5
}
 40045a0:	e037883a 	mov	sp,fp
 40045a4:	dfc00117 	ldw	ra,4(sp)
 40045a8:	df000017 	ldw	fp,0(sp)
 40045ac:	dec00204 	addi	sp,sp,8
 40045b0:	f800283a 	ret

040045b4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 40045b4:	defff504 	addi	sp,sp,-44
 40045b8:	df000a15 	stw	fp,40(sp)
 40045bc:	df000a04 	addi	fp,sp,40
 40045c0:	e13ffc15 	stw	r4,-16(fp)
 40045c4:	e17ffd15 	stw	r5,-12(fp)
 40045c8:	e1bffe15 	stw	r6,-8(fp)
 40045cc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 40045d0:	e03ff615 	stw	zero,-40(fp)
 40045d4:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
 40045d8:	10003c26 	beq	r2,zero,40046cc <alt_alarm_start+0x118>
  {
    if (alarm)
 40045dc:	e0bffc17 	ldw	r2,-16(fp)
 40045e0:	10003826 	beq	r2,zero,40046c4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 40045e4:	e0bffc17 	ldw	r2,-16(fp)
 40045e8:	e0fffe17 	ldw	r3,-8(fp)
 40045ec:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 40045f0:	e0bffc17 	ldw	r2,-16(fp)
 40045f4:	e0ffff17 	ldw	r3,-4(fp)
 40045f8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40045fc:	0005303a 	rdctl	r2,status
 4004600:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004604:	e0fff917 	ldw	r3,-28(fp)
 4004608:	00bfff84 	movi	r2,-2
 400460c:	1884703a 	and	r2,r3,r2
 4004610:	1001703a 	wrctl	status,r2
  
  return context;
 4004614:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4004618:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400461c:	d0a6b217 	ldw	r2,-25912(gp)
      
      current_nticks = alt_nticks();
 4004620:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4004624:	e0fffd17 	ldw	r3,-12(fp)
 4004628:	e0bff617 	ldw	r2,-40(fp)
 400462c:	1885883a 	add	r2,r3,r2
 4004630:	10c00044 	addi	r3,r2,1
 4004634:	e0bffc17 	ldw	r2,-16(fp)
 4004638:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 400463c:	e0bffc17 	ldw	r2,-16(fp)
 4004640:	10c00217 	ldw	r3,8(r2)
 4004644:	e0bff617 	ldw	r2,-40(fp)
 4004648:	1880042e 	bgeu	r3,r2,400465c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 400464c:	e0bffc17 	ldw	r2,-16(fp)
 4004650:	00c00044 	movi	r3,1
 4004654:	10c00405 	stb	r3,16(r2)
 4004658:	00000206 	br	4004664 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 400465c:	e0bffc17 	ldw	r2,-16(fp)
 4004660:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4004664:	e0bffc17 	ldw	r2,-16(fp)
 4004668:	d0e00c04 	addi	r3,gp,-32720
 400466c:	e0fffa15 	stw	r3,-24(fp)
 4004670:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4004674:	e0bffb17 	ldw	r2,-20(fp)
 4004678:	e0fffa17 	ldw	r3,-24(fp)
 400467c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4004680:	e0bffa17 	ldw	r2,-24(fp)
 4004684:	10c00017 	ldw	r3,0(r2)
 4004688:	e0bffb17 	ldw	r2,-20(fp)
 400468c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4004690:	e0bffa17 	ldw	r2,-24(fp)
 4004694:	10800017 	ldw	r2,0(r2)
 4004698:	e0fffb17 	ldw	r3,-20(fp)
 400469c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 40046a0:	e0bffa17 	ldw	r2,-24(fp)
 40046a4:	e0fffb17 	ldw	r3,-20(fp)
 40046a8:	10c00015 	stw	r3,0(r2)
 40046ac:	e0bff817 	ldw	r2,-32(fp)
 40046b0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40046b4:	e0bff717 	ldw	r2,-36(fp)
 40046b8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 40046bc:	0005883a 	mov	r2,zero
 40046c0:	00000306 	br	40046d0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 40046c4:	00bffa84 	movi	r2,-22
 40046c8:	00000106 	br	40046d0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 40046cc:	00bfde84 	movi	r2,-134
  }
}
 40046d0:	e037883a 	mov	sp,fp
 40046d4:	df000017 	ldw	fp,0(sp)
 40046d8:	dec00104 	addi	sp,sp,4
 40046dc:	f800283a 	ret

040046e0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 40046e0:	defffa04 	addi	sp,sp,-24
 40046e4:	dfc00515 	stw	ra,20(sp)
 40046e8:	df000415 	stw	fp,16(sp)
 40046ec:	df000404 	addi	fp,sp,16
 40046f0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 40046f4:	008000c4 	movi	r2,3
 40046f8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 40046fc:	e0fffd17 	ldw	r3,-12(fp)
 4004700:	008003f4 	movhi	r2,15
 4004704:	10909004 	addi	r2,r2,16960
 4004708:	1885383a 	mul	r2,r3,r2
 400470c:	100b883a 	mov	r5,r2
 4004710:	01017db4 	movhi	r4,1526
 4004714:	21384004 	addi	r4,r4,-7936
 4004718:	40030640 	call	4003064 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 400471c:	100b883a 	mov	r5,r2
 4004720:	01200034 	movhi	r4,32768
 4004724:	213fffc4 	addi	r4,r4,-1
 4004728:	40030640 	call	4003064 <__udivsi3>
 400472c:	100b883a 	mov	r5,r2
 4004730:	e13fff17 	ldw	r4,-4(fp)
 4004734:	40030640 	call	4003064 <__udivsi3>
 4004738:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 400473c:	e0bffe17 	ldw	r2,-8(fp)
 4004740:	10002a26 	beq	r2,zero,40047ec <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4004744:	e03ffc15 	stw	zero,-16(fp)
 4004748:	00001706 	br	40047a8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 400474c:	00a00034 	movhi	r2,32768
 4004750:	10bfffc4 	addi	r2,r2,-1
 4004754:	10bfffc4 	addi	r2,r2,-1
 4004758:	103ffe1e 	bne	r2,zero,4004754 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 400475c:	e0fffd17 	ldw	r3,-12(fp)
 4004760:	008003f4 	movhi	r2,15
 4004764:	10909004 	addi	r2,r2,16960
 4004768:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 400476c:	100b883a 	mov	r5,r2
 4004770:	01017db4 	movhi	r4,1526
 4004774:	21384004 	addi	r4,r4,-7936
 4004778:	40030640 	call	4003064 <__udivsi3>
 400477c:	100b883a 	mov	r5,r2
 4004780:	01200034 	movhi	r4,32768
 4004784:	213fffc4 	addi	r4,r4,-1
 4004788:	40030640 	call	4003064 <__udivsi3>
 400478c:	1007883a 	mov	r3,r2
 4004790:	e0bfff17 	ldw	r2,-4(fp)
 4004794:	10c5c83a 	sub	r2,r2,r3
 4004798:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 400479c:	e0bffc17 	ldw	r2,-16(fp)
 40047a0:	10800044 	addi	r2,r2,1
 40047a4:	e0bffc15 	stw	r2,-16(fp)
 40047a8:	e0fffc17 	ldw	r3,-16(fp)
 40047ac:	e0bffe17 	ldw	r2,-8(fp)
 40047b0:	18bfe616 	blt	r3,r2,400474c <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 40047b4:	e0fffd17 	ldw	r3,-12(fp)
 40047b8:	008003f4 	movhi	r2,15
 40047bc:	10909004 	addi	r2,r2,16960
 40047c0:	1885383a 	mul	r2,r3,r2
 40047c4:	100b883a 	mov	r5,r2
 40047c8:	01017db4 	movhi	r4,1526
 40047cc:	21384004 	addi	r4,r4,-7936
 40047d0:	40030640 	call	4003064 <__udivsi3>
 40047d4:	1007883a 	mov	r3,r2
 40047d8:	e0bfff17 	ldw	r2,-4(fp)
 40047dc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 40047e0:	10bfffc4 	addi	r2,r2,-1
 40047e4:	103ffe1e 	bne	r2,zero,40047e0 <alt_busy_sleep+0x100>
 40047e8:	00000d06 	br	4004820 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 40047ec:	e0fffd17 	ldw	r3,-12(fp)
 40047f0:	008003f4 	movhi	r2,15
 40047f4:	10909004 	addi	r2,r2,16960
 40047f8:	1885383a 	mul	r2,r3,r2
 40047fc:	100b883a 	mov	r5,r2
 4004800:	01017db4 	movhi	r4,1526
 4004804:	21384004 	addi	r4,r4,-7936
 4004808:	40030640 	call	4003064 <__udivsi3>
 400480c:	1007883a 	mov	r3,r2
 4004810:	e0bfff17 	ldw	r2,-4(fp)
 4004814:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4004818:	10bfffc4 	addi	r2,r2,-1
 400481c:	00bffe16 	blt	zero,r2,4004818 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4004820:	0005883a 	mov	r2,zero
}
 4004824:	e037883a 	mov	sp,fp
 4004828:	dfc00117 	ldw	ra,4(sp)
 400482c:	df000017 	ldw	fp,0(sp)
 4004830:	dec00204 	addi	sp,sp,8
 4004834:	f800283a 	ret

04004838 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4004838:	defffe04 	addi	sp,sp,-8
 400483c:	df000115 	stw	fp,4(sp)
 4004840:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4004844:	e03fff15 	stw	zero,-4(fp)
 4004848:	00000506 	br	4004860 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 400484c:	e0bfff17 	ldw	r2,-4(fp)
 4004850:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4004854:	e0bfff17 	ldw	r2,-4(fp)
 4004858:	10800804 	addi	r2,r2,32
 400485c:	e0bfff15 	stw	r2,-4(fp)
 4004860:	e0bfff17 	ldw	r2,-4(fp)
 4004864:	10820030 	cmpltui	r2,r2,2048
 4004868:	103ff81e 	bne	r2,zero,400484c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 400486c:	0001883a 	nop
 4004870:	e037883a 	mov	sp,fp
 4004874:	df000017 	ldw	fp,0(sp)
 4004878:	dec00104 	addi	sp,sp,4
 400487c:	f800283a 	ret

04004880 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4004880:	defffe04 	addi	sp,sp,-8
 4004884:	dfc00115 	stw	ra,4(sp)
 4004888:	df000015 	stw	fp,0(sp)
 400488c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4004890:	d0a00917 	ldw	r2,-32732(gp)
 4004894:	10000326 	beq	r2,zero,40048a4 <alt_get_errno+0x24>
 4004898:	d0a00917 	ldw	r2,-32732(gp)
 400489c:	103ee83a 	callr	r2
 40048a0:	00000106 	br	40048a8 <alt_get_errno+0x28>
 40048a4:	d0a6ac04 	addi	r2,gp,-25936
}
 40048a8:	e037883a 	mov	sp,fp
 40048ac:	dfc00117 	ldw	ra,4(sp)
 40048b0:	df000017 	ldw	fp,0(sp)
 40048b4:	dec00204 	addi	sp,sp,8
 40048b8:	f800283a 	ret

040048bc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 40048bc:	defffa04 	addi	sp,sp,-24
 40048c0:	dfc00515 	stw	ra,20(sp)
 40048c4:	df000415 	stw	fp,16(sp)
 40048c8:	df000404 	addi	fp,sp,16
 40048cc:	e13ffe15 	stw	r4,-8(fp)
 40048d0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 40048d4:	e0bffe17 	ldw	r2,-8(fp)
 40048d8:	10000326 	beq	r2,zero,40048e8 <alt_dev_llist_insert+0x2c>
 40048dc:	e0bffe17 	ldw	r2,-8(fp)
 40048e0:	10800217 	ldw	r2,8(r2)
 40048e4:	1000061e 	bne	r2,zero,4004900 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 40048e8:	40048800 	call	4004880 <alt_get_errno>
 40048ec:	1007883a 	mov	r3,r2
 40048f0:	00800584 	movi	r2,22
 40048f4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 40048f8:	00bffa84 	movi	r2,-22
 40048fc:	00001306 	br	400494c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4004900:	e0bffe17 	ldw	r2,-8(fp)
 4004904:	e0ffff17 	ldw	r3,-4(fp)
 4004908:	e0fffc15 	stw	r3,-16(fp)
 400490c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4004910:	e0bffd17 	ldw	r2,-12(fp)
 4004914:	e0fffc17 	ldw	r3,-16(fp)
 4004918:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400491c:	e0bffc17 	ldw	r2,-16(fp)
 4004920:	10c00017 	ldw	r3,0(r2)
 4004924:	e0bffd17 	ldw	r2,-12(fp)
 4004928:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400492c:	e0bffc17 	ldw	r2,-16(fp)
 4004930:	10800017 	ldw	r2,0(r2)
 4004934:	e0fffd17 	ldw	r3,-12(fp)
 4004938:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400493c:	e0bffc17 	ldw	r2,-16(fp)
 4004940:	e0fffd17 	ldw	r3,-12(fp)
 4004944:	10c00015 	stw	r3,0(r2)

  return 0;  
 4004948:	0005883a 	mov	r2,zero
}
 400494c:	e037883a 	mov	sp,fp
 4004950:	dfc00117 	ldw	ra,4(sp)
 4004954:	df000017 	ldw	fp,0(sp)
 4004958:	dec00204 	addi	sp,sp,8
 400495c:	f800283a 	ret

04004960 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4004960:	defffd04 	addi	sp,sp,-12
 4004964:	dfc00215 	stw	ra,8(sp)
 4004968:	df000115 	stw	fp,4(sp)
 400496c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4004970:	00810034 	movhi	r2,1024
 4004974:	10965204 	addi	r2,r2,22856
 4004978:	e0bfff15 	stw	r2,-4(fp)
 400497c:	00000606 	br	4004998 <_do_ctors+0x38>
        (*ctor) (); 
 4004980:	e0bfff17 	ldw	r2,-4(fp)
 4004984:	10800017 	ldw	r2,0(r2)
 4004988:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400498c:	e0bfff17 	ldw	r2,-4(fp)
 4004990:	10bfff04 	addi	r2,r2,-4
 4004994:	e0bfff15 	stw	r2,-4(fp)
 4004998:	e0ffff17 	ldw	r3,-4(fp)
 400499c:	00810034 	movhi	r2,1024
 40049a0:	10965304 	addi	r2,r2,22860
 40049a4:	18bff62e 	bgeu	r3,r2,4004980 <_do_ctors+0x20>
        (*ctor) (); 
}
 40049a8:	0001883a 	nop
 40049ac:	e037883a 	mov	sp,fp
 40049b0:	dfc00117 	ldw	ra,4(sp)
 40049b4:	df000017 	ldw	fp,0(sp)
 40049b8:	dec00204 	addi	sp,sp,8
 40049bc:	f800283a 	ret

040049c0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 40049c0:	defffd04 	addi	sp,sp,-12
 40049c4:	dfc00215 	stw	ra,8(sp)
 40049c8:	df000115 	stw	fp,4(sp)
 40049cc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40049d0:	00810034 	movhi	r2,1024
 40049d4:	10965204 	addi	r2,r2,22856
 40049d8:	e0bfff15 	stw	r2,-4(fp)
 40049dc:	00000606 	br	40049f8 <_do_dtors+0x38>
        (*dtor) (); 
 40049e0:	e0bfff17 	ldw	r2,-4(fp)
 40049e4:	10800017 	ldw	r2,0(r2)
 40049e8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40049ec:	e0bfff17 	ldw	r2,-4(fp)
 40049f0:	10bfff04 	addi	r2,r2,-4
 40049f4:	e0bfff15 	stw	r2,-4(fp)
 40049f8:	e0ffff17 	ldw	r3,-4(fp)
 40049fc:	00810034 	movhi	r2,1024
 4004a00:	10965304 	addi	r2,r2,22860
 4004a04:	18bff62e 	bgeu	r3,r2,40049e0 <_do_dtors+0x20>
        (*dtor) (); 
}
 4004a08:	0001883a 	nop
 4004a0c:	e037883a 	mov	sp,fp
 4004a10:	dfc00117 	ldw	ra,4(sp)
 4004a14:	df000017 	ldw	fp,0(sp)
 4004a18:	dec00204 	addi	sp,sp,8
 4004a1c:	f800283a 	ret

04004a20 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4004a20:	defffe04 	addi	sp,sp,-8
 4004a24:	dfc00115 	stw	ra,4(sp)
 4004a28:	df000015 	stw	fp,0(sp)
 4004a2c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4004a30:	01440004 	movi	r5,4096
 4004a34:	0009883a 	mov	r4,zero
 4004a38:	400548c0 	call	400548c <alt_icache_flush>
#endif
}
 4004a3c:	0001883a 	nop
 4004a40:	e037883a 	mov	sp,fp
 4004a44:	dfc00117 	ldw	ra,4(sp)
 4004a48:	df000017 	ldw	fp,0(sp)
 4004a4c:	dec00204 	addi	sp,sp,8
 4004a50:	f800283a 	ret

04004a54 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4004a54:	defff904 	addi	sp,sp,-28
 4004a58:	dfc00615 	stw	ra,24(sp)
 4004a5c:	df000515 	stw	fp,20(sp)
 4004a60:	df000504 	addi	fp,sp,20
 4004a64:	e13ffc15 	stw	r4,-16(fp)
 4004a68:	e17ffd15 	stw	r5,-12(fp)
 4004a6c:	e1bffe15 	stw	r6,-8(fp)
 4004a70:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4004a74:	e0800217 	ldw	r2,8(fp)
 4004a78:	d8800015 	stw	r2,0(sp)
 4004a7c:	e1ffff17 	ldw	r7,-4(fp)
 4004a80:	e1bffe17 	ldw	r6,-8(fp)
 4004a84:	e17ffd17 	ldw	r5,-12(fp)
 4004a88:	e13ffc17 	ldw	r4,-16(fp)
 4004a8c:	4004c040 	call	4004c04 <alt_iic_isr_register>
}  
 4004a90:	e037883a 	mov	sp,fp
 4004a94:	dfc00117 	ldw	ra,4(sp)
 4004a98:	df000017 	ldw	fp,0(sp)
 4004a9c:	dec00204 	addi	sp,sp,8
 4004aa0:	f800283a 	ret

04004aa4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4004aa4:	defff904 	addi	sp,sp,-28
 4004aa8:	df000615 	stw	fp,24(sp)
 4004aac:	df000604 	addi	fp,sp,24
 4004ab0:	e13ffe15 	stw	r4,-8(fp)
 4004ab4:	e17fff15 	stw	r5,-4(fp)
 4004ab8:	e0bfff17 	ldw	r2,-4(fp)
 4004abc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004ac0:	0005303a 	rdctl	r2,status
 4004ac4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004ac8:	e0fffb17 	ldw	r3,-20(fp)
 4004acc:	00bfff84 	movi	r2,-2
 4004ad0:	1884703a 	and	r2,r3,r2
 4004ad4:	1001703a 	wrctl	status,r2
  
  return context;
 4004ad8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4004adc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4004ae0:	00c00044 	movi	r3,1
 4004ae4:	e0bffa17 	ldw	r2,-24(fp)
 4004ae8:	1884983a 	sll	r2,r3,r2
 4004aec:	1007883a 	mov	r3,r2
 4004af0:	d0a6b017 	ldw	r2,-25920(gp)
 4004af4:	1884b03a 	or	r2,r3,r2
 4004af8:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4004afc:	d0a6b017 	ldw	r2,-25920(gp)
 4004b00:	100170fa 	wrctl	ienable,r2
 4004b04:	e0bffc17 	ldw	r2,-16(fp)
 4004b08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004b0c:	e0bffd17 	ldw	r2,-12(fp)
 4004b10:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4004b14:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4004b18:	0001883a 	nop
}
 4004b1c:	e037883a 	mov	sp,fp
 4004b20:	df000017 	ldw	fp,0(sp)
 4004b24:	dec00104 	addi	sp,sp,4
 4004b28:	f800283a 	ret

04004b2c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4004b2c:	defff904 	addi	sp,sp,-28
 4004b30:	df000615 	stw	fp,24(sp)
 4004b34:	df000604 	addi	fp,sp,24
 4004b38:	e13ffe15 	stw	r4,-8(fp)
 4004b3c:	e17fff15 	stw	r5,-4(fp)
 4004b40:	e0bfff17 	ldw	r2,-4(fp)
 4004b44:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004b48:	0005303a 	rdctl	r2,status
 4004b4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004b50:	e0fffb17 	ldw	r3,-20(fp)
 4004b54:	00bfff84 	movi	r2,-2
 4004b58:	1884703a 	and	r2,r3,r2
 4004b5c:	1001703a 	wrctl	status,r2
  
  return context;
 4004b60:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4004b64:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4004b68:	00c00044 	movi	r3,1
 4004b6c:	e0bffa17 	ldw	r2,-24(fp)
 4004b70:	1884983a 	sll	r2,r3,r2
 4004b74:	0084303a 	nor	r2,zero,r2
 4004b78:	1007883a 	mov	r3,r2
 4004b7c:	d0a6b017 	ldw	r2,-25920(gp)
 4004b80:	1884703a 	and	r2,r3,r2
 4004b84:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4004b88:	d0a6b017 	ldw	r2,-25920(gp)
 4004b8c:	100170fa 	wrctl	ienable,r2
 4004b90:	e0bffc17 	ldw	r2,-16(fp)
 4004b94:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004b98:	e0bffd17 	ldw	r2,-12(fp)
 4004b9c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4004ba0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4004ba4:	0001883a 	nop
}
 4004ba8:	e037883a 	mov	sp,fp
 4004bac:	df000017 	ldw	fp,0(sp)
 4004bb0:	dec00104 	addi	sp,sp,4
 4004bb4:	f800283a 	ret

04004bb8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4004bb8:	defffc04 	addi	sp,sp,-16
 4004bbc:	df000315 	stw	fp,12(sp)
 4004bc0:	df000304 	addi	fp,sp,12
 4004bc4:	e13ffe15 	stw	r4,-8(fp)
 4004bc8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4004bcc:	000530fa 	rdctl	r2,ienable
 4004bd0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4004bd4:	00c00044 	movi	r3,1
 4004bd8:	e0bfff17 	ldw	r2,-4(fp)
 4004bdc:	1884983a 	sll	r2,r3,r2
 4004be0:	1007883a 	mov	r3,r2
 4004be4:	e0bffd17 	ldw	r2,-12(fp)
 4004be8:	1884703a 	and	r2,r3,r2
 4004bec:	1004c03a 	cmpne	r2,r2,zero
 4004bf0:	10803fcc 	andi	r2,r2,255
}
 4004bf4:	e037883a 	mov	sp,fp
 4004bf8:	df000017 	ldw	fp,0(sp)
 4004bfc:	dec00104 	addi	sp,sp,4
 4004c00:	f800283a 	ret

04004c04 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4004c04:	defff504 	addi	sp,sp,-44
 4004c08:	dfc00a15 	stw	ra,40(sp)
 4004c0c:	df000915 	stw	fp,36(sp)
 4004c10:	df000904 	addi	fp,sp,36
 4004c14:	e13ffc15 	stw	r4,-16(fp)
 4004c18:	e17ffd15 	stw	r5,-12(fp)
 4004c1c:	e1bffe15 	stw	r6,-8(fp)
 4004c20:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4004c24:	00bffa84 	movi	r2,-22
 4004c28:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4004c2c:	e0bffd17 	ldw	r2,-12(fp)
 4004c30:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4004c34:	e0bff817 	ldw	r2,-32(fp)
 4004c38:	10800808 	cmpgei	r2,r2,32
 4004c3c:	1000271e 	bne	r2,zero,4004cdc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4004c40:	0005303a 	rdctl	r2,status
 4004c44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4004c48:	e0fffb17 	ldw	r3,-20(fp)
 4004c4c:	00bfff84 	movi	r2,-2
 4004c50:	1884703a 	and	r2,r3,r2
 4004c54:	1001703a 	wrctl	status,r2
  
  return context;
 4004c58:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4004c5c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4004c60:	00810074 	movhi	r2,1025
 4004c64:	10a3b204 	addi	r2,r2,-28984
 4004c68:	e0fff817 	ldw	r3,-32(fp)
 4004c6c:	180690fa 	slli	r3,r3,3
 4004c70:	10c5883a 	add	r2,r2,r3
 4004c74:	e0fffe17 	ldw	r3,-8(fp)
 4004c78:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4004c7c:	00810074 	movhi	r2,1025
 4004c80:	10a3b204 	addi	r2,r2,-28984
 4004c84:	e0fff817 	ldw	r3,-32(fp)
 4004c88:	180690fa 	slli	r3,r3,3
 4004c8c:	10c5883a 	add	r2,r2,r3
 4004c90:	10800104 	addi	r2,r2,4
 4004c94:	e0ffff17 	ldw	r3,-4(fp)
 4004c98:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4004c9c:	e0bffe17 	ldw	r2,-8(fp)
 4004ca0:	10000526 	beq	r2,zero,4004cb8 <alt_iic_isr_register+0xb4>
 4004ca4:	e0bff817 	ldw	r2,-32(fp)
 4004ca8:	100b883a 	mov	r5,r2
 4004cac:	e13ffc17 	ldw	r4,-16(fp)
 4004cb0:	4004aa40 	call	4004aa4 <alt_ic_irq_enable>
 4004cb4:	00000406 	br	4004cc8 <alt_iic_isr_register+0xc4>
 4004cb8:	e0bff817 	ldw	r2,-32(fp)
 4004cbc:	100b883a 	mov	r5,r2
 4004cc0:	e13ffc17 	ldw	r4,-16(fp)
 4004cc4:	4004b2c0 	call	4004b2c <alt_ic_irq_disable>
 4004cc8:	e0bff715 	stw	r2,-36(fp)
 4004ccc:	e0bffa17 	ldw	r2,-24(fp)
 4004cd0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4004cd4:	e0bff917 	ldw	r2,-28(fp)
 4004cd8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4004cdc:	e0bff717 	ldw	r2,-36(fp)
}
 4004ce0:	e037883a 	mov	sp,fp
 4004ce4:	dfc00117 	ldw	ra,4(sp)
 4004ce8:	df000017 	ldw	fp,0(sp)
 4004cec:	dec00204 	addi	sp,sp,8
 4004cf0:	f800283a 	ret

04004cf4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4004cf4:	defff904 	addi	sp,sp,-28
 4004cf8:	dfc00615 	stw	ra,24(sp)
 4004cfc:	df000515 	stw	fp,20(sp)
 4004d00:	df000504 	addi	fp,sp,20
 4004d04:	e13ffc15 	stw	r4,-16(fp)
 4004d08:	e17ffd15 	stw	r5,-12(fp)
 4004d0c:	e1bffe15 	stw	r6,-8(fp)
 4004d10:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4004d14:	e1bfff17 	ldw	r6,-4(fp)
 4004d18:	e17ffe17 	ldw	r5,-8(fp)
 4004d1c:	e13ffd17 	ldw	r4,-12(fp)
 4004d20:	4004f340 	call	4004f34 <open>
 4004d24:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4004d28:	e0bffb17 	ldw	r2,-20(fp)
 4004d2c:	10001c16 	blt	r2,zero,4004da0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 4004d30:	00810034 	movhi	r2,1024
 4004d34:	10987c04 	addi	r2,r2,25072
 4004d38:	e0fffb17 	ldw	r3,-20(fp)
 4004d3c:	18c00324 	muli	r3,r3,12
 4004d40:	10c5883a 	add	r2,r2,r3
 4004d44:	10c00017 	ldw	r3,0(r2)
 4004d48:	e0bffc17 	ldw	r2,-16(fp)
 4004d4c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4004d50:	00810034 	movhi	r2,1024
 4004d54:	10987c04 	addi	r2,r2,25072
 4004d58:	e0fffb17 	ldw	r3,-20(fp)
 4004d5c:	18c00324 	muli	r3,r3,12
 4004d60:	10c5883a 	add	r2,r2,r3
 4004d64:	10800104 	addi	r2,r2,4
 4004d68:	10c00017 	ldw	r3,0(r2)
 4004d6c:	e0bffc17 	ldw	r2,-16(fp)
 4004d70:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4004d74:	00810034 	movhi	r2,1024
 4004d78:	10987c04 	addi	r2,r2,25072
 4004d7c:	e0fffb17 	ldw	r3,-20(fp)
 4004d80:	18c00324 	muli	r3,r3,12
 4004d84:	10c5883a 	add	r2,r2,r3
 4004d88:	10800204 	addi	r2,r2,8
 4004d8c:	10c00017 	ldw	r3,0(r2)
 4004d90:	e0bffc17 	ldw	r2,-16(fp)
 4004d94:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4004d98:	e13ffb17 	ldw	r4,-20(fp)
 4004d9c:	400381c0 	call	400381c <alt_release_fd>
  }
} 
 4004da0:	0001883a 	nop
 4004da4:	e037883a 	mov	sp,fp
 4004da8:	dfc00117 	ldw	ra,4(sp)
 4004dac:	df000017 	ldw	fp,0(sp)
 4004db0:	dec00204 	addi	sp,sp,8
 4004db4:	f800283a 	ret

04004db8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4004db8:	defffb04 	addi	sp,sp,-20
 4004dbc:	dfc00415 	stw	ra,16(sp)
 4004dc0:	df000315 	stw	fp,12(sp)
 4004dc4:	df000304 	addi	fp,sp,12
 4004dc8:	e13ffd15 	stw	r4,-12(fp)
 4004dcc:	e17ffe15 	stw	r5,-8(fp)
 4004dd0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4004dd4:	01c07fc4 	movi	r7,511
 4004dd8:	01800044 	movi	r6,1
 4004ddc:	e17ffd17 	ldw	r5,-12(fp)
 4004de0:	01010034 	movhi	r4,1024
 4004de4:	21187f04 	addi	r4,r4,25084
 4004de8:	4004cf40 	call	4004cf4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4004dec:	01c07fc4 	movi	r7,511
 4004df0:	000d883a 	mov	r6,zero
 4004df4:	e17ffe17 	ldw	r5,-8(fp)
 4004df8:	01010034 	movhi	r4,1024
 4004dfc:	21187c04 	addi	r4,r4,25072
 4004e00:	4004cf40 	call	4004cf4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4004e04:	01c07fc4 	movi	r7,511
 4004e08:	01800044 	movi	r6,1
 4004e0c:	e17fff17 	ldw	r5,-4(fp)
 4004e10:	01010034 	movhi	r4,1024
 4004e14:	21188204 	addi	r4,r4,25096
 4004e18:	4004cf40 	call	4004cf4 <alt_open_fd>
}  
 4004e1c:	0001883a 	nop
 4004e20:	e037883a 	mov	sp,fp
 4004e24:	dfc00117 	ldw	ra,4(sp)
 4004e28:	df000017 	ldw	fp,0(sp)
 4004e2c:	dec00204 	addi	sp,sp,8
 4004e30:	f800283a 	ret

04004e34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4004e34:	defffe04 	addi	sp,sp,-8
 4004e38:	dfc00115 	stw	ra,4(sp)
 4004e3c:	df000015 	stw	fp,0(sp)
 4004e40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4004e44:	d0a00917 	ldw	r2,-32732(gp)
 4004e48:	10000326 	beq	r2,zero,4004e58 <alt_get_errno+0x24>
 4004e4c:	d0a00917 	ldw	r2,-32732(gp)
 4004e50:	103ee83a 	callr	r2
 4004e54:	00000106 	br	4004e5c <alt_get_errno+0x28>
 4004e58:	d0a6ac04 	addi	r2,gp,-25936
}
 4004e5c:	e037883a 	mov	sp,fp
 4004e60:	dfc00117 	ldw	ra,4(sp)
 4004e64:	df000017 	ldw	fp,0(sp)
 4004e68:	dec00204 	addi	sp,sp,8
 4004e6c:	f800283a 	ret

04004e70 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4004e70:	defffd04 	addi	sp,sp,-12
 4004e74:	df000215 	stw	fp,8(sp)
 4004e78:	df000204 	addi	fp,sp,8
 4004e7c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4004e80:	e0bfff17 	ldw	r2,-4(fp)
 4004e84:	10800217 	ldw	r2,8(r2)
 4004e88:	10d00034 	orhi	r3,r2,16384
 4004e8c:	e0bfff17 	ldw	r2,-4(fp)
 4004e90:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4004e94:	e03ffe15 	stw	zero,-8(fp)
 4004e98:	00001d06 	br	4004f10 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4004e9c:	00810034 	movhi	r2,1024
 4004ea0:	10987c04 	addi	r2,r2,25072
 4004ea4:	e0fffe17 	ldw	r3,-8(fp)
 4004ea8:	18c00324 	muli	r3,r3,12
 4004eac:	10c5883a 	add	r2,r2,r3
 4004eb0:	10c00017 	ldw	r3,0(r2)
 4004eb4:	e0bfff17 	ldw	r2,-4(fp)
 4004eb8:	10800017 	ldw	r2,0(r2)
 4004ebc:	1880111e 	bne	r3,r2,4004f04 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4004ec0:	00810034 	movhi	r2,1024
 4004ec4:	10987c04 	addi	r2,r2,25072
 4004ec8:	e0fffe17 	ldw	r3,-8(fp)
 4004ecc:	18c00324 	muli	r3,r3,12
 4004ed0:	10c5883a 	add	r2,r2,r3
 4004ed4:	10800204 	addi	r2,r2,8
 4004ed8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4004edc:	1000090e 	bge	r2,zero,4004f04 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4004ee0:	e0bffe17 	ldw	r2,-8(fp)
 4004ee4:	10c00324 	muli	r3,r2,12
 4004ee8:	00810034 	movhi	r2,1024
 4004eec:	10987c04 	addi	r2,r2,25072
 4004ef0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4004ef4:	e0bfff17 	ldw	r2,-4(fp)
 4004ef8:	18800226 	beq	r3,r2,4004f04 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4004efc:	00bffcc4 	movi	r2,-13
 4004f00:	00000806 	br	4004f24 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4004f04:	e0bffe17 	ldw	r2,-8(fp)
 4004f08:	10800044 	addi	r2,r2,1
 4004f0c:	e0bffe15 	stw	r2,-8(fp)
 4004f10:	d0a00817 	ldw	r2,-32736(gp)
 4004f14:	1007883a 	mov	r3,r2
 4004f18:	e0bffe17 	ldw	r2,-8(fp)
 4004f1c:	18bfdf2e 	bgeu	r3,r2,4004e9c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4004f20:	0005883a 	mov	r2,zero
}
 4004f24:	e037883a 	mov	sp,fp
 4004f28:	df000017 	ldw	fp,0(sp)
 4004f2c:	dec00104 	addi	sp,sp,4
 4004f30:	f800283a 	ret

04004f34 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4004f34:	defff604 	addi	sp,sp,-40
 4004f38:	dfc00915 	stw	ra,36(sp)
 4004f3c:	df000815 	stw	fp,32(sp)
 4004f40:	df000804 	addi	fp,sp,32
 4004f44:	e13ffd15 	stw	r4,-12(fp)
 4004f48:	e17ffe15 	stw	r5,-8(fp)
 4004f4c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4004f50:	00bfffc4 	movi	r2,-1
 4004f54:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4004f58:	00bffb44 	movi	r2,-19
 4004f5c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4004f60:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4004f64:	d1600604 	addi	r5,gp,-32744
 4004f68:	e13ffd17 	ldw	r4,-12(fp)
 4004f6c:	40052500 	call	4005250 <alt_find_dev>
 4004f70:	e0bff815 	stw	r2,-32(fp)
 4004f74:	e0bff817 	ldw	r2,-32(fp)
 4004f78:	1000051e 	bne	r2,zero,4004f90 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4004f7c:	e13ffd17 	ldw	r4,-12(fp)
 4004f80:	40052e00 	call	40052e0 <alt_find_file>
 4004f84:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4004f88:	00800044 	movi	r2,1
 4004f8c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4004f90:	e0bff817 	ldw	r2,-32(fp)
 4004f94:	10002926 	beq	r2,zero,400503c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4004f98:	e13ff817 	ldw	r4,-32(fp)
 4004f9c:	40053e80 	call	40053e8 <alt_get_fd>
 4004fa0:	e0bff915 	stw	r2,-28(fp)
 4004fa4:	e0bff917 	ldw	r2,-28(fp)
 4004fa8:	1000030e 	bge	r2,zero,4004fb8 <open+0x84>
    {
      status = index;
 4004fac:	e0bff917 	ldw	r2,-28(fp)
 4004fb0:	e0bffa15 	stw	r2,-24(fp)
 4004fb4:	00002306 	br	4005044 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 4004fb8:	e0bff917 	ldw	r2,-28(fp)
 4004fbc:	10c00324 	muli	r3,r2,12
 4004fc0:	00810034 	movhi	r2,1024
 4004fc4:	10987c04 	addi	r2,r2,25072
 4004fc8:	1885883a 	add	r2,r3,r2
 4004fcc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4004fd0:	e0fffe17 	ldw	r3,-8(fp)
 4004fd4:	00900034 	movhi	r2,16384
 4004fd8:	10bfffc4 	addi	r2,r2,-1
 4004fdc:	1886703a 	and	r3,r3,r2
 4004fe0:	e0bffc17 	ldw	r2,-16(fp)
 4004fe4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4004fe8:	e0bffb17 	ldw	r2,-20(fp)
 4004fec:	1000051e 	bne	r2,zero,4005004 <open+0xd0>
 4004ff0:	e13ffc17 	ldw	r4,-16(fp)
 4004ff4:	4004e700 	call	4004e70 <alt_file_locked>
 4004ff8:	e0bffa15 	stw	r2,-24(fp)
 4004ffc:	e0bffa17 	ldw	r2,-24(fp)
 4005000:	10001016 	blt	r2,zero,4005044 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4005004:	e0bff817 	ldw	r2,-32(fp)
 4005008:	10800317 	ldw	r2,12(r2)
 400500c:	10000826 	beq	r2,zero,4005030 <open+0xfc>
 4005010:	e0bff817 	ldw	r2,-32(fp)
 4005014:	10800317 	ldw	r2,12(r2)
 4005018:	e1ffff17 	ldw	r7,-4(fp)
 400501c:	e1bffe17 	ldw	r6,-8(fp)
 4005020:	e17ffd17 	ldw	r5,-12(fp)
 4005024:	e13ffc17 	ldw	r4,-16(fp)
 4005028:	103ee83a 	callr	r2
 400502c:	00000106 	br	4005034 <open+0x100>
 4005030:	0005883a 	mov	r2,zero
 4005034:	e0bffa15 	stw	r2,-24(fp)
 4005038:	00000206 	br	4005044 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 400503c:	00bffb44 	movi	r2,-19
 4005040:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4005044:	e0bffa17 	ldw	r2,-24(fp)
 4005048:	1000090e 	bge	r2,zero,4005070 <open+0x13c>
  {
    alt_release_fd (index);  
 400504c:	e13ff917 	ldw	r4,-28(fp)
 4005050:	400381c0 	call	400381c <alt_release_fd>
    ALT_ERRNO = -status;
 4005054:	4004e340 	call	4004e34 <alt_get_errno>
 4005058:	1007883a 	mov	r3,r2
 400505c:	e0bffa17 	ldw	r2,-24(fp)
 4005060:	0085c83a 	sub	r2,zero,r2
 4005064:	18800015 	stw	r2,0(r3)
    return -1;
 4005068:	00bfffc4 	movi	r2,-1
 400506c:	00000106 	br	4005074 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 4005070:	e0bff917 	ldw	r2,-28(fp)
}
 4005074:	e037883a 	mov	sp,fp
 4005078:	dfc00117 	ldw	ra,4(sp)
 400507c:	df000017 	ldw	fp,0(sp)
 4005080:	dec00204 	addi	sp,sp,8
 4005084:	f800283a 	ret

04005088 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4005088:	defffa04 	addi	sp,sp,-24
 400508c:	df000515 	stw	fp,20(sp)
 4005090:	df000504 	addi	fp,sp,20
 4005094:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4005098:	0005303a 	rdctl	r2,status
 400509c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40050a0:	e0fffc17 	ldw	r3,-16(fp)
 40050a4:	00bfff84 	movi	r2,-2
 40050a8:	1884703a 	and	r2,r3,r2
 40050ac:	1001703a 	wrctl	status,r2
  
  return context;
 40050b0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 40050b4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 40050b8:	e0bfff17 	ldw	r2,-4(fp)
 40050bc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 40050c0:	e0bffd17 	ldw	r2,-12(fp)
 40050c4:	10800017 	ldw	r2,0(r2)
 40050c8:	e0fffd17 	ldw	r3,-12(fp)
 40050cc:	18c00117 	ldw	r3,4(r3)
 40050d0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 40050d4:	e0bffd17 	ldw	r2,-12(fp)
 40050d8:	10800117 	ldw	r2,4(r2)
 40050dc:	e0fffd17 	ldw	r3,-12(fp)
 40050e0:	18c00017 	ldw	r3,0(r3)
 40050e4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 40050e8:	e0bffd17 	ldw	r2,-12(fp)
 40050ec:	e0fffd17 	ldw	r3,-12(fp)
 40050f0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 40050f4:	e0bffd17 	ldw	r2,-12(fp)
 40050f8:	e0fffd17 	ldw	r3,-12(fp)
 40050fc:	10c00015 	stw	r3,0(r2)
 4005100:	e0bffb17 	ldw	r2,-20(fp)
 4005104:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4005108:	e0bffe17 	ldw	r2,-8(fp)
 400510c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4005110:	0001883a 	nop
 4005114:	e037883a 	mov	sp,fp
 4005118:	df000017 	ldw	fp,0(sp)
 400511c:	dec00104 	addi	sp,sp,4
 4005120:	f800283a 	ret

04005124 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4005124:	defffb04 	addi	sp,sp,-20
 4005128:	dfc00415 	stw	ra,16(sp)
 400512c:	df000315 	stw	fp,12(sp)
 4005130:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4005134:	d0a00c17 	ldw	r2,-32720(gp)
 4005138:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 400513c:	d0a6b217 	ldw	r2,-25912(gp)
 4005140:	10800044 	addi	r2,r2,1
 4005144:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4005148:	00002e06 	br	4005204 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 400514c:	e0bffd17 	ldw	r2,-12(fp)
 4005150:	10800017 	ldw	r2,0(r2)
 4005154:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4005158:	e0bffd17 	ldw	r2,-12(fp)
 400515c:	10800403 	ldbu	r2,16(r2)
 4005160:	10803fcc 	andi	r2,r2,255
 4005164:	10000426 	beq	r2,zero,4005178 <alt_tick+0x54>
 4005168:	d0a6b217 	ldw	r2,-25912(gp)
 400516c:	1000021e 	bne	r2,zero,4005178 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4005170:	e0bffd17 	ldw	r2,-12(fp)
 4005174:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4005178:	e0bffd17 	ldw	r2,-12(fp)
 400517c:	10800217 	ldw	r2,8(r2)
 4005180:	d0e6b217 	ldw	r3,-25912(gp)
 4005184:	18801d36 	bltu	r3,r2,40051fc <alt_tick+0xd8>
 4005188:	e0bffd17 	ldw	r2,-12(fp)
 400518c:	10800403 	ldbu	r2,16(r2)
 4005190:	10803fcc 	andi	r2,r2,255
 4005194:	1000191e 	bne	r2,zero,40051fc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4005198:	e0bffd17 	ldw	r2,-12(fp)
 400519c:	10800317 	ldw	r2,12(r2)
 40051a0:	e0fffd17 	ldw	r3,-12(fp)
 40051a4:	18c00517 	ldw	r3,20(r3)
 40051a8:	1809883a 	mov	r4,r3
 40051ac:	103ee83a 	callr	r2
 40051b0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 40051b4:	e0bfff17 	ldw	r2,-4(fp)
 40051b8:	1000031e 	bne	r2,zero,40051c8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 40051bc:	e13ffd17 	ldw	r4,-12(fp)
 40051c0:	40050880 	call	4005088 <alt_alarm_stop>
 40051c4:	00000d06 	br	40051fc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 40051c8:	e0bffd17 	ldw	r2,-12(fp)
 40051cc:	10c00217 	ldw	r3,8(r2)
 40051d0:	e0bfff17 	ldw	r2,-4(fp)
 40051d4:	1887883a 	add	r3,r3,r2
 40051d8:	e0bffd17 	ldw	r2,-12(fp)
 40051dc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 40051e0:	e0bffd17 	ldw	r2,-12(fp)
 40051e4:	10c00217 	ldw	r3,8(r2)
 40051e8:	d0a6b217 	ldw	r2,-25912(gp)
 40051ec:	1880032e 	bgeu	r3,r2,40051fc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 40051f0:	e0bffd17 	ldw	r2,-12(fp)
 40051f4:	00c00044 	movi	r3,1
 40051f8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 40051fc:	e0bffe17 	ldw	r2,-8(fp)
 4005200:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4005204:	e0fffd17 	ldw	r3,-12(fp)
 4005208:	d0a00c04 	addi	r2,gp,-32720
 400520c:	18bfcf1e 	bne	r3,r2,400514c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4005210:	0001883a 	nop
}
 4005214:	0001883a 	nop
 4005218:	e037883a 	mov	sp,fp
 400521c:	dfc00117 	ldw	ra,4(sp)
 4005220:	df000017 	ldw	fp,0(sp)
 4005224:	dec00204 	addi	sp,sp,8
 4005228:	f800283a 	ret

0400522c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 400522c:	deffff04 	addi	sp,sp,-4
 4005230:	df000015 	stw	fp,0(sp)
 4005234:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4005238:	000170fa 	wrctl	ienable,zero
}
 400523c:	0001883a 	nop
 4005240:	e037883a 	mov	sp,fp
 4005244:	df000017 	ldw	fp,0(sp)
 4005248:	dec00104 	addi	sp,sp,4
 400524c:	f800283a 	ret

04005250 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4005250:	defffa04 	addi	sp,sp,-24
 4005254:	dfc00515 	stw	ra,20(sp)
 4005258:	df000415 	stw	fp,16(sp)
 400525c:	df000404 	addi	fp,sp,16
 4005260:	e13ffe15 	stw	r4,-8(fp)
 4005264:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4005268:	e0bfff17 	ldw	r2,-4(fp)
 400526c:	10800017 	ldw	r2,0(r2)
 4005270:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4005274:	e13ffe17 	ldw	r4,-8(fp)
 4005278:	400042c0 	call	400042c <strlen>
 400527c:	10800044 	addi	r2,r2,1
 4005280:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4005284:	00000d06 	br	40052bc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4005288:	e0bffc17 	ldw	r2,-16(fp)
 400528c:	10800217 	ldw	r2,8(r2)
 4005290:	e0fffd17 	ldw	r3,-12(fp)
 4005294:	180d883a 	mov	r6,r3
 4005298:	e17ffe17 	ldw	r5,-8(fp)
 400529c:	1009883a 	mov	r4,r2
 40052a0:	40056040 	call	4005604 <memcmp>
 40052a4:	1000021e 	bne	r2,zero,40052b0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 40052a8:	e0bffc17 	ldw	r2,-16(fp)
 40052ac:	00000706 	br	40052cc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 40052b0:	e0bffc17 	ldw	r2,-16(fp)
 40052b4:	10800017 	ldw	r2,0(r2)
 40052b8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40052bc:	e0fffc17 	ldw	r3,-16(fp)
 40052c0:	e0bfff17 	ldw	r2,-4(fp)
 40052c4:	18bff01e 	bne	r3,r2,4005288 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 40052c8:	0005883a 	mov	r2,zero
}
 40052cc:	e037883a 	mov	sp,fp
 40052d0:	dfc00117 	ldw	ra,4(sp)
 40052d4:	df000017 	ldw	fp,0(sp)
 40052d8:	dec00204 	addi	sp,sp,8
 40052dc:	f800283a 	ret

040052e0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40052e0:	defffb04 	addi	sp,sp,-20
 40052e4:	dfc00415 	stw	ra,16(sp)
 40052e8:	df000315 	stw	fp,12(sp)
 40052ec:	df000304 	addi	fp,sp,12
 40052f0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40052f4:	d0a00417 	ldw	r2,-32752(gp)
 40052f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40052fc:	00003106 	br	40053c4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4005300:	e0bffd17 	ldw	r2,-12(fp)
 4005304:	10800217 	ldw	r2,8(r2)
 4005308:	1009883a 	mov	r4,r2
 400530c:	400042c0 	call	400042c <strlen>
 4005310:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4005314:	e0bffd17 	ldw	r2,-12(fp)
 4005318:	10c00217 	ldw	r3,8(r2)
 400531c:	e0bffe17 	ldw	r2,-8(fp)
 4005320:	10bfffc4 	addi	r2,r2,-1
 4005324:	1885883a 	add	r2,r3,r2
 4005328:	10800003 	ldbu	r2,0(r2)
 400532c:	10803fcc 	andi	r2,r2,255
 4005330:	1080201c 	xori	r2,r2,128
 4005334:	10bfe004 	addi	r2,r2,-128
 4005338:	10800bd8 	cmpnei	r2,r2,47
 400533c:	1000031e 	bne	r2,zero,400534c <alt_find_file+0x6c>
    {
      len -= 1;
 4005340:	e0bffe17 	ldw	r2,-8(fp)
 4005344:	10bfffc4 	addi	r2,r2,-1
 4005348:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400534c:	e0bffe17 	ldw	r2,-8(fp)
 4005350:	e0ffff17 	ldw	r3,-4(fp)
 4005354:	1885883a 	add	r2,r3,r2
 4005358:	10800003 	ldbu	r2,0(r2)
 400535c:	10803fcc 	andi	r2,r2,255
 4005360:	1080201c 	xori	r2,r2,128
 4005364:	10bfe004 	addi	r2,r2,-128
 4005368:	10800be0 	cmpeqi	r2,r2,47
 400536c:	1000081e 	bne	r2,zero,4005390 <alt_find_file+0xb0>
 4005370:	e0bffe17 	ldw	r2,-8(fp)
 4005374:	e0ffff17 	ldw	r3,-4(fp)
 4005378:	1885883a 	add	r2,r3,r2
 400537c:	10800003 	ldbu	r2,0(r2)
 4005380:	10803fcc 	andi	r2,r2,255
 4005384:	1080201c 	xori	r2,r2,128
 4005388:	10bfe004 	addi	r2,r2,-128
 400538c:	10000a1e 	bne	r2,zero,40053b8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4005390:	e0bffd17 	ldw	r2,-12(fp)
 4005394:	10800217 	ldw	r2,8(r2)
 4005398:	e0fffe17 	ldw	r3,-8(fp)
 400539c:	180d883a 	mov	r6,r3
 40053a0:	e17fff17 	ldw	r5,-4(fp)
 40053a4:	1009883a 	mov	r4,r2
 40053a8:	40056040 	call	4005604 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40053ac:	1000021e 	bne	r2,zero,40053b8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 40053b0:	e0bffd17 	ldw	r2,-12(fp)
 40053b4:	00000706 	br	40053d4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 40053b8:	e0bffd17 	ldw	r2,-12(fp)
 40053bc:	10800017 	ldw	r2,0(r2)
 40053c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40053c4:	e0fffd17 	ldw	r3,-12(fp)
 40053c8:	d0a00404 	addi	r2,gp,-32752
 40053cc:	18bfcc1e 	bne	r3,r2,4005300 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40053d0:	0005883a 	mov	r2,zero
}
 40053d4:	e037883a 	mov	sp,fp
 40053d8:	dfc00117 	ldw	ra,4(sp)
 40053dc:	df000017 	ldw	fp,0(sp)
 40053e0:	dec00204 	addi	sp,sp,8
 40053e4:	f800283a 	ret

040053e8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40053e8:	defffc04 	addi	sp,sp,-16
 40053ec:	df000315 	stw	fp,12(sp)
 40053f0:	df000304 	addi	fp,sp,12
 40053f4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 40053f8:	00bffa04 	movi	r2,-24
 40053fc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4005400:	e03ffd15 	stw	zero,-12(fp)
 4005404:	00001906 	br	400546c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 4005408:	00810034 	movhi	r2,1024
 400540c:	10987c04 	addi	r2,r2,25072
 4005410:	e0fffd17 	ldw	r3,-12(fp)
 4005414:	18c00324 	muli	r3,r3,12
 4005418:	10c5883a 	add	r2,r2,r3
 400541c:	10800017 	ldw	r2,0(r2)
 4005420:	10000f1e 	bne	r2,zero,4005460 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 4005424:	00810034 	movhi	r2,1024
 4005428:	10987c04 	addi	r2,r2,25072
 400542c:	e0fffd17 	ldw	r3,-12(fp)
 4005430:	18c00324 	muli	r3,r3,12
 4005434:	10c5883a 	add	r2,r2,r3
 4005438:	e0ffff17 	ldw	r3,-4(fp)
 400543c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4005440:	d0e00817 	ldw	r3,-32736(gp)
 4005444:	e0bffd17 	ldw	r2,-12(fp)
 4005448:	1880020e 	bge	r3,r2,4005454 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 400544c:	e0bffd17 	ldw	r2,-12(fp)
 4005450:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 4005454:	e0bffd17 	ldw	r2,-12(fp)
 4005458:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 400545c:	00000606 	br	4005478 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4005460:	e0bffd17 	ldw	r2,-12(fp)
 4005464:	10800044 	addi	r2,r2,1
 4005468:	e0bffd15 	stw	r2,-12(fp)
 400546c:	e0bffd17 	ldw	r2,-12(fp)
 4005470:	10800810 	cmplti	r2,r2,32
 4005474:	103fe41e 	bne	r2,zero,4005408 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4005478:	e0bffe17 	ldw	r2,-8(fp)
}
 400547c:	e037883a 	mov	sp,fp
 4005480:	df000017 	ldw	fp,0(sp)
 4005484:	dec00104 	addi	sp,sp,4
 4005488:	f800283a 	ret

0400548c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 400548c:	defffb04 	addi	sp,sp,-20
 4005490:	df000415 	stw	fp,16(sp)
 4005494:	df000404 	addi	fp,sp,16
 4005498:	e13ffe15 	stw	r4,-8(fp)
 400549c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 40054a0:	e0bfff17 	ldw	r2,-4(fp)
 40054a4:	10840070 	cmpltui	r2,r2,4097
 40054a8:	1000021e 	bne	r2,zero,40054b4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 40054ac:	00840004 	movi	r2,4096
 40054b0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 40054b4:	e0fffe17 	ldw	r3,-8(fp)
 40054b8:	e0bfff17 	ldw	r2,-4(fp)
 40054bc:	1885883a 	add	r2,r3,r2
 40054c0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40054c4:	e0bffe17 	ldw	r2,-8(fp)
 40054c8:	e0bffc15 	stw	r2,-16(fp)
 40054cc:	00000506 	br	40054e4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 40054d0:	e0bffc17 	ldw	r2,-16(fp)
 40054d4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40054d8:	e0bffc17 	ldw	r2,-16(fp)
 40054dc:	10800804 	addi	r2,r2,32
 40054e0:	e0bffc15 	stw	r2,-16(fp)
 40054e4:	e0fffc17 	ldw	r3,-16(fp)
 40054e8:	e0bffd17 	ldw	r2,-12(fp)
 40054ec:	18bff836 	bltu	r3,r2,40054d0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 40054f0:	e0bffe17 	ldw	r2,-8(fp)
 40054f4:	108007cc 	andi	r2,r2,31
 40054f8:	10000226 	beq	r2,zero,4005504 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 40054fc:	e0bffc17 	ldw	r2,-16(fp)
 4005500:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4005504:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 4005508:	0001883a 	nop
 400550c:	e037883a 	mov	sp,fp
 4005510:	df000017 	ldw	fp,0(sp)
 4005514:	dec00104 	addi	sp,sp,4
 4005518:	f800283a 	ret

0400551c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 400551c:	defffe04 	addi	sp,sp,-8
 4005520:	df000115 	stw	fp,4(sp)
 4005524:	df000104 	addi	fp,sp,4
 4005528:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 400552c:	e0bfff17 	ldw	r2,-4(fp)
 4005530:	10bffe84 	addi	r2,r2,-6
 4005534:	10c00428 	cmpgeui	r3,r2,16
 4005538:	18001a1e 	bne	r3,zero,40055a4 <alt_exception_cause_generated_bad_addr+0x88>
 400553c:	100690ba 	slli	r3,r2,2
 4005540:	00810034 	movhi	r2,1024
 4005544:	10955504 	addi	r2,r2,21844
 4005548:	1885883a 	add	r2,r3,r2
 400554c:	10800017 	ldw	r2,0(r2)
 4005550:	1000683a 	jmp	r2
 4005554:	04005594 	movui	r16,342
 4005558:	04005594 	movui	r16,342
 400555c:	040055a4 	muli	r16,zero,342
 4005560:	040055a4 	muli	r16,zero,342
 4005564:	040055a4 	muli	r16,zero,342
 4005568:	04005594 	movui	r16,342
 400556c:	0400559c 	xori	r16,zero,342
 4005570:	040055a4 	muli	r16,zero,342
 4005574:	04005594 	movui	r16,342
 4005578:	04005594 	movui	r16,342
 400557c:	040055a4 	muli	r16,zero,342
 4005580:	04005594 	movui	r16,342
 4005584:	0400559c 	xori	r16,zero,342
 4005588:	040055a4 	muli	r16,zero,342
 400558c:	040055a4 	muli	r16,zero,342
 4005590:	04005594 	movui	r16,342
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4005594:	00800044 	movi	r2,1
 4005598:	00000306 	br	40055a8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 400559c:	0005883a 	mov	r2,zero
 40055a0:	00000106 	br	40055a8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 40055a4:	0005883a 	mov	r2,zero
  }
}
 40055a8:	e037883a 	mov	sp,fp
 40055ac:	df000017 	ldw	fp,0(sp)
 40055b0:	dec00104 	addi	sp,sp,4
 40055b4:	f800283a 	ret

040055b8 <atexit>:
 40055b8:	200b883a 	mov	r5,r4
 40055bc:	000f883a 	mov	r7,zero
 40055c0:	000d883a 	mov	r6,zero
 40055c4:	0009883a 	mov	r4,zero
 40055c8:	40056801 	jmpi	4005680 <__register_exitproc>

040055cc <exit>:
 40055cc:	defffe04 	addi	sp,sp,-8
 40055d0:	000b883a 	mov	r5,zero
 40055d4:	dc000015 	stw	r16,0(sp)
 40055d8:	dfc00115 	stw	ra,4(sp)
 40055dc:	2021883a 	mov	r16,r4
 40055e0:	40057980 	call	4005798 <__call_exitprocs>
 40055e4:	00810034 	movhi	r2,1024
 40055e8:	109cf404 	addi	r2,r2,29648
 40055ec:	11000017 	ldw	r4,0(r2)
 40055f0:	20800f17 	ldw	r2,60(r4)
 40055f4:	10000126 	beq	r2,zero,40055fc <exit+0x30>
 40055f8:	103ee83a 	callr	r2
 40055fc:	8009883a 	mov	r4,r16
 4005600:	40059180 	call	4005918 <_exit>

04005604 <memcmp>:
 4005604:	01c000c4 	movi	r7,3
 4005608:	3980192e 	bgeu	r7,r6,4005670 <memcmp+0x6c>
 400560c:	2144b03a 	or	r2,r4,r5
 4005610:	11c4703a 	and	r2,r2,r7
 4005614:	10000f26 	beq	r2,zero,4005654 <memcmp+0x50>
 4005618:	20800003 	ldbu	r2,0(r4)
 400561c:	28c00003 	ldbu	r3,0(r5)
 4005620:	10c0151e 	bne	r2,r3,4005678 <memcmp+0x74>
 4005624:	31bfff84 	addi	r6,r6,-2
 4005628:	01ffffc4 	movi	r7,-1
 400562c:	00000406 	br	4005640 <memcmp+0x3c>
 4005630:	20800003 	ldbu	r2,0(r4)
 4005634:	28c00003 	ldbu	r3,0(r5)
 4005638:	31bfffc4 	addi	r6,r6,-1
 400563c:	10c00e1e 	bne	r2,r3,4005678 <memcmp+0x74>
 4005640:	21000044 	addi	r4,r4,1
 4005644:	29400044 	addi	r5,r5,1
 4005648:	31fff91e 	bne	r6,r7,4005630 <memcmp+0x2c>
 400564c:	0005883a 	mov	r2,zero
 4005650:	f800283a 	ret
 4005654:	20c00017 	ldw	r3,0(r4)
 4005658:	28800017 	ldw	r2,0(r5)
 400565c:	18bfee1e 	bne	r3,r2,4005618 <memcmp+0x14>
 4005660:	31bfff04 	addi	r6,r6,-4
 4005664:	21000104 	addi	r4,r4,4
 4005668:	29400104 	addi	r5,r5,4
 400566c:	39bff936 	bltu	r7,r6,4005654 <memcmp+0x50>
 4005670:	303fe91e 	bne	r6,zero,4005618 <memcmp+0x14>
 4005674:	003ff506 	br	400564c <memcmp+0x48>
 4005678:	10c5c83a 	sub	r2,r2,r3
 400567c:	f800283a 	ret

04005680 <__register_exitproc>:
 4005680:	defffa04 	addi	sp,sp,-24
 4005684:	dc000315 	stw	r16,12(sp)
 4005688:	04010034 	movhi	r16,1024
 400568c:	841cf404 	addi	r16,r16,29648
 4005690:	80c00017 	ldw	r3,0(r16)
 4005694:	dc400415 	stw	r17,16(sp)
 4005698:	dfc00515 	stw	ra,20(sp)
 400569c:	18805217 	ldw	r2,328(r3)
 40056a0:	2023883a 	mov	r17,r4
 40056a4:	10003726 	beq	r2,zero,4005784 <__register_exitproc+0x104>
 40056a8:	10c00117 	ldw	r3,4(r2)
 40056ac:	010007c4 	movi	r4,31
 40056b0:	20c00e16 	blt	r4,r3,40056ec <__register_exitproc+0x6c>
 40056b4:	1a000044 	addi	r8,r3,1
 40056b8:	8800221e 	bne	r17,zero,4005744 <__register_exitproc+0xc4>
 40056bc:	18c00084 	addi	r3,r3,2
 40056c0:	18c7883a 	add	r3,r3,r3
 40056c4:	18c7883a 	add	r3,r3,r3
 40056c8:	12000115 	stw	r8,4(r2)
 40056cc:	10c7883a 	add	r3,r2,r3
 40056d0:	19400015 	stw	r5,0(r3)
 40056d4:	0005883a 	mov	r2,zero
 40056d8:	dfc00517 	ldw	ra,20(sp)
 40056dc:	dc400417 	ldw	r17,16(sp)
 40056e0:	dc000317 	ldw	r16,12(sp)
 40056e4:	dec00604 	addi	sp,sp,24
 40056e8:	f800283a 	ret
 40056ec:	00800034 	movhi	r2,0
 40056f0:	10800004 	addi	r2,r2,0
 40056f4:	10002626 	beq	r2,zero,4005790 <__register_exitproc+0x110>
 40056f8:	01006404 	movi	r4,400
 40056fc:	d9400015 	stw	r5,0(sp)
 4005700:	d9800115 	stw	r6,4(sp)
 4005704:	d9c00215 	stw	r7,8(sp)
 4005708:	00000000 	call	0 <__alt_mem_sdram_controller_0-0x4000000>
 400570c:	d9400017 	ldw	r5,0(sp)
 4005710:	d9800117 	ldw	r6,4(sp)
 4005714:	d9c00217 	ldw	r7,8(sp)
 4005718:	10001d26 	beq	r2,zero,4005790 <__register_exitproc+0x110>
 400571c:	81000017 	ldw	r4,0(r16)
 4005720:	10000115 	stw	zero,4(r2)
 4005724:	02000044 	movi	r8,1
 4005728:	22405217 	ldw	r9,328(r4)
 400572c:	0007883a 	mov	r3,zero
 4005730:	12400015 	stw	r9,0(r2)
 4005734:	20805215 	stw	r2,328(r4)
 4005738:	10006215 	stw	zero,392(r2)
 400573c:	10006315 	stw	zero,396(r2)
 4005740:	883fde26 	beq	r17,zero,40056bc <__register_exitproc+0x3c>
 4005744:	18c9883a 	add	r4,r3,r3
 4005748:	2109883a 	add	r4,r4,r4
 400574c:	1109883a 	add	r4,r2,r4
 4005750:	21802215 	stw	r6,136(r4)
 4005754:	01800044 	movi	r6,1
 4005758:	12406217 	ldw	r9,392(r2)
 400575c:	30cc983a 	sll	r6,r6,r3
 4005760:	4992b03a 	or	r9,r9,r6
 4005764:	12406215 	stw	r9,392(r2)
 4005768:	21c04215 	stw	r7,264(r4)
 400576c:	01000084 	movi	r4,2
 4005770:	893fd21e 	bne	r17,r4,40056bc <__register_exitproc+0x3c>
 4005774:	11006317 	ldw	r4,396(r2)
 4005778:	218cb03a 	or	r6,r4,r6
 400577c:	11806315 	stw	r6,396(r2)
 4005780:	003fce06 	br	40056bc <__register_exitproc+0x3c>
 4005784:	18805304 	addi	r2,r3,332
 4005788:	18805215 	stw	r2,328(r3)
 400578c:	003fc606 	br	40056a8 <__register_exitproc+0x28>
 4005790:	00bfffc4 	movi	r2,-1
 4005794:	003fd006 	br	40056d8 <__register_exitproc+0x58>

04005798 <__call_exitprocs>:
 4005798:	defff504 	addi	sp,sp,-44
 400579c:	df000915 	stw	fp,36(sp)
 40057a0:	dd400615 	stw	r21,24(sp)
 40057a4:	dc800315 	stw	r18,12(sp)
 40057a8:	dfc00a15 	stw	ra,40(sp)
 40057ac:	ddc00815 	stw	r23,32(sp)
 40057b0:	dd800715 	stw	r22,28(sp)
 40057b4:	dd000515 	stw	r20,20(sp)
 40057b8:	dcc00415 	stw	r19,16(sp)
 40057bc:	dc400215 	stw	r17,8(sp)
 40057c0:	dc000115 	stw	r16,4(sp)
 40057c4:	d9000015 	stw	r4,0(sp)
 40057c8:	2839883a 	mov	fp,r5
 40057cc:	04800044 	movi	r18,1
 40057d0:	057fffc4 	movi	r21,-1
 40057d4:	00810034 	movhi	r2,1024
 40057d8:	109cf404 	addi	r2,r2,29648
 40057dc:	12000017 	ldw	r8,0(r2)
 40057e0:	45005217 	ldw	r20,328(r8)
 40057e4:	44c05204 	addi	r19,r8,328
 40057e8:	a0001c26 	beq	r20,zero,400585c <__call_exitprocs+0xc4>
 40057ec:	a0800117 	ldw	r2,4(r20)
 40057f0:	15ffffc4 	addi	r23,r2,-1
 40057f4:	b8000d16 	blt	r23,zero,400582c <__call_exitprocs+0x94>
 40057f8:	14000044 	addi	r16,r2,1
 40057fc:	8421883a 	add	r16,r16,r16
 4005800:	8421883a 	add	r16,r16,r16
 4005804:	84402004 	addi	r17,r16,128
 4005808:	a463883a 	add	r17,r20,r17
 400580c:	a421883a 	add	r16,r20,r16
 4005810:	e0001e26 	beq	fp,zero,400588c <__call_exitprocs+0xf4>
 4005814:	80804017 	ldw	r2,256(r16)
 4005818:	e0801c26 	beq	fp,r2,400588c <__call_exitprocs+0xf4>
 400581c:	bdffffc4 	addi	r23,r23,-1
 4005820:	843fff04 	addi	r16,r16,-4
 4005824:	8c7fff04 	addi	r17,r17,-4
 4005828:	bd7ff91e 	bne	r23,r21,4005810 <__call_exitprocs+0x78>
 400582c:	00800034 	movhi	r2,0
 4005830:	10800004 	addi	r2,r2,0
 4005834:	10000926 	beq	r2,zero,400585c <__call_exitprocs+0xc4>
 4005838:	a0800117 	ldw	r2,4(r20)
 400583c:	1000301e 	bne	r2,zero,4005900 <__call_exitprocs+0x168>
 4005840:	a0800017 	ldw	r2,0(r20)
 4005844:	10003226 	beq	r2,zero,4005910 <__call_exitprocs+0x178>
 4005848:	a009883a 	mov	r4,r20
 400584c:	98800015 	stw	r2,0(r19)
 4005850:	00000000 	call	0 <__alt_mem_sdram_controller_0-0x4000000>
 4005854:	9d000017 	ldw	r20,0(r19)
 4005858:	a03fe41e 	bne	r20,zero,40057ec <__call_exitprocs+0x54>
 400585c:	dfc00a17 	ldw	ra,40(sp)
 4005860:	df000917 	ldw	fp,36(sp)
 4005864:	ddc00817 	ldw	r23,32(sp)
 4005868:	dd800717 	ldw	r22,28(sp)
 400586c:	dd400617 	ldw	r21,24(sp)
 4005870:	dd000517 	ldw	r20,20(sp)
 4005874:	dcc00417 	ldw	r19,16(sp)
 4005878:	dc800317 	ldw	r18,12(sp)
 400587c:	dc400217 	ldw	r17,8(sp)
 4005880:	dc000117 	ldw	r16,4(sp)
 4005884:	dec00b04 	addi	sp,sp,44
 4005888:	f800283a 	ret
 400588c:	a0800117 	ldw	r2,4(r20)
 4005890:	80c00017 	ldw	r3,0(r16)
 4005894:	10bfffc4 	addi	r2,r2,-1
 4005898:	15c01426 	beq	r2,r23,40058ec <__call_exitprocs+0x154>
 400589c:	80000015 	stw	zero,0(r16)
 40058a0:	183fde26 	beq	r3,zero,400581c <__call_exitprocs+0x84>
 40058a4:	95c8983a 	sll	r4,r18,r23
 40058a8:	a0806217 	ldw	r2,392(r20)
 40058ac:	a5800117 	ldw	r22,4(r20)
 40058b0:	2084703a 	and	r2,r4,r2
 40058b4:	10000b26 	beq	r2,zero,40058e4 <__call_exitprocs+0x14c>
 40058b8:	a0806317 	ldw	r2,396(r20)
 40058bc:	2088703a 	and	r4,r4,r2
 40058c0:	20000c1e 	bne	r4,zero,40058f4 <__call_exitprocs+0x15c>
 40058c4:	89400017 	ldw	r5,0(r17)
 40058c8:	d9000017 	ldw	r4,0(sp)
 40058cc:	183ee83a 	callr	r3
 40058d0:	a0800117 	ldw	r2,4(r20)
 40058d4:	15bfbf1e 	bne	r2,r22,40057d4 <__call_exitprocs+0x3c>
 40058d8:	98800017 	ldw	r2,0(r19)
 40058dc:	153fcf26 	beq	r2,r20,400581c <__call_exitprocs+0x84>
 40058e0:	003fbc06 	br	40057d4 <__call_exitprocs+0x3c>
 40058e4:	183ee83a 	callr	r3
 40058e8:	003ff906 	br	40058d0 <__call_exitprocs+0x138>
 40058ec:	a5c00115 	stw	r23,4(r20)
 40058f0:	003feb06 	br	40058a0 <__call_exitprocs+0x108>
 40058f4:	89000017 	ldw	r4,0(r17)
 40058f8:	183ee83a 	callr	r3
 40058fc:	003ff406 	br	40058d0 <__call_exitprocs+0x138>
 4005900:	a0800017 	ldw	r2,0(r20)
 4005904:	a027883a 	mov	r19,r20
 4005908:	1029883a 	mov	r20,r2
 400590c:	003fb606 	br	40057e8 <__call_exitprocs+0x50>
 4005910:	0005883a 	mov	r2,zero
 4005914:	003ffb06 	br	4005904 <__call_exitprocs+0x16c>

04005918 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4005918:	defffd04 	addi	sp,sp,-12
 400591c:	df000215 	stw	fp,8(sp)
 4005920:	df000204 	addi	fp,sp,8
 4005924:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4005928:	0001883a 	nop
 400592c:	e0bfff17 	ldw	r2,-4(fp)
 4005930:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4005934:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4005938:	10000226 	beq	r2,zero,4005944 <_exit+0x2c>
    ALT_SIM_FAIL();
 400593c:	002af070 	cmpltui	zero,zero,43969
 4005940:	00000106 	br	4005948 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4005944:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4005948:	003fff06 	br	4005948 <_exit+0x30>
